{"version":3,"file":"kendo.timedurationpicker.min.js","names":["factory","define","amd","$","undefined$1","kendo","window","ui","Widget","html","map","extend","mediaQuery","OPEN","CLOSE","CHANGE","FOCUSED","ARIA_EXPANDED","HOVEREVENTS","NS","STATEDISABLED","ARIA_HIDDEN","ARIA_DISABLED","ARIA_READONLY","DISABLED","READONLY","STATEINVALID","MASKCHAR","caret","keys","defaultColumns","hours","name","format","divider","min","max","step","minutes","seconds","milliseconds","days","TimeDurationPicker","init","element","options","columns","that","this","fn","call","_columns","column","extended","selectorFormat","repeat","match","length","readonly","Boolean","attr","enable","is","parents","bigScreenMQL","adaptiveMode","onChange","_timeSelector","destroy","_popupView","_wrapper","_button","_applyCssClasses","_input","_buildMask","_validation","_editable","disable","_ariaLabel","_listsContainer","value","_old","_maskedInput","val","_canUpdateLast","notify","separator","shortcuts","size","fillMode","rounded","messages","set","cancel","events","wrapper","off","_value","parseInt","_updateValueFromTimeSelector","_toggleHover","e","currentTarget","toggleClass","type","add","addClass","removeClass","on","removeAttr","_attachHandlers","TimeSelector","id","anchor","mediaQueryList","matches","focus","trigger","_selectNearestSection","_lastCaret","close","preventDefault","open","change","_removeInvalidState","button","next","renderButton","icon","shape","insertAfter","role","part","toAdd","_emtpyMask","_maskParts","i","replace","end","mask","symbolsLength","start","indexOf","numberEnd","lastIndexOf","numberStart","push","autocomplete","insertBefore","hide","wrap","parent","_keydown","bind","_inputHandler","_focus","_focusout","_paste","_mouseDown","_mouseUp","_click","_mouseOnInput","selection","_triggerChange","_lastValue","_updateValueFromInput","setTimeout","index","_getPartValue","startSeparator","lastSeparator","substring","_getEmptyPart","_fillParts","clipNumber","symbols","parts","split","join","_clearParts","endBoundary","_updatePart","oldValue","entered","emrtyPart","current","search","_replacePart","newPart","toggle","_switchPart","future","past","key","keyCode","_backward","BACKSPACE","LEFT","RIGHT","popup","visible","_scrollerKeyDownHandler","UP","DOWN","altKey","ENTER","partValue","masksToAdd","valueParts","rest","Math","floor","getTimeParts","_validationIcon","iconClass","_addInvalidState","colValue","values","valid","emptyPart","_isPasted","_pasted","clipboardData","originalEvent","getData","_replaceEntire","_activeElement","validEntry","updatedPart","endSubstring","startSubstring","deletedPart","canUpdate","restored","oldpartValue","nextSeparator","old","lengthDiff","test","cssProperties","registerPrefix","registerValues","prop","roundedValues","concat","plugin","jQuery"],"sources":["kendo.timedurationpicker.js"],"mappings":"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","sourcesContent":["(function (factory) {\n    typeof define === 'function' && define.amd ? define(['kendo.timeselector', 'kendo.icons'], factory) :\n    factory();\n})((function () {\n    var __meta__ = {\n        id: \"timedurationpicker\",\n        name: \"TimeDurationPicker\",\n        category: \"web\",\n        description: \"The TimeDurationPicker widget allows the end user to select a time range stored in milliseconds.\",\n        docsCategory: \"editors\",\n        depends: [ \"timeselector\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            html = kendo.html,\n            map = $.map,\n            extend = $.extend,\n            mediaQuery = kendo.mediaQuery,\n            OPEN = \"open\",\n            FOCUS = \"focus\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            CLICK = \"click\",\n            SPAN = \"<span></span>\",\n            KEYDOWN = \"keydown\",\n            FOCUSOUT = \"focusout\",\n            FOCUSED = \"k-focus\",\n            MOUSEUP = \"mouseup\",\n            MOUSEDOWN = \"mousedown\",\n            PASTE = \"paste\",\n            NS = \".kendoTimeDurationPicker\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            HOVEREVENTS = \"mouseenter\" + NS + \" mouseleave\" + NS,\n            STRING = \"string\",\n            INPUT = \"input\",\n            HOVER = \"k-hover\",\n            STATEDISABLED = \"k-disabled\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            ARIA_READONLY = \"aria-readonly\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            STATEINVALID = \"k-invalid\",\n            MASKCHAR = \"_\",\n            caret = kendo.caret,\n            keys = kendo.keys,\n            NS = \".kendoTimeDurationPicker\";\n            html = kendo.html;\n\n        var defaultColumns = {\n            \"hours\": {\n                name: \"hours\",\n                format: \"## hours\",\n                divider: 3600000,\n                min: 0,\n                max: 23,\n                step: 1\n            },\n            \"minutes\": {\n                name: \"minutes\",\n                format: \"## mins\",\n                divider: 60000,\n                min: 0,\n                max: 59,\n                step: 1\n            },\n            \"seconds\": {\n                name: \"seconds\",\n                format: \"## sec\",\n                divider: 1000,\n                min: 0,\n                max: 59,\n                step: 1\n            },\n            \"milliseconds\": {\n                name: \"milliseconds\",\n                format: \"### msec\",\n                min: 0,\n                max: 999,\n                step: 1\n            },\n            \"days\": {\n                format: \"## days\",\n                name: \"days\",\n                divider: 86400000,\n                min: 0,\n                max: 365,\n                step: 1\n            }\n        };\n\n        function convertToMsec(value) {\n            return ((value.days || 0) * 86400000) + ((value.hours || 0) * 3600000) + ((value.minutes || 0) * 60000) + ((value.seconds || 0) * 1000) + (value.milliseconds || 0);\n        }\n\n        function getTimeParts(value) {\n            var rest;\n            var days = Math.floor(value / 86400000);\n            rest = value % 86400000;\n            var hours = Math.floor(rest / 3600000);\n            rest = value % 3600000;\n            var minutes = Math.floor(rest / 60000);\n            rest = value % 60000;\n            var seconds = Math.floor(rest / 1000);\n            rest = value % 1000;\n\n            return {\n                days: days,\n                hours: hours,\n                minutes: minutes,\n                seconds: seconds,\n                milliseconds: rest\n            };\n        }\n\n        function normalizeColumns(columns) {\n            return map(columns, function(column) {\n                column = typeof column === STRING ? { name: column } : column;\n                var extended = extend(true, {}, defaultColumns[column.name], column);\n                extended.selectorFormat = \"{0:\" + \"0\".repeat(extended.format.match(/#/g).length) + \"}\";\n                return extended;\n            });\n        }\n\n        var TimeDurationPicker = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                options = options || {};\n\n                Widget.fn.init.call(that, element, options);\n\n                that._columns = normalizeColumns(options.columns);\n                that.options.columns = that._columns;\n                that.options.readonly = options.readonly !== undefined$1 ? options.readonly : Boolean(that.element.attr(\"readonly\"));\n                that.options.enable = options.enable !== undefined$1 ? options.enable : !(Boolean(that.element.is(\"[disabled]\") || $(element).parents(\"fieldset\").is(':disabled')));\n\n                that.bigScreenMQL = mediaQuery(\"large\");\n                if (that.options.adaptiveMode == \"auto\") {\n                    that.bigScreenMQL.onChange(function (){\n                        if (that._timeSelector) {\n                            that._timeSelector.destroy();\n                            that._timeSelector = null;\n                        }\n\n                        that._popupView();\n                    });\n                }\n\n                that._wrapper();\n                that._button();\n                that._applyCssClasses();\n                that._input();\n                that._popupView();\n\n                that._buildMask();\n                that._validation();\n                that._editable({\n                    readonly: that.options.readonly,\n                    disable: !that.options.enable\n                });\n                that._ariaLabel(that._timeSelector._listsContainer);\n                if (that.options.value) {\n                    that.value(options.value);\n                    that._old = that._maskedInput.val();\n                }\n                that._canUpdateLast = true;\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"TimeDurationPicker\",\n                columns: [],\n                separator: \",\",\n                shortcuts: [],\n                value: null,\n                adaptiveMode: \"none\",\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                messages: {\n                    set: \"Set\",\n                    cancel: \"Cancel\",\n                    days: \"Days\",\n                    hours: \"Hours\",\n                    minutes: \"Minutes\",\n                    milliseconds: \"Milliseconds\",\n                    seconds: \"Seconds\"\n                }\n            },\n\n            events: [\n                OPEN,\n                CLOSE,\n                CHANGE\n            ],\n\n            destroy: function() {\n                var that = this;\n\n                that.wrapper.off(NS);\n                that._maskedInput.off(NS);\n                if (that._timeSelector) {\n                    that._timeSelector.destroy();\n                    that._timeSelector = null;\n                }\n\n\n                if (that.bigScreenMQL) {\n                    that.bigScreenMQL.destroy();\n                }\n            },\n\n            value: function(value) {\n                var that = this;\n\n                if (value === undefined$1) {\n                    return that._value;\n                }\n\n                if (typeof value === \"number\") {\n                    value = parseInt(value);\n                } else {\n                    value = null;\n                }\n\n                that._value = value;\n                that.element.val(that._value);\n                that._timeSelector._value = that._value;\n                that._updateValueFromTimeSelector();\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    disable = options.disable,\n                    readonly = options.readonly,\n                    element = that._maskedInput.add(that.element).off(NS),\n                    wrapper = that.wrapper.off(NS);\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .on(HOVEREVENTS, that._toggleHover);\n\n                    if (element && element.length) {\n                        element.removeAttr(DISABLED);\n                        element.removeAttr(READONLY);\n                    }\n                    element.attr(ARIA_DISABLED, false)\n                           .attr(ARIA_READONLY, false);\n\n                    that._attachHandlers();\n                } else {\n                    wrapper\n                        .addClass(disable ? STATEDISABLED : \"\")\n                        .removeClass(disable ? \"\" : STATEDISABLED);\n\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly)\n                           .attr(ARIA_DISABLED, disable)\n                           .attr(ARIA_READONLY, readonly);\n                }\n            },\n\n            readonly: function(readonly) {\n                this._editable({\n                    readonly: readonly === undefined$1 ? true : readonly,\n                    disable: false\n                });\n            },\n\n            enable: function(enable) {\n                this._editable({\n                    readonly: false,\n                    disable: !(enable = enable === undefined$1 ? true : enable)\n                });\n            },\n\n            _popupView: function() {\n                var that = this;\n                var options = that.options;\n\n                if (!that._timeSelector) {\n                    that._timeSelector = new kendo.ui.TimeSelector(that._maskedInput, {\n                        id: that.element.attr(\"id\") + \"_timeSelector\",\n                        anchor: that.wrapper,\n                        adaptiveMode: options.adaptiveMode,\n                        columns: options.columns,\n                        shortcuts: options.shortcuts,\n                        value: options.value,\n                        size: options.adaptiveMode != \"auto\" || that.bigScreenMQL.mediaQueryList.matches ? options.size : \"large\",\n                        fillMode: options.fillMode,\n                        rounded: options.rounded,\n                        messages: options.messages,\n                        focus: function() {\n                            that._maskedInput.trigger(\"focus\");\n                            that._selectNearestSection(that._lastCaret || 0);\n                        },\n                        close: function(e) {\n                            if (that.trigger(CLOSE)) {\n                                e.preventDefault();\n                            } else {\n                                that._maskedInput.attr(ARIA_EXPANDED, false);\n                                that._timeSelector._listsContainer.attr(ARIA_HIDDEN, true);\n                            }\n                        },\n                        open: function(e) {\n                            if (that.trigger(OPEN)) {\n                                e.preventDefault();\n                            } else {\n                                that._maskedInput.attr(ARIA_EXPANDED, true);\n                                that._timeSelector._listsContainer.attr(ARIA_HIDDEN, false);\n                                that._lastCaret = caret(that._maskedInput)[0];\n                                if (that._lastCaret === that._maskedInput.val().length) {\n                                    that._lastCaret = 0;\n                                }\n                            }\n                        },\n                        change: function(value) {\n                            that._value = value;\n                            that._updateValueFromTimeSelector();\n                            that._removeInvalidState();\n                            that.trigger(CHANGE);\n                        }\n                    });\n                }\n            },\n\n            _button: function() {\n                var that = this,\n                    element = that.element,\n                    options = that.options,\n                    button;\n\n                button = element.next(\"button.k-input-button\");\n\n                if (!button[0]) {\n                    button = $(html.renderButton('<button unselectable=\"on\" tabindex=\"-1\" class=\"k-input-button\" aria-label=\"select\"></button>', {\n                        icon: \"clock-arrow-rotate\",\n                        size: options.size,\n                        fillMode: options.fillMode,\n                        shape: \"none\",\n                        rounded: \"none\"\n                    })).insertAfter(element);\n                }\n\n                that._button = button.attr({\n                    \"role\": \"button\"\n                });\n            },\n\n            _buildMask: function() {\n                var columns = this.options.columns;\n                var format;\n                var toAdd = \"\";\n                var part;\n\n                this._emtpyMask = \"\";\n                this._maskParts = [];\n\n                for (var i = 0; i < columns.length; i++) {\n                    part = {};\n                    format = columns[i].format;\n\n                    if (i) {\n                        toAdd = this.options.separator;\n                    }\n\n                    toAdd += format.replace(/#/g, '_');\n                    this._emtpyMask += toAdd;\n                    part.end = this._emtpyMask.length - 1;\n                    part.mask = format.replace(/#/g, '_');\n                    part.symbolsLength = part.mask.match(/_/g).length;\n                    part.start = this._emtpyMask.indexOf(part.mask);\n                    part.numberEnd = this._emtpyMask.lastIndexOf(MASKCHAR) + 1;\n                    part.numberStart = this._emtpyMask.indexOf(MASKCHAR, part.start);\n\n                    this._maskParts.push(part);\n                }\n\n                this._old = this._emtpyMask;\n                this._maskedInput.val(this._emtpyMask);\n            },\n\n            _input: function() {\n                var that = this;\n\n                that._maskedInput = $(\"<input />\")\n                            .attr(kendo.attr(\"validate\"), false)\n                            .attr({\n                                \"role\": \"combobox\",\n                                \"aria-expanded\": false,\n                                \"aria-controls\": that.element.attr(\"id\") + \"_timeSelector\",\n                                \"autocomplete\": \"off\"\n                            })\n                            .addClass(\"k-input-inner\")\n                            .insertBefore(that.element);\n\n                that.element.hide();\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    wrapper;\n\n                wrapper = element.parents(\".k-timedurationpicker\");\n\n                if (!wrapper[0]) {\n                    wrapper = element.wrap(SPAN).parent();\n                }\n\n                that.wrapper = wrapper.addClass(\"k-timedurationpicker k-input\");\n            },\n\n            _attachHandlers: function() {\n                var that = this;\n\n                that._maskedInput\n                        .on(KEYDOWN + NS, that._keydown.bind(that))\n                        .on(INPUT + NS, that._inputHandler.bind(that))\n                        .on(FOCUS + NS, that._focus.bind(that))\n                        .on(FOCUSOUT + NS, that._focusout.bind(that))\n                        .on(PASTE + NS, that._paste.bind(that))\n                        .on(MOUSEDOWN + NS, that._mouseDown.bind(that))\n                        .on(MOUSEUP + NS, that._mouseUp.bind(that));\n\n                that.wrapper.on(CLICK + NS, \".k-input-button\", that._click.bind(that));\n            },\n\n            _mouseDown: function() {\n                this._mouseOnInput = true;\n            },\n\n            _mouseUp: function() {\n                var selection = caret(this._maskedInput[0]);\n                var value = this._maskedInput[0].value;\n                if (selection[0] === selection[1]) {\n                    this._selectNearestSection(selection[1] == value.length ? value.length - 1 : selection[1]);\n                }\n            },\n\n            _triggerChange: function() {\n                if ((this._lastValue == undefined$1 && this._value) || this._lastValue != this._value) {\n                    this._lastValue = this._value;\n                    this.trigger(CHANGE);\n                }\n            },\n\n            _focusout: function() {\n                this._updateValueFromInput();\n                this._triggerChange();\n\n                this._canUpdateLast = true;\n                this.wrapper.removeClass(FOCUSED);\n            },\n\n            _focus: function() {\n                var that = this;\n                if (!that._mouseOnInput) {\n                    setTimeout(function() {\n                        that._selectNearestSection(0);\n                    }, 10);\n                }\n                that._mouseOnInput = false;\n                that.wrapper.addClass(FOCUSED);\n            },\n\n            _selectNearestSection: function(index) {\n                var part;\n\n                for (var i = 0; i < this._maskParts.length; i++ ) {\n                    part = this._maskParts[i];\n                    if (index >= part.start && index <= part.end) {\n                        caret(this._maskedInput[0], part.numberStart, part.numberEnd);\n                    }\n                }\n            },\n\n            _getPartValue: function(value, index) {\n                var that = this;\n                var separator = that.options.separator;\n                var startSeparator = value.indexOf(separator,index);\n                var lastSeparator = value.lastIndexOf(separator,index);\n                return value.substring(lastSeparator < 0 ? 0 : lastSeparator + 1 , startSeparator < 0 ? value.length : startSeparator );\n            },\n\n            _getEmptyPart: function(index) {\n                return this._getPartValue(this._emtpyMask, index);\n            },\n\n            _fillParts: function(clipNumber) {\n                var parts = this._emtpyMask.split(this.options.separator);\n                var symbols;\n                clipNumber = clipNumber + \"\";\n\n                for (var i = 0; i < parts.length; i++) {\n                    symbols = parts[i].match(/_/g).length;\n                    if (symbols > clipNumber.length) {\n                        parts[i] = parts[i].replace(MASKCHAR.repeat(symbols), \"0\".repeat(symbols - clipNumber.length) + clipNumber);\n                    } else {\n                        parts[i] = parts[i].replace(MASKCHAR.repeat(symbols), clipNumber.substring(0, symbols));\n                        clipNumber = clipNumber.substring(symbols, symbols.length);\n                    }\n                }\n                return parts.join(this.options.separator);\n            },\n\n            _clearParts: function(value, start, end) {\n                var parts = value.split(this.options.separator);\n                var index = 0;\n                var endBoundary;\n\n                for (var i = 0; i < parts.length; i++) {\n                    endBoundary = index + parts[i].length;\n                    if ((index <= start && endBoundary >= start) || (index <= end && endBoundary >= end)) {\n                        parts[i] = this._getEmptyPart(index);\n                    }\n                    index += (parts[i].length + 1);\n                }\n                return parts.join(this.options.separator);\n            },\n\n            _updatePart: function(oldValue, entered) {\n                var emrtyPart = this._getEmptyPart(this._old.indexOf(oldValue));\n                var current = oldValue.substring(emrtyPart.indexOf(MASKCHAR), emrtyPart.lastIndexOf(MASKCHAR) + 1);\n                var format = \"{0:\" + \"0\".repeat(current.length) + \"}\";\n\n                if (current.indexOf(MASKCHAR) >= 0 || !(oldValue[oldValue.search(/[0-9]/)] === \"0\") || entered.length > 1) {\n                    return oldValue.replace(current, kendo.format(format, parseInt(entered)));\n                } else {\n                    return oldValue.replace(current, kendo.format(format, parseInt(current + entered)));\n                }\n            },\n\n            _replacePart: function(oldValue, newPart, index) {\n                return oldValue.replace(this._getPartValue(oldValue, index), newPart);\n            },\n\n            _click: function() {\n                var that = this;\n\n                if (!that._timeSelector) {\n                    return;\n                }\n\n                that._timeSelector.toggle();\n            },\n\n            _switchPart: function(options) {\n                var separator = this.options.separator;\n                var selection = options.caret != undefined$1 ? options.caret : caret(this._maskedInput[0])[0];\n                var value = this._maskedInput.val();\n                var index;\n\n                if (options.next) {\n                    index = value.indexOf(separator, selection);\n                    if (index < 0) {\n                        index = value.length - 1;\n                    } else {\n                        index++;\n                    }\n                } else {\n                    index = value.lastIndexOf(separator, selection);\n                    if (index < 0 ) {\n                        index = 0;\n                    } else {\n                        index--;\n                    }\n                }\n                this._selectNearestSection(index);\n            },\n\n            _keydown: function(e) {\n                var key = e.keyCode;\n                var separator = this.options.separator;\n                var selection;\n                var value;\n                var index;\n                var future;\n                var past;\n\n                this._backward = key === keys.BACKSPACE;\n                if (key == keys.LEFT || key == keys.RIGHT) {\n                    e.preventDefault();\n                    selection = caret(this._maskedInput[0])[0];\n                    value = this._maskedInput.val();\n                    future = value.indexOf(separator, selection);\n                    past = value.lastIndexOf(separator, selection);\n\n                    if ((future < 0 && key == keys.RIGHT) || (past < 0 && key == keys.LEFT)) {\n                        return;\n                    }\n\n                    index = (key == keys.LEFT) ? (past - 1) : (future + 1);\n                    this._selectNearestSection(index);\n                    if (key == keys.LEFT) {\n                        this._canUpdateLast = true;\n                    }\n                } else if (this._timeSelector.popup.visible()) {\n                    this._timeSelector._scrollerKeyDownHandler(e);\n                } else if (key == keys.UP || key == keys.DOWN) {\n                    e.preventDefault();\n                    if (e.altKey) {\n                        this._timeSelector.toggle();\n                    }\n                } else if (key == keys.ENTER) {\n                    this._updateValueFromInput();\n                    this._triggerChange();\n                }\n            },\n\n            _updateValueFromTimeSelector: function() {\n                var that = this;\n                var valueParts = getTimeParts(that._value);\n                var value = \"\";\n                var column = this._columns[i];\n                var part;\n                var partValue;\n                var masksToAdd;\n\n                for (var i = 0; i < this._columns.length; i++) {\n                    column = this._columns[i];\n                    partValue = valueParts[column.name] + '';\n                    part = this._maskParts[i];\n\n                    if (i) {\n                        value += that.options.separator;\n                    }\n\n                    if (!valueParts[column.name]) {\n                        value += part.mask;\n                        continue;\n                    }\n\n                    masksToAdd = part.symbolsLength - partValue.length;\n                    value += part.mask.replace(MASKCHAR.repeat(part.symbolsLength), \"0\".repeat(masksToAdd < 0 ? 0 : masksToAdd) + partValue);\n                }\n\n                that._maskedInput.val(value);\n                that._old = value;\n            },\n\n            _validation: function() {\n                var that = this;\n                var element = that.element;\n\n                that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n            },\n\n            _addInvalidState: function() {\n                this.wrapper.addClass(STATEINVALID);\n                this._validationIcon.removeClass('k-hidden');\n            },\n\n            _removeInvalidState: function() {\n                this.wrapper.removeClass(STATEINVALID);\n                this._validationIcon.addClass('k-hidden');\n            },\n\n            _updateValueFromInput: function() {\n                var val = this._maskedInput.val();\n                var values = {};\n                var valid = true;\n                var column;\n                var part;\n                var colValue;\n\n                for (var i = 0; i < this._columns.length; i++) {\n                    column = this._columns[i];\n                    part = this._maskParts[i];\n                    colValue = val.substring(part.numberStart, part.numberEnd).replace(/_/g, \"\");\n                    colValue = kendo.parseInt(colValue || 0);\n\n                    if (colValue >= column.min && colValue <= column.max) {\n                        values[column.name] = colValue;\n                    } else {\n                        valid = false;\n                        break;\n                    }\n                }\n\n                if (valid) {\n                    this._value = convertToMsec(values);\n                    this.element.val(this._value || \"\");\n                    this._timeSelector._value = this._value;\n                    this._removeInvalidState();\n                } else {\n                    this._addInvalidState();\n                }\n            },\n\n            _paste: function(e) {\n                this._isPasted = true;\n                this._pasted = (e.clipboardData || e.originalEvent.clipboardData).getData('Text');\n                var emptyPart;\n\n                var selection = caret(this._maskedInput);\n\n                if (this._maskedInput.val().length == selection[1] && !selection[0]) {\n                    this._replaceEntire = true;\n                } else {\n                    emptyPart = this._getEmptyPart(selection[0]);\n                    this._pasted = this._pasted.substring(0, emptyPart.match(/_/g).length);\n                }\n            },\n\n            _inputHandler: function() {\n                if (kendo._activeElement() !== this._maskedInput[0]) {\n                    return;\n                }\n\n                var that = this;\n                var old = that._old;\n                var separator = that.options.separator;\n                var value = that._maskedInput[0].value;\n                var selection = caret(that._maskedInput)[0];\n                var lengthDiff = old.length - value.length;\n                var entered;\n                var validEntry;\n                var updatedPart;\n                var endSubstring;\n                var startSubstring;\n                var deletedPart;\n                var emptyPart;\n                var canUpdate;\n                var restored;\n                var oldpartValue;\n                var nextSeparator;\n\n                entered = that._isPasted ? that._pasted : value.substring(selection - 1, selection);\n                validEntry = /\\d/.test(entered);\n\n                if (that._isPasted && that._replaceEntire && validEntry) {\n                    that._old = that._fillParts(parseInt(entered));\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(0);\n                    that._isPasted = that._replaceEntire = false;\n                    return;\n                }\n\n                if (that._isPasted) {\n                    lengthDiff = 0;\n                }\n\n                that._isPasted = false;\n\n                if ((entered === separator && !that._backward)) {\n                    that._maskedInput.val(that._old);\n                    that._switchPart({ caret: selection, next: true });\n                    return;\n                }\n\n                if (!value && that._backward) {\n                    that._old = that._emtpyMask;\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(selection);\n                    return;\n                }\n\n                if ((!validEntry && !that._backward)) {\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(selection);\n                    return;\n                }\n\n                if (!lengthDiff || lengthDiff > 0) {\n                    endSubstring = value.substring(selection, value.length);\n                    startSubstring = value.substring(0, selection);\n                    deletedPart = that._emtpyMask.substring(startSubstring.length, old.indexOf(endSubstring));\n\n                    restored = startSubstring + deletedPart + endSubstring;\n                    oldpartValue = that._getPartValue(that._old, selection);\n                    nextSeparator = that._old.indexOf(separator, that._old.indexOf(oldpartValue) + 1);\n\n                    if (that._backward) {\n                        // if multiple parts\n                        if (deletedPart.split(separator).length > 1) {\n                            that._old = this._clearParts(restored, selection, selection + deletedPart.length);\n                        } else {\n                            emptyPart = this._getEmptyPart(selection);\n                            if (emptyPart == oldpartValue) {\n                                that._maskedInput.val(that._old);\n                                that._switchPart({ caret: selection });\n                                return;\n                            }\n                            that._old = that._replacePart(restored, emptyPart, selection);\n                        }\n                        that._maskedInput.val(that._old);\n                        that._selectNearestSection(selection);\n                        return;\n                    }\n\n                    if (nextSeparator < 0 && oldpartValue.indexOf(MASKCHAR) === -1 && !that._canUpdateLast) {\n                        that._maskedInput.val(that._old);\n                        that._selectNearestSection(selection);\n                        return;\n                    }\n\n                    if (validEntry) {\n                        updatedPart = that._updatePart(oldpartValue, entered);\n                        canUpdate = updatedPart[updatedPart.search(/[0-9]/)] === \"0\";\n                        restored = that._replacePart(restored, updatedPart, selection);\n                        that._maskedInput.val(restored);\n                        if (nextSeparator > 0 && !canUpdate) {\n                            that._selectNearestSection(nextSeparator + 1, true);\n                        } else {\n                            that._selectNearestSection(selection);\n                        }\n\n                        that._canUpdateLast = !(nextSeparator < 0 && !canUpdate);\n                    }\n                    that._old = restored;\n                } else if (lengthDiff < 0) {\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(that._old.length - 1);\n                }\n            },\n\n        });\n\n        kendo.cssProperties.registerPrefix(\"TimeDurationPicker\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"TimeDurationPicker\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        ui.plugin(TimeDurationPicker);\n\n    })(window.kendo.jQuery);\n\n}));\n"]}