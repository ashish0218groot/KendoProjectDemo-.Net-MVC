{"version":3,"file":"kendo.dataviz.diagram.min.js","names":["factory","define","amd","$","undefined$1","kendo","window","diagram","dataviz","deepExtend","isArray","Array","Utils","isNearZero","num","Math","abs","isDefined","obj","isUndefined","isObject","Object","has","key","hasOwnProperty","call","isString","prototype","toString","isBoolean","isType","type","isNumber","isNaN","parseFloat","isFinite","isEmpty","length","simpleExtend","destination","source","name","initArray","size","value","array","i","serializePoints","points","res","p","push","x","y","join","deserializePoints","s","v","split","Point","parseInt","randomInteger","lower","upper","floor","random","DFT","el","func","childNodes","item","this","getMatrixAngle","m","d","atan2","b","PI","getMatrixScaling","sqrt","a","c","sign","number","findAngle","center","end","start","sngXComp","sngYComp","atan","findRadian","forEach","arr","iterator","thisRef","any","predicate","remove","what","ax","indexOf","splice","contains","inArray","fold","list","acc","context","initial","arguments","find","result","index","first","constraint","insert","element","position","all","clear","bisort","sortfunc","sort","n","addRange","range","apply","Easing","pos","cos","Ticker","Class","extend","init","adapters","target","tick","interval","duration","lastTime","handlers","_this","transition","timerDelegate","onTimerEvent","addAdapter","onComplete","handler","removeHandler","grep","h","trigger","caller","onStep","seekTo","to","seekFromTo","from","max","min","Date","getTime","intervalId","setInterval","stop","clearInterval","play","origin","initState","reverse","propagate","update","now","timePassed","movement","ui","Range","step","Infinity","j","k","rangeIntegerScale","jQuery","Point2D","isFunction","map","EPSILON","fn","plus","minus","offset","times","normalize","lengthSquared","middleOf","q","toPolar","useDegrees","factor","halfpi","len","Polar","isOnLine","temp","o1","u1","r1","Rect","inflate","r2","union","height","width","parse","str","xy","slice","PathDefiner","left","right","point","dx","dy","r","x1","y1","x2","y2","top","bottom","topLeft","topRight","bottomLeft","bottomRight","clone","equals","rect","rotatedBounds","angle","rotatedPoints","tl","tr","br","bl","rotate","delimiter","scale","scaleX","scaleY","staicPoint","adornerCenter","thisCenter","delta","scaled","zoom","overlaps","rectBottomRight","Size","intersectLine","start1","end1","start2","end2","isSegment","tangensdiff","Empty","toRect","empty","fromPoints","Intersect","lines","segments","rectWithLine","rects","rect1","rect2","intersect","reverseAngle","RectAlign","container","align","content","alignment","alignValues","toLowerCase","_singleAlign","_align","_left","_center","_right","stretch","_stretch","_top","middle","_middle","_bottom","alignCalc","Matrix","e","f","applyRect","fromSVGMatrix","vm","fromMatrixVector","fromList","translation","unit","rotation","sin","scaling","parts","nums","trim","substr","MatrixVector","fromMatrix","randomId","chars","charAt","round","Geometry","_distanceToLineSquared","d2","pt1","pt2","vx","vy","dot","distanceToLine","distanceToPolyline","minimum","Number","MAX_VALUE","p1","p2","HashTable","_buckets","add","_createGetBucket","get","_bucketExists","set","containsKey","hashId","_hash","hashes","_hashes","hash","bucket","ht","_hashString","_objectHashId","charCodeAt","id","_hashId","Dictionary","Observable","dictionary","_hashTable","entry","Error","forEachValue","forEachKey","keys","Queue","_tail","_head","enqueue","next","dequeue","current","Set","resource","kv","toArray","Node","shape","links","outgoing","incoming","weight","associatedShape","bounds","data","shortForm","isVirtual","isIsolated","isLinkedTo","node","that","link","getComplement","getChildren","children","getParents","parents","copy","balance","owner","adjacentTo","removeLink","hasLinkTo","degree","incidentWith","getLinksWith","getNeighbors","neighbors","Link","connection","sourceFound","targetFound","associatedConnection","getCommonNode","isBridging","v1","v2","getNodes","changeSource","changeTarget","changesNodes","w","oldSource","oldTarget","directTo","createReverseEdge","reversed","Graph","idOrDiagram","nodes","_nodeMap","_root","_hasCachedRelationships","cacheRelationships","forceRebuild","assignLevels","startNode","visited","level","child","root","found","getConnectedComponents","componentIndex","setItemIndices","componentId","_collectConnectedNodes","components","addNodeAndOutgoings","setIds","nodeIndex","nextId","calcBounds","getSpanningTree","tree","remaining","_addNode","levelCount","pop","ni","cn","newLink","addLink","treeLevels","takeRandomNode","excludedNodes","incidenceLessThan","pool","isHealthy","hasNode","sourceOrLink","addExistingLink","foundSource","getNode","addNode","foundTarget","removeAllLinks","hasLink","t","linkOrId","nodeOrId","_removeNode","removeNode","areConnected","n1","n2","layoutRect","newNode","newLinks","saveMapping","save","nodeMap","linkMap","nOriginal","nCopy","linkOriginal","linkCopy","linearize","addIds","depthFirstTraversal","action","foundNode","_dftIterator","breadthFirstTraversal","queue","_stronglyConnectedComponents","excludeSingleItems","indices","lowLinks","connected","stack","component","findCycles","isAcyclic","isSubGraph","other","otherArray","thisArray","makeAcyclic","oneNode","rev","N","intensityCatalog","flowIntensity","catalogEqualIntensity","intensity","sourceStack","targetStack","targets","li","targetLink","unshift","sources","si","sourceLink","ri","ril","u","concat","vertexOrder","kk","reversedEdges","Predefined","EightGraph","Mindmap","ThreeGraph","BinaryTree","levels","createBalancedTree","Linear","Tree","siblingsCount","Forest","trees","createBalancedForest","Workflow","Grid","g","previous","graphString","previousLink","graph","part","lin","_addShape","kendoDiagram","shapeDefaults","radius","fill","undoable","addShape","_addConnection","options","connect","createDiagramFromGraph","doLayout","randomSize","clientWidth","clientHeight","opt","color","gli","sourceShape","targetShape","SpringLayout","layoutGraph","limitToView","shi","news","counter","lastAdded","parent","treeCount","createRandomConnectedGraph","nodeCount","maxIncidence","isTree","poolNode","randomAdditions","randomDiagram","shapeCount","normalVariable","mean","deviation","log","geometry","drawing","defined","util","TRANSPARENT","Markers","none","arrowStart","filledCircle","arrowEnd","START","END","WIDTH","HEIGHT","diffNumericOptions","fields","field","elementOptions","hasChanges","Scale","toMatrix","format","invert","Translation","toMatrixVector","Length","Rotation","ZERO","create","values","CompositeTransform","translate","transform","render","visual","_transform","_renderTransform","rotateMatrix","scaleMatrix","translatePoint","AutoSizeableMixin","_setScale","originWidth","_originWidth","originHeight","_originHeight","_setTranslate","_initSize","autoSize","_measure","_updateSize","_diffNumericOptions","Element","_originSize","visible","drawingContainer","redraw","drawingElement","matrix","_hover","force","_measured","box","_boundingBox","startPoint","rawBBox","VisualBase","normalizeDrawingOptions","stroke","opacity","_fill","getColor","_stroke","show","hover","strokeOptions","dashType","fillOptions","gradient","GradientClass","RadialGradient","LinearGradient","TextBlock","_textColor","_font","_initText","fontSize","fontFamily","Text","text","font","fontOptions","fontStyle","fontWeight","sizeChanged","textOptions","Rectangle","_initPath","_setPosition","_drawPath","Path","closed","sizeOptions","sizeOptionsOrDefault","elements","createSegment","MarkerBase","anchor","createElement","_transformToPath","path","transformCopy","CircleMarker","Circle","positionMarker","targetSegment","ArrowMarker","xDiff","yDiff","_linePoints","deg","endPoint","controlOut","nextSegment","controlIn","prevSegment","MarkerPathMixin","_getPath","MultiPath","paths","_normalizeMarkerOptions","startCap","endCap","_removeMarker","marker","_markers","_createMarkers","_createMarker","markerType","append","_positionMarker","_capMap","_redrawMarker","pathChange","pathOptions","cap","pathCapType","optionsCap","created","_redrawMarkers","Group","_createElements","_setData","multipath","Line","Polyline","_updatePath","_pointsDiffer","currentPoints","differ","Image","_initImage","src","_rect","_childrenChange","_remove","removeAt","toFront","visuals","toBack","_reorderChildren","toIndex","group","drawingChildren","fixedPosition","boundingBox","childBoundingBox","_includeInBBox","clippedBBox","Layout","toDrawingRect","drawingRect","reflow","_initCircle","circleOptions","move","_circle","setRadius","Canvas","surface","Surface","_translate","_viewBox","viewBox","setSize","draw","insertBefore","destroy","clearHtml","drawingOptions","Color","toHex","Segment","Movable","Cursors","arrow","grip","cross","select","south","east","west","north","rowresize","colresize","HIT_TEST_DISTANCE","AUTO","TOP","RIGHT","LEFT","BOTTOM","DRAG_START","DRAG","DRAG_END","ITEMBOUNDSCHANGE","ROTATED","TARGET","HANDLE_NAMES","PositionAdapter","layoutState","froms","tos","subjects","getShapeById","LayoutUndoUnit","initialState","finalState","animate","_initialState","_finalState","title","undo","setState","redo","state","conn","ticker","CompositeUnit","units","undoUnit","ConnectionEditUnit","redoSource","redoTarget","_redoSource","_redoTarget","_undoSource","_undoTarget","_updateConnector","updateModel","ConnectionEditUndoUnit","undoSource","undoTarget","DeleteConnectionUnit","targetConnector","DeleteShapeUnit","TransformUnit","shapes","undoStates","adorner","redoStates","layout","refreshBounds","refresh","AddConnectionUnit","AddShapeUnit","deselect","PanUndoUnit","initialPosition","finalPosition","finalPos","pan","RotateUnit","undoRotates","redoRotates","redoAngle","_angle","_innerBounds","_initialize","ToFrontUnit","items","initialIndices","_toIndex","ToBackUnit","UndoRedoService","bind","events","capacity","begin","composite","cancel","commit","execute","_restart","addCompositeItem","count","EmptyTool","toolService","tryActivate","getCursor","ScrollerTool","tool","friction","support","mobileOS","canvas","scroller","scrollable","kendoMobileScroller","velocityMultiplier","mousewheelScrolling","scroll","_move","movableCanvas","virtualScroll","dimension","makeVirtual","virtualSize","dimensions","disable","meta","pannable","enabled","ctrlKey","noMeta","hoveredItem","hoveredAdorner","_hoveredConnector","enable","args","scrollPos","scrollLeft","scrollTop","_storePan","moveTo","_pan","PointerTool","selectSingle","handle","_hitTest","_resizingAdorner","isDragHandle","connections","undoRedoService","_getCursor","SelectionTool","selectable","multiple","selector","isSelected","selectArea","ConnectionTool","connector","_createConnection","_c","canDrag","connectionHandle","_connectionManipulation","_removeHover","activeConnection","_cachedTouchTarget","cachedTouchTarget","sourceConnector","Shape","getConnector","_syncConnectionChanges","_connectorsAdorner","ConnectionEditTool","isActive","handleName","testKey","toUpperCase","ToolService","tools","activeTool","_updateHoveredItem","_activateTool","_updateCursor","focus","suspendTracking","updateHovered","resumeTracking","keyDown","metaKey","altKey","toRemove","_triggerRemove","_syncChanges","_destroyToolBar","_discardNewConnection","selectAll","cut","paste","wheel","z","zoomRate","zoomOptions","zoomMin","zoomMax","setTool","addToSelection","newConnection","cursor","css","disabledShape","isNew","hit","_visible","selectedConnections","_selectedItems","Connection","_hitTestItems","_hitTestElements","shapeHit","connectionHit","idx","connectors","hitTestShapeConnectors","mainLayer","ConnectionRouterBase","LinearConnectionRouter","hitTest","getBounds","allPoints","PolylineRouter","route","CascadingRouter","SAME_SIDE_DISTANCE_RATIO","routePoints","_connectorPoints","_floatingPoints","_resolvedSourceConnector","_resolvedTargetConnector","sourcePoint","targetPoint","_connectorSides","axis","boundsPoint","secondarySign","_connectorSide","sideDistance","minSide","side","shapeBounds","sides","MAX_NUM","_sameSideDistance","pointX","pointY","sourceConnectorSide","targetConnectorSide","deltaX","deltaY","sameSideDistance","shiftX","shiftY","cascadeStartHorizontal","_startHorizontal","sourceSide","AdornerBase","_adorners","ConnectionEditAdorner","_ts","sp","tp","spVisual","handles","epVisual","_initialSource","_initialTarget","ts","radiusX","radiusY","sourcePointDistance","distanceTo","targetPointDistance","sourceHandle","targetHandle","modelToLayer","ConnectorsAdorner","_refreshHandler","ctr","_clearVisual","ConnectorVisual","_keepCachedTouchTarget","visualChildren","childrenCount","unbind","each","ResizingAdorner","_manipulating","_initSelection","_createHandles","selected","_internalChange","_rotatedHandler","_resizable","editable","resize","_handleOptions","_bounds","handleBounds","handlesCount","_getHandleBounds","_rotationOffset","_startAngle","_rotates","_positions","initialRotates","initialStates","handleOptions","_sp","_cp","_lp","shapeStates","visibleHandles","currentAngle","dragging","newBounds","staticPoint","dtl","dbr","changed","_truncateAngle","_rotating","shouldSnap","thr","_truncateDistance","hitToOppositeSide","_displaceBounds","newCenter","minWidth","minHeight","oldBounds","states","_truncatePositionToGuides","ruler","truncatePositionToGuides","_truncateSizeToGuides","truncateSizeToGuides","snap","snapOptions","snapAngle","snapSize","drag","_diffStates","_syncShapeChanges","rotationThumb","thumb","_rotationThumbBounds","Selector","_ep","_adorn","visualBounds","modelToView","relative","_visualBounds","shiftKey","HyperTree","DEG_TO_RAD","LayoutBase","defaultOptions","subtype","roots","nodeDistance","iterations","horizontalSeparation","verticalSeparation","underneathVerticalTopOffset","underneathHorizontalOffset","underneathVerticalSeparation","grid","offsetX","offsetY","componentSpacingX","componentSpacingY","layerSeparation","layeredIterations","startRadialAngle","endRadialAngle","radialSeparation","radialFirstLevelSeparation","keepComponentsInOneRadialLayout","ignoreContainers","layoutContainerChildren","ignoreInvisible","animateTransitions","gridLayoutComponents","maxWidth","startX","resultLinkSet","resultNodeSet","moveToOffset","boundingRect","currentHeight","currentWidth","deltax","deltay","nodeBounds","newpoints","pt","currentHorizontalOffset","transferOptions","DiagramToHyperTreeAdapter","shapeMap","edges","edgeMap","finalNodes","finalLinks","ignoredConnections","ignoredShapes","hyperMap","hyperTree","finalGraph","convert","_renormalizeShapes","_renormalizeConnections","l","mapConnection","mapShape","getEdge","listToRoot","containerGraph","parentContainer","firstNonIgnorableContainer","isContainer","_isIgnorableItem","isContainerConnection","isDescendantOf","scope","containers","isIgnorableItem","isCollapsed","_isVisible","_isTop","isShapeMapped","leastCommonAncestor","al","xa","xb","_isCollapsed","sink","sourceNode","sinkNode","areConnectedAlready","newEdge","finalNodeSet","LayoutState","initialTemperature","temperature","guessBounds","_expectedBounds","refineStage","_repulsion","_attraction","_shake","rho","alpha","_InverseSquareForce","wn","hn","wm","hm","pow","_SquareForce","distance","squareSize","area","ceil","TreeLayoutProcessor","treeGraph","layoutSwitch","layoutLeft","setChildrenDirection","setChildrenLayout","TreeDirection","measure","Width","arrange","layoutRight","layoutUp","up","layoutDown","down","treeDirection","layoutRadialTree","previousRoot","startAngle","endAngle","maxDepth","calculateAngularWidth","radialLayout","Angle","tipOverTree","startFromLevel","aw","diameter","sectorAngle","sortChildren","basevalue","pl","nl","normalizeAngle","col","deltaTheta","deltaThetaHalf","parentSector","fraction","sorted","childNode","cp","childAngleFraction","setPolarLocation","BoundingRectangle","direction","includeStart","rootDirection","rootLayout","childrenLayout","givenSize","shapeWidth","shapeHeight","AngleToParent","SectorAngle","pp","childrenwidth","selfLocation","single","male","female","leftcount","tipOverTreeStartLevel","TreeLayout","adapter","layoutComponents","getTree","getTreeForRoot","LayeredLayout","_initRuntimeProperties","layer","downstreamLinkCount","upstreamLinkCount","uBaryCenter","dBaryCenter","upstreamPriority","downstreamPriority","gridPosition","_prepare","targetLayer","layerMap","layerCount","shift","sortedNodes","o2","o1layer","o2layer","minLayer","layers","linksTo","_dummify","_optimizeCrossings","_swapPairs","arrangeNodes","_moveThingsAround","_dedummify","setMinDist","minDist","layerIndex","minDistances","getMinDist","dist","i1","i2","placeLeftToRight","leftClasses","leftPos","classNodes","placeLeft","POSITIVE_INFINITY","rightSibling","nodeLeftClass","D","upNodes","downNodes","neighbor","intDiv","placeRightToLeft","rightClasses","rightPos","placeRight","NEGATIVE_INFINITY","leftSibling","nodeRightClass","_getLeftWing","leftWing","computeClasses","_getRightWing","rightWing","wingPair","currentWing","wing","ndsinl","_nodesInLink","vnode","wings","classIndex","_isVerticalLayout","_isHorizontalLayout","_isIncreasingLayout","_gridPositionComparer","dest","currentNode","currDown","downNode","order","placed","sequenceStart","virtualStartIndex","_firstVirtualNode","virtualStart","sequence","_sequencer","virtualEnd","nextVirtualNode","virtualEndIndex","adjustDirections","ctx","fromLayerIndex","layerIncrement","maximumHeight","MIN_VALUE","prevBridge","prevBridgeTarget","nextBridge","nextBridgeTarget","getNeighborOnLayer","clayer","j1","j2","dir","_sequenceSingle","combineSequences","pair","leftHeap","_positionDescendingComparer","rightHeap","_positionAscendingComparer","leftRes","rightRes","leftClass","_getComposite","rightClass","it","layoutLayer","gridPos","iconsidered","considered","n1Priority","n2Priority","nodeGridPos","nodeBaryCenter","calcBaryCenter","nodePriority","moveRight","moveLeft","calcDownData","calcUpData","priority","rightNode","rightNodePriority","leftNode","leftNodePriority","mapVirtualNode","nodeToLinkMap","linkToNodeMap","addLinkBetweenLayers","upLayer","downLayer","o","oLayer","dLayer","oPos","dPos","depthOfDumminess","dedum","prevLink","moves","iter","optimizeLayerCrossings","sum","total","presorted","n1BaryCenter","n2BaryCenter","compareByIndex","compareValue","inode","maxIterations","downwards","secondPass","hasSwapped","calcCrossings","memCrossings","crossBefore","countLinksCrossingBetweenTwoLayers","node1","node2","node1GridPos","node2GridPos","crossAfter","ulayer","dlayer","link1","link2","n11","n12","n21","n22","l1","l2","crossings","n11gp","n12gp","numerator","denominator","graphOrNodes","capture","diagramOrGraphOrNodes","GraphAdapter","geom","Widget","outerWidth","_outerWidth","outerHeight","_outerHeight","HierarchicalDataSource","isPlainObject","math","NS","CASCADING","CHANGE","CLICK","ERROR","MAXINT","SELECT","ITEMROTATE","PAN","ZOOM_START","ZOOM_END","NONE","TRANSFORMED","MOUSEWHEEL_NS","BUTTON_TEMPLATE","ref","className","icon","themeColor","html","renderButton","DefaultConnectors","getPosition","defaultButtons","imageClass","isAutoConnector","closestConnector","resCtr","minimumDistance","indicesOfItems","extra","defaults","DiagramElement","dataItem","_template","serializable","serialize","json","_content","contentOptions","_contentVisual","_updateContentVisual","_createContentVisual","template","elementTemplate","paramName","_canSelect","toJSON","Connector","shapeId","tempStr","updateOptionsFromModel","createShapeVisual","updateBounds","_createConnectors","_setOptionsFromModel","model","modelOptions","filterShapeDataItem","redrawVisual","_isEditable","_redrawVisual","syncChanges","_suspendModelRefresh","_resumeModelRefresh","_rotate","_alignContent","contentVisual","containerRect","aligner","contentBounds","bbox","contentRect","alignedBounds","connectorDefaults","_transformedBounds","_rotatedBounds","_setBounds","_triggerBoundsChange","_layouting","refreshConnections","cloneDataItem","deselected","_internalSelection","_selectionChanged","deltaAngle","newPosition","sc","con","cons","nameOrPoint","toLocaleLowerCase","fnName","_transformPoint","boundsChange","shapeOptions","shapeVisual","_visualOptions","_updateConnectors","_showConnectors","rotatedPoint","visualOptions","visualTemplate","_initRouter","_sourcePoint","_targetPoint","_setSource","_setTarget","definers","fromConnector","toConnector","dataMap","_dataMap","fromX","fromY","toX","toY","filterConnectionDataItem","connectionsDataSource","getByUid","uid","clearField","shapeSource","defaultConnector","_removeFromSourceConnector","_clearSourceConnector","_setFromOptions","fromPoint","sourceDefiner","_sourceDefiner","shapeTarget","_removeFromTargetConnector","_clearTargetConnector","_setToOptions","toPoint","targetDefiner","_targetDefiner","instance","connectorName","setNewTarget","inactiveItem","_inactiveShapeItems","_deferredConnectionUpdates","onActivate","endIdx","startIdx","alignToPath","midIdx","selection","_router","pts","definition","_resolveConnectors","_refreshPath","sourceConnectors","targetConnectors","_resolveAutoConnectors","minNonConflictSource","minNonConflictTarget","minSource","minTarget","sourceIdx","targetIdx","minNonConflict","_testRoutePoints","router","passRoute","exclude","_getRouteExclude","_shapesQuadTree","hitTestRect","_isPointInsideShape","boundsX","boundsY","Diagram","userOptions","_initTheme","_initElements","_extendLayoutOptions","_initDefaults","_interactionDefaults","_initCanvas","ShapesQuadTree","adornerLayer","_createHandlers","_clipboard","pauseMouseHandlers","_fetchFreshData","_createGlobalToolBar","_createOptionElements","theme","dataSource","draggable","autoBind","tooltip","connectionDefaults","toolBar","DiagramToolBar","click","_toolBarClick","modal","textAlign","prepend","_resize","createShape","editor","view","createModel","_createShape","edit","createConnection","_connectionsDataMap","addConnection","editModel","editorType","editors","cancelEdit","shapeEditors","shapeTemplate","connectionSelectorHandler","connectionSelector","connectionEditors","connectionTemplate","PopupEditor","_update","_cancel","_editArgs","_getEditDataSource","cancelChanges","_destroyEditor","saveEdit","sync","wrapper","close","attr","addClass","appendTo","userShapeDefaults","copyDefaultOptions","mobile","canvasContainer","viewPort","viewport","on","_wheel","_keydown","_userEvents","UserEvents","multiTouch","fastTap","tap","_tap","_dragStart","_drag","_dragEnd","gesturestart","_gestureStart","gesturechange","_gestureChange","gestureend","_gestureEnd","doubleTap","_doubleTap","supportDoubleTap","_mouseover","_mouseout","_mouseMove","_mouseDown","_mouseUp","_syncHandler","_resizeHandler","onResize","_pauseMouseHandlers","_eventPositions","event","_meta","preventDefault","_createToolBar","focused","ctrlPressed","keyCode","origEvent","originalEvent","wheelDelta","detail","mwDelta","touch","pageX","pageY","documentToModel","initialCenter","eventArgs","_gesture","_initialCenter","previousGesture","documentToView","scaleDelta","_zoom","updateZoom","_getValidZoom","zoomedPoint","_panTransform","_updateAdorners","pointPosition","_kendoNode","srcElement","themeOptions","themeName","themes","SASS_THEMES","autoTheme","shapesLength","_createShapes","_createConnections","_findConnectionTarget","unbindResize","off","destroyScroller","_destroyGlobalToolBar","is","_activeElement","scrollContainer","offsets","documentElement","document","parentNode","scrollHeight","load","setOptions","added","removed","_parseBounds","splitDiagramElements","_removeItem","_removeShapeDataItem","_removeConnectionDataItem","_getDiagramItems","_fixOrdering","bringIntoView","original","newPan","_zoomMainLayer","alignShapes","val","raw","hideTooltip","_getPan","animatedScrollTo","scrollTo","_copyOffset","copied","mapping","_updateCopiedConnection","sourceConnection","di","_containerOffset","containerOffset","viewToDocument","viewToModel","_transformWithMatrix","_matrixInvert","_matrix","_layerMatrix","layerToModel","_layerMatrixInvert","viewPoint","modelToDocument","setDataSource","_dataSource","fetch","setConnectionsDataSource","_connectionDataSource","_redrawConnections","getShapeByModelId","getShapeByModelUid","getConnectionByModelId","getConnectionByModelUid","_transformMainLayer","_finishPan","NaN","_storeViewMatrix","_storeLayerMatrix","canvasTransform","shapePos","conPos","removedConnections","_removeShape","_removeConnection","_removeDataItems","recursive","_removeShapeConnections","hasChildren","loaded","_addDataItem","_addDataItemByUid","_addDataItems","parentShape","_refreshSource","dataBound","_bindingRoots","_addItem","preventClosing","singleToolBar","popupZIndex","closest","popupWidth","_popup","popupHeight","connectionBounds","showAt","one","_normalizePointZoom","InactiveItemsCollection","undone","redone","_loadingShapes","_loadingConnections","dsOptions","ds","_shapesRefreshHandler","_shapesRequestStartHandler","_shapesErrorHandler","_refreshShapes","_shapesRequestStart","_error","DataSource","_treeDataSource","_connectionsRefreshHandler","_connectionsRequestStartHandler","_connectionsErrorHandler","_refreshConnections","_connectionsRequestStart","_connectionsError","_shouldRefresh","_removeShapes","_updateShapes","_syncShapes","_suspended","_rebindShapesAndConnections","_addShapes","_addConnections","inactiveItems","activate","dataItems","_removeConnections","_updateConnections","_addConnectionDataItem","_validateConnector","_unbindDataSource","_errorHandler","adorners","_refresh","hide","exportDOMVisual","scrollOffset","viewRect","clipPath","fromRect","wrap","clipWrap","clip","exportVisual","when","then","deferredConnectionUpdates","ExportMixin","PDFMixin","_tools","createToolBar","createTools","appendTools","createPopup","kendoPopup","getKendoPopup","buttons","_toolBar","kendoToolBar","resizable","getKendoToolBar","createTool","toolName","attributes","_setAttributes","open","newGroup","editTool","showText","deleteTool","rotateAnticlockwiseTool","_appendGroup","_rotateGroup","rotateClockwiseTool","createShapeTool","_createGroup","createConnectionTool","undoTool","_historyGroup","redoTool","prop","_getAttributes","eventData","selectedElements","delete","selectedElemens","rotateClockwise","rotateAnticlockwise","Editor","_getFields","_initContainer","createEditable","Editable","clearContainer","modelFields","columns","formContent","_renderTemplate","_renderFields","_renderButtons","Window","userTriggered","sender","_cancelClick","_attachButtonEvents","unescape","form","_createButton","_cancelClickHandler","_updateClickHandler","_updateClick","_editUpdateClickHandler","reader","textField","idField","kendoDropDownList","dataValueField","dataTextField","optionLabel","valuePrimitive","InactiveItem","callbacks","callback","deffered","Deferred","deferred","resolve","QuadRoot","_add","_quadNode","_testRect","QuadNode","inBounds","nodeRect","nodeBottomRight","overlapsBounds","inserted","_initChildren","childIdx","shapeIdx","halfWidth","halfHeight","ROOT_SIZE","boundsChangeHandler","_boundsChange","initRoots","rootMap","rootSize","sectors","getSectors","inRoot","bottomX","bottomY","xIdx","yIdx","Model","_defaultId","ObservableObject","mainOptions","plugin"],"sources":["kendo.dataviz.diagram.js"],"mappings":"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","sourcesContent":["(function (factory) {\n    typeof define === 'function' && define.amd ? define(['kendo.data', 'kendo.draganddrop', 'kendo.userevents', 'kendo.mobile.scroller', 'kendo.drawing', 'kendo.core', 'kendo.dataviz.core', 'kendo.toolbar', 'kendo.editable', 'kendo.window', 'kendo.dropdownlist', 'kendo.dataviz.themes', 'kendo.html.button'], factory) :\n    factory();\n})((function () {\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram = {},\n            deepExtend = kendo.deepExtend,\n            isArray = Array.isArray,\n            EPSILON = 1e-06;\n\n        /*-------------------Diverse utilities----------------------------*/\n        var Utils = {\n        };\n\n        deepExtend(Utils, {\n            isNearZero: function(num) {\n                return Math.abs(num) < EPSILON;\n            },\n            isDefined: function(obj) {\n                return typeof obj !== 'undefined';\n            },\n\n            isUndefined: function(obj) {\n                return (typeof obj === 'undefined') || obj === null;\n            },\n            /**\n             * Returns whether the given object is an object or a value.\n             */\n            isObject: function(obj) {\n                return obj === Object(obj);\n            },\n            /**\n             * Returns whether the object has a property with the given name.\n             */\n            has: function(obj, key) {\n                return Object.hasOwnProperty.call(obj, key);\n            },\n            /**\n             * Returns whether the given object is a string.\n             */\n            isString: function(obj) {\n                return Object.prototype.toString.call(obj) == '[object String]';\n            },\n            isBoolean: function(obj) {\n                return Object.prototype.toString.call(obj) == '[object Boolean]';\n            },\n            isType: function(obj, type) {\n                return Object.prototype.toString.call(obj) == '[object ' + type + ']';\n            },\n            /**\n             * Returns whether the given object is a number.\n             */\n            isNumber: function(obj) {\n                return !isNaN(parseFloat(obj)) && isFinite(obj);\n            },\n            /**\n             * Return whether the given object (array or dictionary).\n             */\n            isEmpty: function(obj) {\n                if (obj === null) {\n                    return true;\n                }\n                if (isArray(obj) || Utils.isString(obj)) {\n                    return obj.length === 0;\n                }\n                for (var key in obj) {\n                    if (Utils.has(obj, key)) {\n                        return false;\n                    }\n                }\n                return true;\n            },\n            simpleExtend: function(destination, source) {\n                if (!Utils.isObject(source)) {\n                    return;\n                }\n\n                for (var name in source) {\n                    destination[name] = source[name];\n                }\n            },\n            /**\n             * Returns an array of the specified size and with each entry set to the given value.\n             * @param size\n             * @param value\n             * @returns {Array}\n             */\n            initArray: function createIdArray(size, value) {\n                var array = [];\n                for (var i = 0; i < size; ++i) {\n                    array[i] = value;\n                }\n                return array;\n            },\n            serializePoints: function(points) {\n                var res = [];\n                for (var i = 0; i < points.length; i++) {\n                    var p = points[i];\n                    res.push(p.x + \";\" + p.y);\n                }\n                return res.join(\";\");\n            },\n            deserializePoints: function(s) {\n                var v = s.split(\";\"), points = [];\n                if (v.length % 2 !== 0) {\n                    throw \"Not an array of points.\";\n                }\n                for (var i = 0; i < v.length; i += 2) {\n                    points.push(new diagram.Point(\n                        parseInt(v[i], 10),\n                        parseInt(v[i + 1], 10)\n                    ));\n                }\n                return points;\n            },\n            /**\n             * Returns an integer within the given bounds.\n             * @param lower The inclusive lower bound.\n             * @param upper The exclusive upper bound.\n             * @returns {number}\n             */\n            randomInteger: function(lower, upper) {\n                return parseInt(Math.floor(Math.random() * upper) + lower, 10);\n            } ,\n            /*\n             Depth-first traversal of the given node.\n             */\n            DFT: function(el, func) {\n                func(el);\n                if (el.childNodes) {\n                    for (var i = 0; i < el.childNodes.length; i++) {\n                        var item = el.childNodes[i];\n                        this.DFT(item, func);\n                    }\n                }\n            },\n            /*\n             Returns the angle in degrees for the given matrix\n             */\n            getMatrixAngle: function(m) {\n                if (m === null || m.d === 0) {\n                    return 0;\n                }\n                return Math.atan2(m.b, m.d) * 180 / Math.PI;\n            },\n\n            /*\n             Returns the scaling factors for the given matrix.\n             */\n            getMatrixScaling: function(m) {\n                var sX = Math.sqrt(m.a * m.a + m.c * m.c);\n                var sY = Math.sqrt(m.b * m.b + m.d * m.d);\n                return [sX, sY];\n            }\n\n        });\n\n        /**\n         * The Range defines an array of equally separated numbers.\n         * @param start The start-value of the Range.\n         * @param stop The end-value of the Range.\n         * @param step The separation between the values (default:1).\n         * @returns {Array}\n         */\n        function Range(start, stop, step) {\n            if (typeof start == 'undefined' || typeof stop == 'undefined') {\n                return [];\n            }\n            if (step && Utils.sign(stop - start) != Utils.sign(step)) {\n                throw \"The sign of the increment should allow to reach the stop-value.\";\n            }\n            step = step || 1;\n            start = start || 0;\n            stop = stop || start;\n            if ((stop - start) / step === Infinity) {\n                throw \"Infinite range defined.\";\n            }\n            var range = [], i = -1, j;\n\n            function rangeIntegerScale(x) {\n                var k = 1;\n                while (x * k % 1) {\n                    k *= 10;\n                }\n                return k;\n            }\n\n            var k = rangeIntegerScale(Math.abs(step));\n            start *= k;\n            stop *= k;\n            step *= k;\n            if (start > stop && step > 0) {\n                step = -step;\n            }\n            if (step < 0) {\n                while ((j = start + step * ++i) >= stop) {\n                    range.push(j / k);\n                }\n            }\n            else {\n                while ((j = start + step * ++i) <= stop) {\n                    range.push(j / k);\n                }\n            }\n            return range;\n        }\n\n        /*-------------------Diverse math functions----------------------------*/\n\n        function findRadian(start, end) {\n            if (start == end) {\n                return 0;\n            }\n            var sngXComp = end.x - start.x,\n                sngYComp = start.y - end.y,\n                atan = Math.atan(sngXComp / sngYComp);\n            if (sngYComp >= 0) {\n                return sngXComp < 0 ? atan + (2 * Math.PI) : atan;\n            }\n            return atan + Math.PI;\n        }\n\n        Utils.sign = function(number) {\n            return number ? number < 0 ? -1 : 1 : 0;\n        };\n\n        Utils.findAngle = function(center, end) {\n            return findRadian(center, end) * 180 / Math.PI;\n        };\n\n        /*-------------------Array Helpers ----------------------------*/\n\n        Utils.forEach = function(arr, iterator, thisRef) {\n            for (var i = 0; i < arr.length; i++) {\n                iterator.call(thisRef, arr[i], i, arr);\n            }\n        };\n\n        Utils.any = function(arr, predicate) {\n            for (var i = 0; i < arr.length; ++i) {\n                if (predicate(arr[i])) {\n                    return arr[i];\n                }\n            }\n            return null;\n        };\n\n        Utils.remove = function(arr, what) {\n            var ax;\n            while ((ax = Utils.indexOf(arr, what)) !== -1) {\n                arr.splice(ax, 1);\n            }\n            return arr;\n        };\n\n        Utils.contains = function(arr, obj) {\n            return Utils.indexOf(arr, obj) !== -1;\n        };\n\n        Utils.indexOf = function(arr, what) {\n            return $.inArray(what, arr);\n        };\n\n        Utils.fold = function(list, iterator, acc, context) {\n            var initial = arguments.length > 2;\n\n            for (var i = 0; i < list.length; i++) {\n                var value = list[i];\n                if (!initial) {\n                    acc = value;\n                    initial = true;\n                }\n                else {\n                    acc = iterator.call(context, acc, value, i, list);\n                }\n            }\n\n            if (!initial) {\n                throw 'Reduce of empty array with no initial value';\n            }\n\n            return acc;\n        };\n\n        Utils.find = function(arr, iterator, context) {\n            var result;\n            Utils.any(arr, function(value, index, list) {\n                if (iterator.call(context, value, index, list)) {\n                    result = value;\n                    return true;\n                }\n                return false;\n            });\n            return result;\n        };\n\n        Utils.first = function(arr, constraint, context) {\n            if (arr.length === 0) {\n                return null;\n            }\n            if (Utils.isUndefined(constraint)) {\n                return arr[0];\n            }\n\n            return Utils.find(arr, constraint, context);\n        };\n\n        /**\n         * Inserts the given element at the specified position and returns the result.\n         */\n        Utils.insert = function(arr, element, position) {\n            arr.splice(position, 0, element);\n            return arr;\n        };\n\n        Utils.all = function(arr, iterator, context) {\n            var result = true;\n            var value;\n\n            for (var i = 0; i < arr.length; i++) {\n                value = arr[i];\n                result = result && iterator.call(context, value, i, arr);\n\n                if (!result) {\n                    break;\n                }\n            }\n\n            return result;\n        };\n\n        Utils.clear = function(arr) {\n            arr.splice(0, arr.length);\n        };\n\n        /**\n         * Sort the arrays on the basis of the first one (considered as keys and the other array as values).\n         * @param a\n         * @param b\n         * @param sortfunc (optiona) sorting function for the values in the first array\n         */\n        Utils.bisort = function(a, b, sortfunc) {\n            if (Utils.isUndefined(a)) {\n                throw \"First array is not specified.\";\n            }\n            if (Utils.isUndefined(b)) {\n                throw \"Second array is not specified.\";\n            }\n            if (a.length != b.length) {\n                throw \"The two arrays should have equal length\";\n            }\n\n            var all = [], i;\n\n            for (i = 0; i < a.length; i++) {\n                all.push({ 'x': a[i], 'y': b[i] });\n            }\n            if (Utils.isUndefined(sortfunc)) {\n                all.sort(function(m, n) {\n                    return m.x - n.x;\n                });\n            }\n            else {\n                all.sort(function(m, n) {\n                    return sortfunc(m.x, n.x);\n                });\n            }\n\n            Utils.clear(a);\n            Utils.clear(b);\n\n            for (i = 0; i < all.length; i++) {\n                a.push(all[i].x);\n                b.push(all[i].y);\n            }\n        };\n\n        Utils.addRange = function(arr, range) {\n            arr.push.apply(arr, range);\n        };\n\n        var Easing = {\n            easeInOut: function(pos) {\n                return ((-Math.cos(pos * Math.PI) / 2) + 0.5);\n            }\n        };\n\n        /**\n         * An animation ticker driving an adapter which sets a particular\n         * property in function of the tick.\n         * @type {*}\n         */\n        var Ticker = kendo.Class.extend({\n            init: function() {\n                this.adapters = [];\n                this.target = 0;\n                this.tick = 0;\n                this.interval = 20;\n                this.duration = 800;\n                this.lastTime = null;\n                this.handlers = [];\n                var _this = this;\n                this.transition = Easing.easeInOut;\n                this.timerDelegate = function() {\n                    _this.onTimerEvent();\n                };\n            },\n            addAdapter: function(a) {\n                this.adapters.push(a);\n            },\n            onComplete: function(handler) {\n                this.handlers.push(handler);\n            },\n            removeHandler: function(handler) {\n                this.handlers = $.grep(this.handlers, function(h) {\n                    return h !== handler;\n                });\n            },\n            trigger: function() {\n                var _this = this;\n                if (this.handlers) {\n                    Utils.forEach(this.handlers, function(h) {\n                        return h.call(_this.caller !== null ? _this.caller : _this);\n                    });\n                }\n            },\n            onStep: function() {\n            },\n            seekTo: function(to) {\n                this.seekFromTo(this.tick, to);\n            },\n            seekFromTo: function(from, to) {\n                this.target = Math.max(0, Math.min(1, to));\n                this.tick = Math.max(0, Math.min(1, from));\n                this.lastTime = new Date().getTime();\n                if (!this.intervalId) {\n                    this.intervalId = window.setInterval(this.timerDelegate, this.interval);\n                }\n            },\n            stop: function() {\n                if (this.intervalId) {\n                    window.clearInterval(this.intervalId);\n                    this.intervalId = null;\n\n                    //this.trigger.call(this);\n                    this.trigger();\n                    // this.next();\n                }\n            },\n            play: function(origin) {\n                if (this.adapters.length === 0) {\n                    return;\n                }\n                if (origin !== null) {\n                    this.caller = origin;\n                }\n                this.initState();\n                this.seekFromTo(0, 1);\n            },\n            reverse: function() {\n                this.seekFromTo(1, 0);\n            },\n            initState: function() {\n                if (this.adapters.length === 0) {\n                    return;\n                }\n                for (var i = 0; i < this.adapters.length; i++) {\n                    this.adapters[i].initState();\n                }\n            },\n            propagate: function() {\n                var value = this.transition(this.tick);\n\n                for (var i = 0; i < this.adapters.length; i++) {\n                    this.adapters[i].update(value);\n                }\n            },\n            onTimerEvent: function() {\n                var now = new Date().getTime();\n                var timePassed = now - this.lastTime;\n                this.lastTime = now;\n                var movement = (timePassed / this.duration) * (this.tick < this.target ? 1 : -1);\n                if (Math.abs(movement) >= Math.abs(this.tick - this.target)) {\n                    this.tick = this.target;\n                } else {\n                    this.tick += movement;\n                }\n\n                try {\n                    this.propagate();\n                } finally {\n                    this.onStep.call(this);\n                    if (this.target == this.tick) {\n                        this.stop();\n                    }\n                }\n            }\n        });\n\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n\n            Utils: Utils,\n            Range: Range,\n            Ticker: Ticker\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        // Imports ================================================================\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram,\n            Class = kendo.Class,\n            deepExtend = kendo.deepExtend,\n            dataviz = kendo.dataviz,\n            Utils = diagram.Utils,\n            Point = dataviz.Point2D,\n            isFunction = kendo.isFunction,\n            contains = Utils.contains,\n            map = $.map;\n\n        // Constants ==============================================================\n        var HITTESTAREA = 3,\n            EPSILON = 1e-06;\n\n        deepExtend(Point.fn, {\n            plus: function(p) {\n                return new Point(this.x + p.x, this.y + p.y);\n            },\n            minus: function(p) {\n                return new Point(this.x - p.x, this.y - p.y);\n            },\n            offset: function(value) {\n                return new Point(this.x - value, this.y - value);\n            },\n            times: function(s) {\n                return new Point(this.x * s, this.y * s);\n            },\n            normalize: function() {\n                if (this.length() === 0) {\n                    return new Point();\n                }\n                return this.times(1 / this.length());\n            },\n            length: function() {\n                return Math.sqrt(this.x * this.x + this.y * this.y);\n            },\n            toString: function() {\n                return \"(\" + this.x + \",\" + this.y + \")\";\n            },\n            lengthSquared: function() {\n                return (this.x * this.x + this.y * this.y);\n            },\n            middleOf: function MiddleOf(p, q) {\n                return new Point(q.x - p.x, q.y - p.y).times(0.5).plus(p);\n            },\n            toPolar: function(useDegrees) {\n                var factor = 1;\n                if (useDegrees) {\n                    factor = 180 / Math.PI;\n                }\n                var a = Math.atan2(Math.abs(this.y), Math.abs(this.x));\n                var halfpi = Math.PI / 2;\n                var len = this.length();\n                if (this.x === 0) {\n                    // note that the angle goes down and not the usual mathematical convention\n\n                    if (this.y === 0) {\n                        return new Polar(0, 0);\n                    }\n                    if (this.y > 0) {\n                        return new Polar(len, factor * halfpi);\n                    }\n                    if (this.y < 0) {\n                        return new Polar(len, factor * 3 * halfpi);\n                    }\n                }\n                else if (this.x > 0) {\n                    if (this.y === 0) {\n                        return new Polar(len, 0);\n                    }\n                    if (this.y > 0) {\n                        return new Polar(len, factor * a);\n                    }\n                    if (this.y < 0) {\n                        return new Polar(len, factor * (4 * halfpi - a));\n                    }\n                }\n                else {\n                    if (this.y === 0) {\n                        return new Polar(len, 2 * halfpi);\n                    }\n                    if (this.y > 0) {\n                        return new Polar(len, factor * (2 * halfpi - a));\n                    }\n                    if (this.y < 0) {\n                        return new Polar(len, factor * (2 * halfpi + a));\n                    }\n                }\n            },\n            isOnLine: function(from, to) {\n                if (from.x > to.x) { // from must be the leftmost point\n                    var temp = to;\n                    to = from;\n                    from = temp;\n                }\n                var r1 = new Rect(from.x, from.y).inflate(HITTESTAREA, HITTESTAREA),\n                    r2 = new Rect(to.x, to.y).inflate(HITTESTAREA, HITTESTAREA), o1, u1;\n                if (r1.union(r2).contains(this)) {\n                    if (from.x === to.x || from.y === to.y) {\n                        return true;\n                    }\n                    else if (from.y < to.y) {\n                        o1 = r1.x + (((r2.x - r1.x) * (this.y - (r1.y + r1.height))) / ((r2.y + r2.height) - (r1.y + r1.height)));\n                        u1 = (r1.x + r1.width) + ((((r2.x + r2.width) - (r1.x + r1.width)) * (this.y - r1.y)) / (r2.y - r1.y));\n                    }\n                    else {\n                        o1 = r1.x + (((r2.x - r1.x) * (this.y - r1.y)) / (r2.y - r1.y));\n                        u1 = (r1.x + r1.width) + ((((r2.x + r2.width) - (r1.x + r1.width)) * (this.y - (r1.y + r1.height))) / ((r2.y + r2.height) - (r1.y + r1.height)));\n                    }\n                    return (this.x > o1 && this.x < u1);\n                }\n                return false;\n            }\n        });\n\n        deepExtend(Point, {\n            parse: function(str) {\n                var tempStr = str.slice(1, str.length - 1),\n                    xy = tempStr.split(\",\"),\n                    x = parseInt(xy[0], 10),\n                    y = parseInt(xy[1], 10);\n                if (!isNaN(x) && !isNaN(y)) {\n                    return new Point(x, y);\n                }\n            }\n        });\n\n        /**\n         * Structure combining a Point with two additional points representing the handles or tangents attached to the first point.\n         * If the additional points are null or equal to the first point the path will be sharp.\n         * Left and right correspond to the direction of the underlying path.\n         */\n        var PathDefiner = Class.extend(\n            {\n                init: function(p, left, right) {\n                    this.point = p;\n                    this.left = left;\n                    this.right = right;\n                }\n            }\n        );\n\n        /**\n         * Defines a rectangular region.\n         */\n        var Rect = Class.extend({\n            init: function(x, y, width, height) {\n                this.x = x || 0;\n                this.y = y || 0;\n                this.width = width || 0;\n                this.height = height || 0;\n            },\n            contains: function(point) {\n                return ((point.x >= this.x) && (point.x <= (this.x + this.width)) && (point.y >= this.y) && (point.y <= (this.y + this.height)));\n            },\n            inflate: function(dx, dy) {\n                if (dy === undefined$1) {\n                    dy = dx;\n                }\n\n                this.x -= dx;\n                this.y -= dy;\n                this.width += 2 * dx + 1;\n                this.height += 2 * dy + 1;\n                return this;\n            },\n            offset: function(dx, dy) {\n                var x = dx, y = dy;\n                if (dx instanceof Point) {\n                    x = dx.x;\n                    y = dx.y;\n                }\n                this.x += x;\n                this.y += y;\n                return this;\n            },\n            union: function(r) {\n                var x1 = Math.min(this.x, r.x);\n                var y1 = Math.min(this.y, r.y);\n                var x2 = Math.max((this.x + this.width), (r.x + r.width));\n                var y2 = Math.max((this.y + this.height), (r.y + r.height));\n                return new Rect(x1, y1, x2 - x1, y2 - y1);\n            },\n            center: function() {\n                return new Point(this.x + this.width / 2, this.y + this.height / 2);\n            },\n            top: function() {\n                return new Point(this.x + this.width / 2, this.y);\n            },\n            right: function() {\n                return new Point(this.x + this.width, this.y + this.height / 2);\n            },\n            bottom: function() {\n                return new Point(this.x + this.width / 2, this.y + this.height);\n            },\n            left: function() {\n                return new Point(this.x, this.y + this.height / 2);\n            },\n            topLeft: function() {\n                return new Point(this.x, this.y);\n            },\n            topRight: function() {\n                return new Point(this.x + this.width, this.y);\n            },\n            bottomLeft: function() {\n                return new Point(this.x, this.y + this.height);\n            },\n            bottomRight: function() {\n                return new Point(this.x + this.width, this.y + this.height);\n            },\n            clone: function() {\n                return new Rect(this.x, this.y, this.width, this.height);\n            },\n            isEmpty: function() {\n                return !this.width && !this.height;\n            },\n            equals: function(rect) {\n                return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;\n            },\n            rotatedBounds: function(angle) {\n                var rect = this.clone(),\n                    points = this.rotatedPoints(angle),\n                    tl = points[0],\n                    tr = points[1],\n                    br = points[2],\n                    bl = points[3];\n\n                rect.x = Math.min(br.x, tl.x, tr.x, bl.x);\n                rect.y = Math.min(br.y, tl.y, tr.y, bl.y);\n                rect.width = Math.max(br.x, tl.x, tr.x, bl.x) - rect.x;\n                rect.height = Math.max(br.y, tl.y, tr.y, bl.y) - rect.y;\n\n                return rect;\n            },\n            rotatedPoints: function(angle) {\n                var rect = this,\n                    c = rect.center(),\n                    br = rect.bottomRight().rotate(c, 360 - angle),\n                    tl = rect.topLeft().rotate(c, 360 - angle),\n                    tr = rect.topRight().rotate(c, 360 - angle),\n                    bl = rect.bottomLeft().rotate(c, 360 - angle);\n\n                return [tl, tr, br, bl];\n            },\n            toString: function(delimiter) {\n                delimiter = delimiter || \" \";\n\n                return this.x + delimiter + this.y + delimiter + this.width + delimiter + this.height;\n            },\n            scale: function(scaleX, scaleY, staicPoint, adornerCenter, angle) {\n                var tl = this.topLeft();\n                var thisCenter = this.center();\n                tl.rotate(thisCenter, 360 - angle).rotate(adornerCenter, angle);\n\n                var delta = staicPoint.minus(tl);\n                var scaled = new Point(delta.x * scaleX, delta.y * scaleY);\n                var position = delta.minus(scaled);\n                tl = tl.plus(position);\n                tl.rotate(adornerCenter, 360 - angle).rotate(thisCenter, angle);\n\n                this.x = tl.x;\n                this.y = tl.y;\n\n                this.width *= scaleX;\n                this.height *= scaleY;\n            },\n\n            zoom: function(zoom) {\n                this.x *= zoom;\n                this.y *= zoom;\n                this.width *= zoom;\n                this.height *= zoom;\n                return this;\n            },\n\n            overlaps: function(rect) {\n                var bottomRight = this.bottomRight();\n                var rectBottomRight = rect.bottomRight();\n                var overlaps = !(bottomRight.x < rect.x || bottomRight.y < rect.y ||\n                    rectBottomRight.x < this.x || rectBottomRight.y < this.y);\n                return overlaps;\n            }\n        });\n\n        var Size = Class.extend({\n            init: function(width, height) {\n                this.width = width;\n                this.height = height;\n            }\n        });\n\n        Size.prototype.Empty = new Size(0, 0);\n\n        Rect.toRect = function(rect) {\n            if (!(rect instanceof Rect)) {\n                rect = new Rect(rect.x, rect.y, rect.width, rect.height);\n            }\n\n            return rect;\n        };\n\n        Rect.empty = function() {\n            return new Rect(0, 0, 0, 0);\n        };\n\n        Rect.fromPoints = function(p, q) {\n            if (isNaN(p.x) || isNaN(p.y) || isNaN(q.x) || isNaN(q.y)) {\n                throw \"Some values are NaN.\";\n            }\n            return new Rect(Math.min(p.x, q.x), Math.min(p.y, q.y), Math.abs(p.x - q.x), Math.abs(p.y - q.y));\n        };\n\n        function isNearZero(num) {\n            return Math.abs(num) < EPSILON;\n        }\n\n        function intersectLine(start1, end1, start2, end2, isSegment) {\n            var tangensdiff = ((end1.x - start1.x) * (end2.y - start2.y)) - ((end1.y - start1.y) * (end2.x - start2.x));\n            if (isNearZero(tangensdiff)) {\n                //parallel lines\n                return;\n            }\n\n            var num1 = ((start1.y - start2.y) * (end2.x - start2.x)) - ((start1.x - start2.x) * (end2.y - start2.y));\n            var num2 = ((start1.y - start2.y) * (end1.x - start1.x)) - ((start1.x - start2.x) * (end1.y - start1.y));\n            var r = num1 / tangensdiff;\n            var s = num2 / tangensdiff;\n\n            if (isSegment && (r < 0 || r > 1 || s < 0 || s > 1)) {\n                //r < 0 => line 1 is below line 2\n                //r > 1 => line 1 is above line 2\n                //s < 0 => line 2 is below line 1\n                //s > 1 => line 2 is above line 1\n                return;\n            }\n\n            return new Point(start1.x + (r * (end1.x - start1.x)), start1.y + (r * (end1.y - start1.y)));\n        }\n\n        var Intersect = {\n            lines: function(start1, end1, start2, end2) {\n                return intersectLine(start1, end1, start2, end2);\n            },\n            segments: function(start1, end1, start2, end2) {\n                return intersectLine(start1, end1, start2, end2, true);\n            },\n            rectWithLine: function(rect, start, end) {\n                return Intersect.segments(start, end, rect.topLeft(), rect.topRight()) ||\n                    Intersect.segments(start, end, rect.topRight(), rect.bottomRight()) ||\n                    Intersect.segments(start, end, rect.bottomLeft(), rect.bottomRight()) ||\n                    Intersect.segments(start, end, rect.topLeft(), rect.bottomLeft());\n            },\n            rects: function(rect1, rect2, angle) {\n                var tl = rect2.topLeft(),\n                    tr = rect2.topRight(),\n                    bl = rect2.bottomLeft(),\n                    br = rect2.bottomRight();\n                var center = rect2.center();\n                if (angle) {\n                    tl = tl.rotate(center, angle);\n                    tr = tr.rotate(center, angle);\n                    bl = bl.rotate(center, angle);\n                    br = br.rotate(center, angle);\n                }\n\n                var intersect = rect1.contains(tl) ||\n                    rect1.contains(tr) ||\n                    rect1.contains(bl) ||\n                    rect1.contains(br) ||\n                    Intersect.rectWithLine(rect1, tl, tr) ||\n                    Intersect.rectWithLine(rect1, tl, bl) ||\n                    Intersect.rectWithLine(rect1, tr, br) ||\n                    Intersect.rectWithLine(rect1, bl, br);\n\n                if (!intersect) {//last possible case is rect1 to be completely within rect2\n                    tl = rect1.topLeft();\n                    tr = rect1.topRight();\n                    bl = rect1.bottomLeft();\n                    br = rect1.bottomRight();\n\n                    if (angle) {\n                        var reverseAngle = 360 - angle;\n                        tl = tl.rotate(center, reverseAngle);\n                        tr = tr.rotate(center, reverseAngle);\n                        bl = bl.rotate(center, reverseAngle);\n                        br = br.rotate(center, reverseAngle);\n                    }\n\n                    intersect = rect2.contains(tl) ||\n                        rect2.contains(tr) ||\n                        rect2.contains(bl) ||\n                        rect2.contains(br);\n                }\n\n                return intersect;\n            }\n        };\n\n        /**\n         * Aligns two rectangles, where one is the container and the other is content.\n         */\n        var RectAlign = Class.extend({\n            init: function(container) {\n                this.container = Rect.toRect(container);\n            },\n\n            align: function(content, alignment) {\n                var alignValues = alignment.toLowerCase().split(\" \");\n\n                for (var i = 0; i < alignValues.length; i++) {\n                    content = this._singleAlign(content, alignValues[i]);\n                }\n\n                return content;\n            },\n            _singleAlign: function(content, alignment) {\n                if (isFunction(this[alignment])) {\n                    return this[alignment](content);\n                }\n                else {\n                    return content;\n                }\n            },\n\n            left: function(content) {\n                return this._align(content, this._left);\n            },\n            center: function(content) {\n                return this._align(content, this._center);\n            },\n            right: function(content) {\n                return this._align(content, this._right);\n            },\n            stretch: function(content) {\n                return this._align(content, this._stretch);\n            },\n            top: function(content) {\n                return this._align(content, this._top);\n            },\n            middle: function(content) {\n                return this._align(content, this._middle);\n            },\n            bottom: function(content) {\n                return this._align(content, this._bottom);\n            },\n\n            _left: function(container, content) {\n                content.x = container.x;\n            },\n            _center: function(container, content) {\n                content.x = ((container.width - content.width) / 2) || 0;\n            },\n            _right: function(container, content) {\n                content.x = container.width - content.width;\n            },\n            _top: function(container, content) {\n                content.y = container.y;\n            },\n            _middle: function(container, content) {\n                content.y = ((container.height - content.height) / 2) || 0;\n            },\n            _bottom: function(container, content) {\n                content.y = container.height - content.height;\n            },\n            _stretch: function(container, content) {\n                content.x = 0;\n                content.y = 0;\n                content.height = container.height;\n                content.width = container.width;\n            },\n            _align: function(content, alignCalc) {\n                content = Rect.toRect(content);\n                alignCalc(this.container, content);\n\n                return content;\n            }\n        });\n\n        var Polar = Class.extend({\n            init: function(r, a) {\n                this.r = r;\n                this.angle = a;\n            }\n        });\n\n        /**\n         * SVG transformation matrix.\n         */\n        var Matrix = Class.extend({\n            init: function(a, b, c, d, e, f) {\n                this.a = a || 0;\n                this.b = b || 0;\n                this.c = c || 0;\n                this.d = d || 0;\n                this.e = e || 0;\n                this.f = f || 0;\n            },\n            plus: function(m) {\n                this.a += m.a;\n                this.b += m.b;\n                this.c += m.c;\n                this.d += m.d;\n                this.e += m.e;\n                this.f += m.f;\n            },\n            minus: function(m) {\n                this.a -= m.a;\n                this.b -= m.b;\n                this.c -= m.c;\n                this.d -= m.d;\n                this.e -= m.e;\n                this.f -= m.f;\n            },\n            times: function(m) {\n                return new Matrix(\n                    this.a * m.a + this.c * m.b,\n                    this.b * m.a + this.d * m.b,\n                    this.a * m.c + this.c * m.d,\n                    this.b * m.c + this.d * m.d,\n                    this.a * m.e + this.c * m.f + this.e,\n                    this.b * m.e + this.d * m.f + this.f\n                );\n            },\n            apply: function(p) {\n                return new Point(this.a * p.x + this.c * p.y + this.e, this.b * p.x + this.d * p.y + this.f);\n            },\n            applyRect: function(r) {\n                return Rect.fromPoints(this.apply(r.topLeft()), this.apply(r.bottomRight()));\n            },\n            toString: function() {\n                return \"matrix(\" + this.a + \" \" + this.b + \" \" + this.c + \" \" + this.d + \" \" + this.e + \" \" + this.f + \")\";\n            }\n        });\n\n        deepExtend(Matrix, {\n            fromSVGMatrix: function(vm) {\n                var m = new Matrix();\n                m.a = vm.a;\n                m.b = vm.b;\n                m.c = vm.c;\n                m.d = vm.d;\n                m.e = vm.e;\n                m.f = vm.f;\n                return m;\n            },\n            fromMatrixVector: function(v) {\n                var m = new Matrix();\n                m.a = v.a;\n                m.b = v.b;\n                m.c = v.c;\n                m.d = v.d;\n                m.e = v.e;\n                m.f = v.f;\n                return m;\n            },\n            fromList: function(v) {\n                if (v.length !== 6) {\n                    throw \"The given list should consist of six elements.\";\n                }\n                var m = new Matrix();\n                m.a = v[0];\n                m.b = v[1];\n                m.c = v[2];\n                m.d = v[3];\n                m.e = v[4];\n                m.f = v[5];\n                return m;\n            },\n            translation: function(x, y) {\n                var m = new Matrix();\n                m.a = 1;\n                m.b = 0;\n                m.c = 0;\n                m.d = 1;\n                m.e = x;\n                m.f = y;\n                return m;\n            },\n            unit: function() {\n                return new Matrix(1, 0, 0, 1, 0, 0);\n            },\n            rotation: function(angle, x, y) {\n                var m = new Matrix();\n                m.a = Math.cos(angle * Math.PI / 180);\n                m.b = Math.sin(angle * Math.PI / 180);\n                m.c = -m.b;\n                m.d = m.a;\n                m.e = (x - x * m.a + y * m.b) || 0;\n                m.f = (y - y * m.a - x * m.b) || 0;\n                return m;\n            },\n            scaling: function(scaleX, scaleY) {\n                var m = new Matrix();\n                m.a = scaleX;\n                m.b = 0;\n                m.c = 0;\n                m.d = scaleY;\n                m.e = 0;\n                m.f = 0;\n                return m;\n            },\n            parse: function(v) {\n                var parts, nums;\n                if (v) {\n                    v = v.trim();\n                    // of the form \"matrix(...)\"\n                    if (v.slice(0, 6).toLowerCase() === \"matrix\") {\n                        nums = v.slice(7, v.length - 1).trim();\n                        parts = nums.split(\",\");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                        parts = nums.split(\" \");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                    }\n                    // of the form \"(...)\"\n                    if (v.slice(0, 1) === \"(\" && v.slice(v.length - 1) === \")\") {\n                        v = v.substr(1, v.length - 1);\n                    }\n                    if (v.indexOf(\",\") > 0) {\n                        parts = v.split(\",\");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                    }\n                    if (v.indexOf(\" \") > 0) {\n                        parts = v.split(\" \");\n                        if (parts.length === 6) {\n                            return Matrix.fromList(map(parts, function(p) {\n                                return parseFloat(p);\n                            }));\n                        }\n                    }\n                }\n                return parts;\n            }\n        });\n\n        /**\n         * SVG transformation represented as a vector.\n         */\n        var MatrixVector = Class.extend({\n            init: function(a, b, c, d, e, f) {\n                this.a = a || 0;\n                this.b = b || 0;\n                this.c = c || 0;\n                this.d = d || 0;\n                this.e = e || 0;\n                this.f = f || 0;\n            },\n            fromMatrix: function FromMatrix(m) {\n                var v = new MatrixVector();\n                v.a = m.a;\n                v.b = m.b;\n                v.c = m.c;\n                v.d = m.d;\n                v.e = m.e;\n                v.f = m.f;\n                return v;\n            }\n        });\n\n        /**\n         * Returns a value with Gaussian (normal) distribution.\n         * @param mean The mean value of the distribution.\n         * @param deviation The deviation (spreading at half-height) of the distribution.\n         * @returns {number}\n         */\n        function normalVariable(mean, deviation) {\n            var x, y, r;\n            do {\n                x = Math.random() * 2 - 1;\n                y = Math.random() * 2 - 1;\n                r = x * x + y * y;\n            }\n            while (!r || r > 1);\n            return mean + deviation * x * Math.sqrt(-2 * Math.log(r) / r);\n        }\n\n        /**\n         * Returns a random identifier which can be used as an ID of objects, eventually augmented with a prefix.\n         * @returns {string}\n         */\n        function randomId(length) {\n            if (Utils.isUndefined(length)) {\n                length = 10;\n            }\n            // old version return Math.floor((1 + Math.random()) * 0x1000000).toString(16).substring(1);\n            var result = '';\n            var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            for (var i = length; i > 0; --i) {\n                result += chars.charAt(Math.round(Math.random() * (chars.length - 1)));\n            }\n            return result;\n        }\n\n        var Geometry = {\n\n            /**\n             * Returns the squared distance to the line defined by the two given Points.\n             * @param p An arbitrary Point.\n             * @param a An endpoint of the line or segment.\n             * @param b The complementary endpoint of the line or segment.\n             */\n            _distanceToLineSquared: function(p, a, b) {\n                function d2(pt1, pt2) {\n                    return (pt1.x - pt2.x) * (pt1.x - pt2.x) + (pt1.y - pt2.y) * (pt1.y - pt2.y);\n                }\n\n                if (a === b) { // returns the distance of p to a\n                    return d2(p, a);\n                }\n\n                var vx = b.x - a.x,\n                    vy = b.y - a.y,\n                    dot = (p.x - a.x) * vx + (p.y - a.y) * vy;\n                if (dot < 0) {\n                    return d2(a, p); // sits on side of a\n                }\n\n                dot = (b.x - p.x) * vx + (b.y - p.y) * vy;\n                if (dot < 0) {\n                    return d2(b, p); // sits on side of b\n                }\n                // regular case, use crossproduct to get the sine out\n                dot = (b.x - p.x) * vy - (b.y - p.y) * vx;\n                return dot * dot / (vx * vx + vy * vy);\n            },\n\n            /**\n             * Returns the distance to the line defined by the two given Points.\n             * @param p An arbitrary Point.\n             * @param a An endpoint of the line or segment.\n             * @param b The complementary endpoint of the line or segment.\n             */\n            distanceToLine: function(p, a, b) {\n                return Math.sqrt(this._distanceToLineSquared(p, a, b));\n            },\n\n            /**\n             * Returns the distance of the given points to the polyline defined by the points.\n             * @param p An arbitrary point.\n             * @param points The points defining the polyline.\n             * @returns {Number}\n             */\n            distanceToPolyline: function(p, points) {\n                var minimum = Number.MAX_VALUE;\n                if (Utils.isUndefined(points) || points.length === 0) {\n                    return Number.MAX_VALUE;\n                }\n                for (var s = 0; s < points.length - 1; s++) {\n                    var p1 = points[s];\n                    var p2 = points[s + 1];\n\n                    var d = this._distanceToLineSquared(p, p1, p2);\n                    if (d < minimum) {\n                        minimum = d;\n                    }\n                }\n                return Math.sqrt(minimum);\n            }\n        };\n\n        /*---------------The HashTable structure--------------------------------*/\n\n        /**\n         * Represents a collection of key-value pairs that are organized based on the hash code of the key.\n         * _buckets[hashId] = {key: key, value:...}\n         * Important: do not use the standard Array access method, use the get/set methods instead.\n         * See http://en.wikipedia.org/wiki/Hash_table\n         */\n        var HashTable = kendo.Class.extend({\n            init: function() {\n                this._buckets = [];\n                this.length = 0;\n            },\n\n            /**\n             * Adds the literal object with the given key (of the form {key: key,....}).\n             */\n            add: function(key, value) {\n\n                var obj = this._createGetBucket(key);\n                if (Utils.isDefined(value)) {\n                    obj.value = value;\n                }\n                return obj;\n            },\n\n            /**\n             * Gets the literal object with the given key.\n             */\n            get: function(key) {\n                if (this._bucketExists(key)) {\n                    return this._createGetBucket(key);\n                }\n                return null;\n            },\n\n            /**\n             * Set the key-value pair.\n             * @param key The key of the entry.\n             * @param value The value to set. If the key already exists the value will be overwritten.\n             */\n            set: function(key, value) {\n                this.add(key, value);\n            },\n\n            /**\n             * Determines whether the HashTable contains a specific key.\n             */\n            containsKey: function(key) {\n                return this._bucketExists(key);\n            },\n\n            /**\n             * Removes the element with the specified key from the hashtable.\n             * Returns the removed bucket.\n             */\n            remove: function(key) {\n                if (this._bucketExists(key)) {\n                    var hashId = this._hash(key);\n                    delete this._buckets[hashId];\n                    this.length--;\n                    return key;\n                }\n            },\n\n            /**\n             * Foreach with an iterator working on the key-value pairs.\n             * @param func\n             */\n            forEach: function(func) {\n                var hashes = this._hashes();\n                for (var i = 0, len = hashes.length; i < len; i++) {\n                    var hash = hashes[i];\n                    var bucket = this._buckets[hash];\n                    if (Utils.isUndefined(bucket)) {\n                        continue;\n                    }\n                    func(bucket);\n                }\n            },\n\n            /**\n             * Returns a (shallow) clone of the current HashTable.\n             * @returns {HashTable}\n             */\n            clone: function() {\n                var ht = new HashTable();\n                var hashes = this._hashes();\n                for (var i = 0, len = hashes.length; i < len; i++) {\n                    var hash = hashes[i];\n                    var bucket = this._buckets[hash];\n                    if (Utils.isUndefined(bucket)) {\n                        continue;\n                    }\n                    ht.add(bucket.key, bucket.value);\n                }\n                return ht;\n            },\n\n            /**\n             * Returns the hashes of the buckets.\n             * @returns {Array}\n             * @private\n             */\n            _hashes: function() {\n                var hashes = [];\n                for (var hash in this._buckets) {\n                    if (this._buckets.hasOwnProperty(hash)) {\n                        hashes.push(hash);\n                    }\n                }\n                return hashes;\n            },\n\n            _bucketExists: function(key) {\n                var hashId = this._hash(key);\n                return Utils.isDefined(this._buckets[hashId]);\n            },\n\n            /**\n             * Returns-adds the createGetBucket with the given key. If not present it will\n             * be created and returned.\n             * A createGetBucket is a literal object of the form {key: key, ...}.\n             */\n            _createGetBucket: function(key) {\n                var hashId = this._hash(key);\n                var bucket = this._buckets[hashId];\n                if (Utils.isUndefined(bucket)) {\n                    bucket = { key: key };\n                    this._buckets[hashId] = bucket;\n                    this.length++;\n                }\n                return bucket;\n            },\n\n            /**\n             * Hashing of the given key.\n             */\n            _hash: function(key) {\n                if (Utils.isNumber(key)) {\n                    return key;\n                }\n                if (Utils.isString(key)) {\n                    return this._hashString(key);\n                }\n                if (Utils.isObject(key)) {\n                    return this._objectHashId(key);\n                }\n                throw \"Unsupported key type.\";\n            },\n\n            /**\n             * Hashing of a string.\n             */\n            _hashString: function(s) {\n                // see for example http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n                var result = 0;\n                if (s.length === 0) {\n                    return result;\n                }\n                for (var i = 0; i < s.length; i++) {\n                    var ch = s.charCodeAt(i);\n                    result = ((result * 32) - result) + ch;\n                }\n                return result;\n            },\n\n            /**\n             * Returns the unique identifier for an object. This is automatically assigned and add on the object.\n             */\n            _objectHashId: function(key) {\n                var id = key._hashId;\n                if (Utils.isUndefined(id)) {\n                    id = randomId();\n                    key._hashId = id;\n                }\n                return id;\n            }\n        });\n\n        /*---------------The Dictionary structure--------------------------------*/\n\n        /**\n         * Represents a collection of key-value pairs.\n         * Important: do not use the standard Array access method, use the get/Set methods instead.\n         */\n        var Dictionary = kendo.Observable.extend({\n            /**\n             * Initializes a new instance of the Dictionary class.\n             * @param dictionary Loads the content of the given dictionary into this new one.\n             */\n            init: function(dictionary) {\n                var that = this;\n                kendo.Observable.fn.init.call(that);\n                this._hashTable = new HashTable();\n                this.length = 0;\n                if (Utils.isDefined(dictionary)) {\n                    if (Array.isArray(dictionary)) {\n                        for (var i = 0; i < dictionary.length; i++) {\n                            this.add(dictionary[i]);\n                        }\n                    } else {\n                        dictionary.forEach(function(k, v) {\n                            this.add(k, v);\n                        }, this);\n                    }\n                }\n            },\n\n            /**\n             * Adds a key-value to the dictionary.\n             * If the key already exists this will assign the given value to the existing entry.\n             */\n            add: function(key, value) {\n                var entry = this._hashTable.get(key);\n                if (!entry) {\n                    entry = this._hashTable.add(key);\n                    this.length++;\n                    this.trigger('changed');\n                }\n                entry.value = value;\n            },\n\n            /**\n             * Set the key-value pair.\n             * @param key The key of the entry.\n             * @param value The value to set. If the key already exists the value will be overwritten.\n             */\n            set: function(key, value) {\n                this.add(key, value);\n            },\n\n            /**\n             * Gets the value associated with the given key in the dictionary.\n             */\n            get: function(key) {\n                var entry = this._hashTable.get(key);\n                if (entry) {\n                    return entry.value;\n                }\n                throw new Error(\"Cannot find key \" + key);\n            },\n\n            /**\n             * Returns whether the dictionary contains the given key.\n             */\n            containsKey: function(key) {\n                return this._hashTable.containsKey(key);\n            },\n\n            /**\n             * Removes the element with the specified key from the dictionary.\n             */\n            remove: function(key) {\n                if (this.containsKey(key)) {\n                    this.trigger(\"changed\");\n                    this.length--;\n                    return this._hashTable.remove(key);\n                }\n            },\n\n            /**\n             * The functional gets the key and value as parameters.\n             */\n            forEach: function(func, thisRef) {\n                this._hashTable.forEach(function(entry) {\n                    func.call(thisRef, entry.key, entry.value);\n                });\n            },\n\n            /**\n             * Same as forEach except that only the value is passed to the functional.\n             */\n            forEachValue: function(func, thisRef) {\n                this._hashTable.forEach(function(entry) {\n                    func.call(thisRef, entry.value);\n                });\n            },\n\n            /**\n             * Calls a defined callback function for each key in the dictionary.\n             */\n            forEachKey: function(func, thisRef) {\n                this._hashTable.forEach(function(entry) {\n                    func.call(thisRef, entry.key);\n                });\n            },\n\n            /**\n             * Gets an array with all keys in the dictionary.\n             */\n            keys: function() {\n                var keys = [];\n                this.forEachKey(function(key) {\n                    keys.push(key);\n                });\n                return keys;\n            }\n        });\n\n        /*---------------Queue structure--------------------------------*/\n\n        var Queue = kendo.Class.extend({\n\n            init: function() {\n                this._tail = null;\n                this._head = null;\n                this.length = 0;\n            },\n\n            /**\n             * Enqueues an object to the end of the queue.\n             */\n            enqueue: function(value) {\n                var entry = { value: value, next: null };\n                if (!this._head) {\n                    this._head = entry;\n                    this._tail = this._head;\n                }\n                else {\n                    this._tail.next = entry;\n                    this._tail = this._tail.next;\n                }\n                this.length++;\n            },\n\n            /**\n             * Removes and returns the object at top of the queue.\n             */\n            dequeue: function() {\n                if (this.length < 1) {\n                    throw new Error(\"The queue is empty.\");\n                }\n                var value = this._head.value;\n                this._head = this._head.next;\n                this.length--;\n                return value;\n            },\n\n            contains: function(item) {\n                var current = this._head;\n                while (current) {\n                    if (current.value === item) {\n                        return true;\n                    }\n                    current = current.next;\n                }\n                return false;\n            }\n        });\n\n\n        /**\n         * While other data structures can have multiple times the same item a Set owns only\n         * once a particular item.\n         * @type {*}\n         */\n        var Set = kendo.Observable.extend({\n            init: function(resource) {\n                var that = this;\n                kendo.Observable.fn.init.call(that);\n                this._hashTable = new HashTable();\n                this.length = 0;\n                if (Utils.isDefined(resource)) {\n                    if (resource instanceof HashTable) {\n                        resource.forEach(function(d) {\n                            this.add(d);\n                        });\n                    }\n                    else if (resource instanceof Dictionary) {\n                        resource.forEach(function(k, v) {\n                            this.add({ key: k, value: v });\n                        }, this);\n                    }\n                }\n            },\n\n            contains: function(item) {\n                return this._hashTable.containsKey(item);\n            },\n\n            add: function(item) {\n                var entry = this._hashTable.get(item);\n                if (!entry) {\n                    this._hashTable.add(item, item);\n                    this.length++;\n                    this.trigger('changed');\n                }\n            },\n\n            get: function(item) {\n                if (this.contains(item)) {\n                    return this._hashTable.get(item).value;\n                }\n                else {\n                    return null;\n                }\n            },\n\n            /**\n             * Returns the hash of the item.\n             * @param item\n             * @returns {*}\n             */\n            hash: function(item) {\n                return this._hashTable._hash(item);\n            },\n\n            /**\n             * Removes the given item from the set. No exception is thrown if the item is not in the Set.\n             * @param item\n             */\n            remove: function(item) {\n                if (this.contains(item)) {\n                    this._hashTable.remove(item);\n                    this.length--;\n                    this.trigger('changed');\n                }\n            },\n            /**\n             * Foreach with an iterator working on the key-value pairs.\n             * @param func\n             */\n            forEach: function(func, context) {\n                this._hashTable.forEach(function(kv) {\n                    func(kv.value);\n                }, context);\n            },\n            toArray: function() {\n                var r = [];\n                this.forEach(function(d) {\n                    r.push(d);\n                });\n                return r;\n            }\n        });\n\n        /*----------------Node-------------------------------*/\n\n        /**\n         * Defines the node (vertex) of a Graph.\n         */\n        var Node = kendo.Class.extend({\n\n            init: function(id, shape) {\n\n                /**\n                 * Holds all the links incident with the current node.\n                 * Do not use this property to manage the incoming links, use the appropriate add/remove methods instead.\n                 */\n                this.links = [];\n\n                /**\n                 * Holds the links from the current one to another Node .\n                 * Do not use this property to manage the incoming links, use the appropriate add/remove methods instead.\n                 */\n                this.outgoing = [];\n\n                /**\n                 * Holds the links from another Node to the current one.\n                 * Do not use this property to manage the incoming links, use the appropriate add/remove methods instead.\n                 */\n                this.incoming = [];\n\n                /**\n                 * Holds the weight of this Node.\n                 */\n                this.weight = 1;\n\n                if (Utils.isDefined(id)) {\n                    this.id = id;\n                }\n                else {\n                    this.id = randomId();\n                }\n                if (Utils.isDefined(shape)) {\n                    this.associatedShape = shape;\n                    // transfer the shape's bounds to the runtime props\n                    var b = shape.bounds();\n                    this.width = b.width;\n                    this.height = b.height;\n                    this.x = b.x;\n                    this.y = b.y;\n                }\n                else {\n                    this.associatedShape = null;\n                }\n                /**\n                 * The payload of the node.\n                 * @type {null}\n                 */\n                this.data = null;\n                this.type = \"Node\";\n                this.shortForm = \"Node '\" + this.id + \"'\";\n                /**\n                 * Whether this is an injected node during the analysis or layout process.\n                 * @type {boolean}\n                 */\n                this.isVirtual = false;\n            },\n\n            /**\n             * Returns whether this node has no links attached.\n             */\n            isIsolated: function() {\n                return Utils.isEmpty(this.links);\n            },\n\n            /**\n             * Gets or sets the bounding rectangle of this node.\n             * This should be considered as runtime data, the property is not hotlinked to a SVG item.\n             */\n            bounds: function(r) {\n                if (!Utils.isDefined(r)) {\n                    return new diagram.Rect(this.x, this.y, this.width, this.height);\n                }\n\n                this.x = r.x;\n                this.y = r.y;\n                this.width = r.width;\n                this.height = r.height;\n            },\n\n            /**\n             * Returns whether there is at least one link with the given (complementary) node. This can be either an\n             * incoming or outgoing link.\n             */\n            isLinkedTo: function(node) {\n                var that = this;\n                return Utils.any(that.links, function(link) {\n                    return link.getComplement(that) === node;\n                });\n            },\n\n            /**\n             * Gets the children of this node, defined as the adjacent nodes with a link from this node to the adjacent one.\n             * @returns {Array}\n             */\n            getChildren: function() {\n                if (this.outgoing.length === 0) {\n                    return [];\n                }\n                var children = [];\n                for (var i = 0, len = this.outgoing.length; i < len; i++) {\n                    var link = this.outgoing[i];\n                    children.push(link.getComplement(this));\n                }\n                return children;\n            },\n\n            /**\n             * Gets the parents of this node, defined as the adjacent nodes with a link from the adjacent node to this one.\n             * @returns {Array}\n             */\n            getParents: function() {\n                if (this.incoming.length === 0) {\n                    return [];\n                }\n                var parents = [];\n                for (var i = 0, len = this.incoming.length; i < len; i++) {\n                    var link = this.incoming[i];\n                    parents.push(link.getComplement(this));\n                }\n                return parents;\n            },\n\n            /**\n             * Returns a clone of the Node. Note that the identifier is not cloned since it's a different Node instance.\n             * @returns {Node}\n             */\n            clone: function() {\n                var copy = new Node();\n                if (Utils.isDefined(this.weight)) {\n                    copy.weight = this.weight;\n                }\n                if (Utils.isDefined(this.balance)) {\n                    copy.balance = this.balance;\n                }\n                if (Utils.isDefined(this.owner)) {\n                    copy.owner = this.owner;\n                }\n                copy.associatedShape = this.associatedShape;\n                copy.x = this.x;\n                copy.y = this.y;\n                copy.width = this.width;\n                copy.height = this.height;\n                return copy;\n            },\n\n            /**\n             * Returns whether there is a link from the current node to the given node.\n             */\n            adjacentTo: function(node) {\n                return this.isLinkedTo(node) !== null;\n            },\n\n            /**\n             * Removes the given link from the link collection this node owns.\n             * @param link\n             */\n            removeLink: function(link) {\n                if (link.source === this) {\n                    Utils.remove(this.links, link);\n                    Utils.remove(this.outgoing, link);\n                    link.source = null;\n                }\n\n                if (link.target === this) {\n                    Utils.remove(this.links, link);\n                    Utils.remove(this.incoming, link);\n                    link.target = null;\n                }\n            },\n\n            /**\n             * Returns whether there is a (outgoing) link from the current node to the given one.\n             */\n            hasLinkTo: function(node) {\n                return Utils.any(this.outgoing, function(link) {\n                    return link.target === node;\n                });\n            },\n\n            /**\n             * Returns the degree of this node, i.e. the sum of incoming and outgoing links.\n             */\n            degree: function() {\n                return this.links.length;\n            },\n\n            /**\n             * Returns whether this node is either the source or the target of the given link.\n             */\n            incidentWith: function(link) {\n                return contains(this.links, link);\n            },\n\n            /**\n             * Returns the links between this node and the given one.\n             */\n            getLinksWith: function(node) {\n                return Utils.all(this.links, function(link) {\n                    return link.getComplement(this) === node;\n                }, this);\n            },\n\n            /**\n             * Returns the nodes (either parent or child) which are linked to the current one.\n             */\n            getNeighbors: function() {\n                var neighbors = [];\n                Utils.forEach(this.incoming, function(e) {\n                    neighbors.push(e.getComplement(this));\n                }, this);\n                Utils.forEach(this.outgoing, function(e) {\n                    neighbors.push(e.getComplement(this));\n                }, this);\n                return neighbors;\n            }\n        });\n\n        /**\n         * Defines a directed link (edge, connection) of a Graph.\n         */\n        var Link = kendo.Class.extend({\n\n            init: function(source, target, id, connection) {\n                if (Utils.isUndefined(source)) {\n                    throw \"The source of the new link is not set.\";\n                }\n                if (Utils.isUndefined(target)) {\n                    throw \"The target of the new link is not set.\";\n                }\n                var sourceFound, targetFound;\n                if (Utils.isString(source)) {\n                    sourceFound = new Node(source);\n                }\n                else {\n                    sourceFound = source;\n                }\n                if (Utils.isString(target)) {\n                    targetFound = new Node(target);\n                }\n                else {\n                    targetFound = target;\n                }\n\n                this.source = sourceFound;\n                this.target = targetFound;\n                this.source.links.push(this);\n                this.target.links.push(this);\n                this.source.outgoing.push(this);\n                this.target.incoming.push(this);\n                if (Utils.isDefined(id)) {\n                    this.id = id;\n                }\n                else {\n                    this.id = randomId();\n                }\n                if (Utils.isDefined(connection)) {\n                    this.associatedConnection = connection;\n                }\n                else {\n                    this.associatedConnection = null;\n                }\n                this.type = \"Link\";\n                this.shortForm = \"Link '\" + this.source.id + \"->\" + this.target.id + \"'\";\n            },\n\n            /**\n             * Returns the complementary node of the given one, if any.\n             */\n            getComplement: function(node) {\n                if (this.source !== node && this.target !== node) {\n                    throw \"The given node is not incident with this link.\";\n                }\n                return this.source === node ? this.target : this.source;\n            },\n\n            /**\n             * Returns the overlap of the current link with the given one, if any.\n             */\n            getCommonNode: function(link) {\n                if (this.source === link.source || this.source === link.target) {\n                    return this.source;\n                }\n                if (this.target === link.source || this.target === link.target) {\n                    return this.target;\n                }\n                return null;\n            },\n\n            /**\n             * Returns whether the current link is bridging the given nodes.\n             */\n            isBridging: function(v1, v2) {\n                return this.source === v1 && this.target === v2 || this.source === v2 && this.target === v1;\n            },\n\n            /**\n             * Returns the source and target of this link as a tuple.\n             */\n            getNodes: function() {\n                return [this.source, this.target];\n            },\n\n            /**\n             * Returns whether the given node is either the source or the target of the current link.\n             */\n            incidentWith: function(node) {\n                return this.source === node || this.target === node;\n            },\n\n            /**\n             * Returns whether the given link is a continuation of the current one. This can be both\n             * via an incoming or outgoing link.\n             */\n            adjacentTo: function(link) {\n                return contains(this.source.links, link) || contains(this.target.links, link);\n            },\n\n            /**\n             * Changes the source-node of this link.\n             */\n            changeSource: function(node) {\n                Utils.remove(this.source.links, this);\n                Utils.remove(this.source.outgoing, this);\n\n                node.links.push(this);\n                node.outgoing.push(this);\n\n                this.source = node;\n            },\n\n            /**\n             * Changes the target-node of this link.\n             * @param node\n             */\n            changeTarget: function(node) {\n                Utils.remove(this.target.links, this);\n                Utils.remove(this.target.incoming, this);\n\n                node.links.push(this);\n                node.incoming.push(this);\n\n                this.target = node;\n            },\n\n            /**\n             * Changes both the source and the target nodes of this link.\n             */\n            changesNodes: function(v, w) {\n                if (this.source === v) {\n                    this.changeSource(w);\n                }\n                else if (this.target === v) {\n                    this.changeTarget(w);\n                }\n            },\n\n            /**\n             * Reverses the direction of this link.\n             */\n            reverse: function() {\n                var oldSource = this.source;\n                var oldTarget = this.target;\n\n                this.source = oldTarget;\n                Utils.remove(oldSource.outgoing, this);\n                this.source.outgoing.push(this);\n\n                this.target = oldSource;\n                Utils.remove(oldTarget.incoming, this);\n                this.target.incoming.push(this);\n                return this;\n            },\n\n            /**\n             * Ensures that the given target defines the endpoint of this link.\n             */\n            directTo: function(target) {\n                if (this.source !== target && this.target !== target) {\n                    throw \"The given node is not incident with this link.\";\n                }\n                if (this.target !== target) {\n                    this.reverse();\n                }\n            },\n\n            /**\n             * Returns a reversed clone of this link.\n             */\n            createReverseEdge: function() {\n                var r = this.clone();\n                r.reverse();\n                r.reversed = true;\n                return r;\n            },\n\n            /**\n             * Returns a clone of this link.\n             */\n            clone: function() {\n                var clone = new Link(this.source, this.target);\n                return clone;\n            }\n        });\n\n        /*--------------Graph structure---------------------------------*/\n        /**\n         * Defines a directed graph structure.\n         * Note that the incidence structure resides in the nodes through the incoming and outgoing links collection, rahter than\n         * inside the Graph.\n         */\n        var Graph = kendo.Class.extend({\n            init: function(idOrDiagram) {\n                /**\n                 * The links or edge collection of this Graph.\n                 * @type {Array}\n                 */\n                this.links = [];\n                /**\n                 * The node or vertex collection of this Graph.\n                 * @type {Array}\n                 */\n                this.nodes = [];\n\n                this._nodeMap = new Dictionary();\n                /**\n                 * The optional reference to the Diagram on which this Graph is based.\n                 * @type {null}\n                 */\n                this.diagram = null;\n\n                /**\n                 * The root of this Graph. If not set explicitly the first Node with zero incoming links will be taken.\n                 * @type {null}\n                 * @private\n                 */\n                this._root = null;\n                if (Utils.isDefined(idOrDiagram)) {\n                    if (Utils.isString(idOrDiagram)) {\n                        this.id = idOrDiagram;\n                    }\n                    else {\n                        this.diagram = idOrDiagram;\n                        this.id = idOrDiagram.id;\n                    }\n                }\n                else {\n                    this.id = randomId();\n                }\n\n                /**\n                 * The bounds of this graph if the nodes have spatial extension defined.\n                 * @type {Rect}\n                 */\n                this.bounds = new Rect();\n                // keeps track whether the children & parents have been created\n                this._hasCachedRelationships = false;\n                this.type = \"Graph\";\n            },\n            /**\n             * Caches the relational information of parents and children in the 'parents' and 'children'\n             * properties.\n             * @param forceRebuild If set to true the relational info will be rebuild even if already present.\n             */\n            cacheRelationships: function(forceRebuild) {\n                if (Utils.isUndefined(forceRebuild)) {\n                    forceRebuild = false;\n                }\n                if (this._hasCachedRelationships && !forceRebuild) {\n                    return;\n                }\n                for (var i = 0, len = this.nodes.length; i < len; i++) {\n                    var node = this.nodes[i];\n                    node.children = this.getChildren(node);\n                    node.parents = this.getParents(node);\n                }\n                this._hasCachedRelationships = true;\n            },\n\n            /**\n             * Assigns tree-levels to the nodes assuming this is a tree graph.\n             * If not connected or not a tree the process will succeed but\n             * will have little meaning.\n             * @param startNode The node from where the level numbering starts, usually the root of the tree.\n             * @param visited The collection of visited nodes.\n             * @param offset The offset or starting counter of the level info.\n             */\n            assignLevels: function(startNode, offset, visited) {\n                if (!startNode) {\n                    throw \"Start node not specified.\";\n                }\n                if (Utils.isUndefined(offset)) {\n                    offset = 0;\n                }\n                // if not done before, cache the parents and children\n                this.cacheRelationships();\n                if (Utils.isUndefined(visited)) {\n                    visited = new Dictionary();\n                    Utils.forEach(this.nodes, function(n) {\n                        visited.add(n, false);\n                    });\n                }\n                visited.set(startNode, true);\n                startNode.level = offset;\n                var children = startNode.children;\n                for (var i = 0, len = children.length; i < len; i++) {\n                    var child = children[i];\n                    if (!child || visited.get(child)) {\n                        continue;\n                    }\n                    this.assignLevels(child, offset + 1, visited);\n                }\n            },\n\n            /**\n             * Gets or set the root of this graph.\n             * If not set explicitly the first Node with zero incoming links will be taken.\n             * @param value\n             * @returns {*}\n             */\n            root: function(value) {\n                if (Utils.isUndefined(value)) {\n                    if (!this._root) {\n                        // TODO: better to use the longest path for the most probable root?\n                        var found = Utils.first(this.nodes, function(n) {\n                            return n.incoming.length === 0;\n                        });\n                        if (found) {\n                            return found;\n                        }\n                        return Utils.first(this.nodes);\n                    }\n                    else {\n                        return this._root;\n                    }\n                }\n                else {\n                    this._root = value;\n                }\n            },\n\n            /**\n             * Returns the connected components of this graph.\n             * Note that the returned graphs are made up of the nodes and links of this graph, i.e. a pointer to the items of this graph.\n             * If you alter the items of the components you'll alter the original graph and vice versa.\n             * @returns {Array}\n             */\n            getConnectedComponents: function() {\n                this.componentIndex = 0;\n                this.setItemIndices();\n                var componentId = Utils.initArray(this.nodes.length, -1);\n\n                for (var v = 0; v < this.nodes.length; v++) {\n                    if (componentId[v] === -1) {\n                        this._collectConnectedNodes(componentId, v);\n                        this.componentIndex++;\n                    }\n                }\n\n                var components = [], i;\n                for (i = 0; i < this.componentIndex; ++i) {\n                    components[i] = new Graph();\n                }\n                for (i = 0; i < componentId.length; ++i) {\n                    var graph = components[componentId[i]];\n                    graph.addNodeAndOutgoings(this.nodes[i]);\n                }\n                // sorting the components in decreasing order of node count\n                components.sort(function(a, b) {\n                    return b.nodes.length - a.nodes.length;\n                });\n                return components;\n            },\n\n            _collectConnectedNodes: function(setIds, nodeIndex) {\n                setIds[nodeIndex] = this.componentIndex; // part of the current component\n                var node = this.nodes[nodeIndex];\n                Utils.forEach(node.links,\n                    function(link) {\n                        var next = link.getComplement(node);\n                        var nextId = next.index;\n                        if (setIds[nextId] === -1) {\n                            this._collectConnectedNodes(setIds, nextId);\n                        }\n                    }, this);\n            },\n\n            /**\n             * Calculates the bounds of this Graph if the Nodes have spatial dimensions defined.\n             * @returns {Rect}\n             */\n            calcBounds: function() {\n                if (this.isEmpty()) {\n                    this.bounds = new Rect();\n                    return this.bounds;\n                }\n                var b = null;\n                for (var i = 0, len = this.nodes.length; i < len; i++) {\n                    var node = this.nodes[i];\n                    if (!b) {\n                        b = node.bounds();\n                    }\n                    else {\n                        b = b.union(node.bounds());\n                    }\n                }\n                this.bounds = b;\n                return this.bounds;\n            },\n\n            /**\n             * Creates a spanning tree for the current graph.\n             * Important: this will not return a spanning forest if the graph is disconnected.\n             * Prim's algorithm  finds a minimum-cost spanning tree of an edge-weighted, connected, undirected graph;\n             * see http://en.wikipedia.org/wiki/Prim%27s_algorithm .\n             * @param root The root of the spanning tree.\n             * @returns {Graph}\n             */\n            getSpanningTree: function(root) {\n                var tree = new Graph();\n                var map = new Dictionary(), source, target;\n                tree.root = root.clone();\n                tree.root.level = 0;\n                tree.root.id = root.id;\n                map.add(root, tree.root);\n                root.level = 0;\n\n                var visited = [];\n                var remaining = [];\n                tree._addNode(tree.root);\n                visited.push(root);\n                remaining.push(root);\n\n                var levelCount = 1;\n                while (remaining.length > 0) {\n                    var next = remaining.pop();\n                    for (var ni = 0; ni < next.links.length; ni++) {\n                        var link = next.links[ni];\n                        var cn = link.getComplement(next);\n                        if (contains(visited, cn)) {\n                            continue;\n                        }\n\n                        cn.level = next.level + 1;\n                        if (levelCount < cn.level + 1) {\n                            levelCount = cn.level + 1;\n                        }\n                        if (!contains(remaining, cn)) {\n                            remaining.push(cn);\n                        }\n                        if (!contains(visited, cn)) {\n                            visited.push(cn);\n                        }\n                        if (map.containsKey(next)) {\n                            source = map.get(next);\n                        }\n                        else {\n                            source = next.clone();\n                            source.level = next.level;\n                            source.id = next.id;\n                            map.add(next, source);\n                        }\n                        if (map.containsKey(cn)) {\n                            target = map.get(cn);\n                        }\n                        else {\n                            target = cn.clone();\n                            target.level = cn.level;\n                            target.id = cn.id;\n                            map.add(cn, target);\n                        }\n                        var newLink = new Link(source, target);\n                        tree.addLink(newLink);\n                    }\n\n                }\n\n                var treeLevels = [];\n                for (var i = 0; i < levelCount; i++) {\n                    treeLevels.push([]);\n                }\n\n                Utils.forEach(tree.nodes, function(node) {\n                    treeLevels[node.level].push(node);\n                });\n\n                tree.treeLevels = treeLevels;\n                tree.cacheRelationships();\n                return tree;\n            },\n\n            /**\n             * Returns a random node in this graph.\n             * @param excludedNodes The collection of nodes which should not be considered.\n             * @param incidenceLessThan The maximum degree or incidence the random node should have.\n             * @returns {*}\n             */\n            takeRandomNode: function(excludedNodes, incidenceLessThan) {\n                if (Utils.isUndefined(excludedNodes)) {\n                    excludedNodes = [];\n                }\n                if (Utils.isUndefined(incidenceLessThan)) {\n                    incidenceLessThan = 4;\n                }\n                if (this.nodes.length === 0) {\n                    return null;\n                }\n                if (this.nodes.length === 1) {\n                    return contains(excludedNodes, this.nodes[0]) ? null : this.nodes[0];\n                }\n                var pool = $.grep(this.nodes, function(node) {\n                    return !contains(excludedNodes, node) && node.degree() <= incidenceLessThan;\n                });\n                if (Utils.isEmpty(pool)) {\n                    return null;\n                }\n                return pool[Utils.randomInteger(0, pool.length)];\n            },\n\n            /**\n             * Returns whether this is an empty graph.\n             */\n            isEmpty: function() {\n                return Utils.isEmpty(this.nodes);\n            },\n\n            /**\n             * Checks whether the endpoints of the links are all in the nodes collection.\n             */\n            isHealthy: function() {\n                return Utils.all(this.links, function(link) {\n                    return contains(this.nodes, link.source) && contains(this.nodes, link.target);\n                }, this);\n            },\n\n            /**\n             * Gets the parents of this node, defined as the adjacent nodes with a link from the adjacent node to this one.\n             * @returns {Array}\n             */\n            getParents: function(n) {\n                if (!this.hasNode(n)) {\n                    throw \"The given node is not part of this graph.\";\n                }\n                return n.getParents();\n            },\n\n            /**\n             * Gets the children of this node, defined as the adjacent nodes with a link from this node to the adjacent one.\n             * @returns {Array}\n             */\n            getChildren: function(n) {\n                if (!this.hasNode(n)) {\n                    throw \"The given node is not part of this graph.\";\n                }\n                return n.getChildren();\n            },\n\n            /**\n             * Adds a new link to the graph between the given nodes.\n             */\n            addLink: function(sourceOrLink, target, owner) {\n\n                if (Utils.isUndefined(sourceOrLink)) {\n                    throw \"The source of the link is not defined.\";\n                }\n                if (Utils.isUndefined(target)) {\n                    // can only be undefined if the first one is a Link\n                    if (Utils.isDefined(sourceOrLink.type) && sourceOrLink.type === \"Link\") {\n                        this.addExistingLink(sourceOrLink);\n                        return;\n                    }\n                    else {\n                        throw \"The target of the link is not defined.\";\n                    }\n                }\n\n                var foundSource = this.getNode(sourceOrLink);\n                if (Utils.isUndefined(foundSource)) {\n                    foundSource = this.addNode(sourceOrLink);\n                }\n                var foundTarget = this.getNode(target);\n                if (Utils.isUndefined(foundTarget)) {\n                    foundTarget = this.addNode(target);\n                }\n\n                var newLink = new Link(foundSource, foundTarget);\n\n                if (Utils.isDefined(owner)) {\n                    newLink.owner = owner;\n                }\n\n                /*newLink.source.outgoing.push(newLink);\n                 newLink.source.links.push(newLink);\n                 newLink.target.incoming.push(newLink);\n                 newLink.target.links.push(newLink);*/\n\n                this.links.push(newLink);\n\n                return newLink;\n            },\n\n            /**\n             * Removes all the links in this graph.\n             */\n            removeAllLinks: function() {\n                while (this.links.length > 0) {\n                    var link = this.links[0];\n                    this.removeLink(link);\n                }\n            },\n\n            /**\n             * Adds the given link to the current graph.\n             */\n            addExistingLink: function(link) {\n\n                if (this.hasLink(link)) {\n                    return;\n                }\n                this.links.push(link);\n                if (this.hasNode(link.source.id)) {\n                    // priority to the existing node with the id even if other props are different\n                    var s = this.getNode(link.source.id);\n                    link.changeSource(s);\n                }\n                else {\n                    this.addNode(link.source);\n                }\n\n                if (this.hasNode(link.target.id)) {\n                    var t = this.getNode(link.target.id);\n                    link.changeTarget(t);\n                }\n                else {\n                    this.addNode(link.target);\n                }\n\n                /*  if (!link.source.outgoing.contains(link)) {\n                 link.source.outgoing.push(link);\n                 }\n                 if (!link.source.links.contains(link)) {\n                 link.source.links.push(link);\n                 }\n                 if (!link.target.incoming.contains(link)) {\n                 link.target.incoming.push(link);\n                 }\n                 if (!link.target.links.contains(link)) {\n                 link.target.links.push(link);\n                 }*/\n            },\n\n            /**\n             * Returns whether the given identifier or Link is part of this graph.\n             * @param linkOrId An identifier or a Link object.\n             * @returns {*}\n             */\n            hasLink: function(linkOrId) {\n                if (Utils.isString(linkOrId)) {\n                    return Utils.any(this.links, function(link) {\n                        return link.id === linkOrId;\n                    });\n                }\n                if (linkOrId.type === \"Link\") {\n                    return contains(this.links, linkOrId);\n                }\n                throw \"The given object is neither an identifier nor a Link.\";\n            },\n            /**\n             * Gets the node with the specified Id or null if not part of this graph.\n             */\n            getNode: function(nodeOrId) {\n                var id = nodeOrId.id || nodeOrId;\n                if (this._nodeMap.containsKey(id)) {\n                    return this._nodeMap.get(id);\n                }\n            },\n\n            /**\n             * Returns whether the given node or node Id is part of this graph.\n             */\n            hasNode: function(nodeOrId) {\n                var id = nodeOrId.id || nodeOrId;\n                return this._nodeMap.containsKey(id);\n            },\n\n            _addNode: function(node) {\n                this.nodes.push(node);\n                this._nodeMap.add(node.id, node);\n            },\n\n            _removeNode: function(node) {\n                Utils.remove(this.nodes, node);\n                this._nodeMap.remove(node.id);\n            },\n\n            /**\n             * Removes the given node from this graph.\n             * The node can be specified as an object or as an identifier (string).\n             */\n            removeNode: function(nodeOrId) {\n                var n = nodeOrId;\n                if (Utils.isString(nodeOrId)) {\n                    n = this.getNode(nodeOrId);\n                }\n\n                if (Utils.isDefined(n)) {\n                    var links = n.links;\n                    n.links = [];\n                    for (var i = 0, len = links.length; i < len; i++) {\n                        var link = links[i];\n                        this.removeLink(link);\n                    }\n                    this._removeNode(n);\n                }\n                else {\n                    throw \"The identifier should be a Node or the Id (string) of a node.\";\n                }\n            },\n\n            /**\n             * Returns whether the given nodes are connected with a least one link independently of the direction.\n             */\n            areConnected: function(n1, n2) {\n                return Utils.any(this.links, function(link) {\n                    return link.source == n1 && link.target == n2 || link.source == n2 && link.target == n1;\n                });\n            },\n\n            /**\n             * Removes the given link from this graph.\n             */\n            removeLink: function(link) {\n                /*    if (!this.links.contains(link)) {\n                 throw \"The given link is not part of the Graph.\";\n                 }\n                 */\n                Utils.remove(this.links, link);\n\n                Utils.remove(link.source.outgoing, link);\n                Utils.remove(link.source.links, link);\n                Utils.remove(link.target.incoming, link);\n                Utils.remove(link.target.links, link);\n            },\n\n            /**\n             * Adds a new node to this graph, if not already present.\n             * The node can be an existing Node or the identifier of a new node.\n             * No error is thrown if the node is already there and the existing one is returned.\n             */\n            addNode: function(nodeOrId, layoutRect, owner) {\n\n                var newNode = null;\n\n                if (!Utils.isDefined(nodeOrId)) {\n                    throw \"No Node or identifier for a new Node is given.\";\n                }\n\n                if (Utils.isString(nodeOrId)) {\n                    if (this.hasNode(nodeOrId)) {\n                        return this.getNode(nodeOrId);\n                    }\n                    newNode = new Node(nodeOrId);\n                }\n                else {\n                    if (this.hasNode(nodeOrId)) {\n                        return this.getNode(nodeOrId);\n                    }\n                    // todo: ensure that the param is a Node?\n                    newNode = nodeOrId;\n                }\n\n                if (Utils.isDefined(layoutRect)) {\n                    newNode.bounds(layoutRect);\n                }\n\n                if (Utils.isDefined(owner)) {\n                    newNode.owner = owner;\n                }\n                this._addNode(newNode);\n                return newNode;\n            },\n\n            /**\n             * Adds the given Node and its outgoing links.\n             */\n            addNodeAndOutgoings: function(node) {\n                if (!this.hasNode(node)) {\n                    this._addNode(node);\n                }\n\n                var newLinks = node.outgoing;\n                node.outgoing = [];\n                Utils.forEach(newLinks, function(link) {\n                    this.addExistingLink(link);\n                }, this);\n            },\n\n            /**\n             * Sets the 'index' property on the links and nodes of this graph.\n             */\n            setItemIndices: function() {\n                var i;\n                for (i = 0; i < this.nodes.length; ++i) {\n                    this.nodes[i].index = i;\n                }\n\n                for (i = 0; i < this.links.length; ++i) {\n                    this.links[i].index = i;\n                }\n            },\n\n            /**\n             * Returns a clone of this graph.\n             */\n            clone: function(saveMapping) {\n                var copy = new Graph();\n                var save = Utils.isDefined(saveMapping) && saveMapping === true;\n                if (save) {\n                    copy.nodeMap = new Dictionary();\n                    copy.linkMap = new Dictionary();\n                }\n                // we need a map even if the saveMapping is not set\n                var map = new Dictionary();\n                Utils.forEach(this.nodes, function(nOriginal) {\n                    var nCopy = nOriginal.clone();\n                    map.set(nOriginal, nCopy);\n                    copy._addNode(nCopy);\n\n                    if (save) {\n                        copy.nodeMap.set(nCopy, nOriginal);\n                    }\n                });\n\n                Utils.forEach(this.links, function(linkOriginal) {\n                    if (map.containsKey(linkOriginal.source) && map.containsKey(linkOriginal.target)) {\n                        var linkCopy = copy.addLink(map.get(linkOriginal.source), map.get(linkOriginal.target));\n                        if (save) {\n                            copy.linkMap.set(linkCopy, linkOriginal);\n                        }\n                    }\n                });\n\n                return copy;\n            },\n\n            /**\n             * The parsing allows a quick way to create graphs.\n             *  - [\"n1->n2\", \"n2->n3\"]: creates the three nodes and adds the links\n             *  - [\"n1->n2\", {id: \"QSDF\"}, \"n2->n3\"]: same as previous but also performs a deep extend of the link between n1 and n2 with the given object.\n             */\n            linearize: function(addIds) {\n                return Graph.Utils.linearize(this, addIds);\n            },\n\n            /**\n             * Performs a depth-first traversal starting at the given node.\n             * @param startNode a node or id of a node in this graph\n             * @param action\n             */\n            depthFirstTraversal: function(startNode, action) {\n                if (Utils.isUndefined(startNode)) {\n                    throw \"You need to supply a starting node.\";\n                }\n                if (Utils.isUndefined(action)) {\n                    throw \"You need to supply an action.\";\n                }\n                if (!this.hasNode(startNode)) {\n                    throw \"The given start-node is not part of this graph\";\n                }\n                var foundNode = this.getNode(startNode);// case the given one is an Id\n                var visited = [];\n                this._dftIterator(foundNode, action, visited);\n            },\n\n            _dftIterator: function(node, action, visited) {\n\n                action(node);\n                visited.push(node);\n                var children = node.getChildren();\n                for (var i = 0, len = children.length; i < len; i++) {\n                    var child = children[i];\n                    if (contains(visited, child)) {\n                        continue;\n                    }\n                    this._dftIterator(child, action, visited);\n                }\n            },\n\n            /**\n             * Performs a breadth-first traversal starting at the given node.\n             * @param startNode a node or id of a node in this graph\n             * @param action\n             */\n            breadthFirstTraversal: function(startNode, action) {\n\n                if (Utils.isUndefined(startNode)) {\n                    throw \"You need to supply a starting node.\";\n                }\n                if (Utils.isUndefined(action)) {\n                    throw \"You need to supply an action.\";\n                }\n\n                if (!this.hasNode(startNode)) {\n                    throw \"The given start-node is not part of this graph\";\n                }\n                var foundNode = this.getNode(startNode);// case the given one is an Id\n                var queue = new Queue();\n                var visited = [];\n                queue.enqueue(foundNode);\n\n                while (queue.length > 0) {\n                    var node = queue.dequeue();\n                    action(node);\n                    visited.push(node);\n                    var children = node.getChildren();\n                    for (var i = 0, len = children.length; i < len; i++) {\n                        var child = children[i];\n                        if (contains(visited, child) || contains(queue, child)) {\n                            continue;\n                        }\n                        queue.enqueue(child);\n                    }\n                }\n            },\n\n            /**\n             * This is the classic Tarjan algorithm for strongly connected components.\n             * See e.g. http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm\n             * @param excludeSingleItems Whether isolated nodes should be excluded from the analysis.\n             * @param node The start node from which the analysis starts.\n             * @param indices  Numbers the nodes consecutively in the order in which they are discovered.\n             * @param lowLinks The smallest index of any node known to be reachable from the node, including the node itself\n             * @param connected The current component.\n             * @param stack The bookkeeping stack of things to visit.\n             * @param index The counter of visited nodes used to assign the indices.\n             * @private\n             */\n            _stronglyConnectedComponents: function(excludeSingleItems, node, indices, lowLinks, connected, stack, index) {\n                indices.add(node, index);\n                lowLinks.add(node, index);\n                index++;\n\n                stack.push(node);\n\n                var children = node.getChildren(), next;\n                for (var i = 0, len = children.length; i < len; i++) {\n                    next = children[i];\n                    if (!indices.containsKey(next)) {\n                        this._stronglyConnectedComponents(excludeSingleItems, next, indices, lowLinks, connected, stack, index);\n                        lowLinks.add(node, Math.min(lowLinks.get(node), lowLinks.get(next)));\n                    }\n                    else if (contains(stack, next)) {\n                        lowLinks.add(node, Math.min(lowLinks.get(node), indices.get(next)));\n                    }\n                }\n                // If v is a root node, pop the stack and generate a strong component\n                if (lowLinks.get(node) === indices.get(node)) {\n                    var component = [];\n                    do {\n                        next = stack.pop();\n                        component.push(next);\n                    }\n                    while (next !== node);\n                    if (!excludeSingleItems || (component.length > 1)) {\n                        connected.push(component);\n                    }\n                }\n            },\n\n            /**\n             * Returns the cycles found in this graph.\n             * The returned arrays consist of the nodes which are strongly coupled.\n             * @param excludeSingleItems Whether isolated nodes should be excluded.\n             * @returns {Array} The array of cycles found.\n             */\n            findCycles: function(excludeSingleItems) {\n                if (Utils.isUndefined(excludeSingleItems)) {\n                    excludeSingleItems = true;\n                }\n                var indices = new Dictionary();\n                var lowLinks = new Dictionary();\n                var connected = [];\n                var stack = [];\n                for (var i = 0, len = this.nodes.length; i < len; i++) {\n                    var node = this.nodes[i];\n                    if (indices.containsKey(node)) {\n                        continue;\n                    }\n                    this._stronglyConnectedComponents(excludeSingleItems, node, indices, lowLinks, connected, stack, 0);\n                }\n                return connected;\n            },\n\n            /**\n             * Returns whether this graph is acyclic.\n             * @returns {*}\n             */\n            isAcyclic: function() {\n                return Utils.isEmpty(this.findCycles());\n            },\n\n            /**\n             * Returns whether the given graph is a subgraph of this one.\n             * @param other Another graph instance.\n             */\n            isSubGraph: function(other) {\n                var otherArray = other.linearize();\n                var thisArray = this.linearize();\n                return Utils.all(otherArray, function(s) {\n                    return contains(thisArray, s);\n                });\n            },\n\n            /**\n             *  Makes an acyclic graph from the current (connected) one.\n             * * @returns {Array} The reversed links.\n             */\n            makeAcyclic: function() {\n                // if empty or almost empty\n                if (this.isEmpty() || this.nodes.length <= 1 || this.links.length <= 1) {\n                    return [];\n                }\n                // singular case of just two nodes\n                if (this.nodes.length == 2) {\n                    var result = [];\n                    if (this.links.length > 1) {\n                        var oneLink = this.links[0];\n                        var oneNode = oneLink.source;\n                        for (var i = 0, len = this.links.length; i < len; i++) {\n                            var link = this.links[i];\n                            if (link.source == oneNode) {\n                                continue;\n                            }\n                            var rev = link.reverse();\n                            result.push(rev);\n                        }\n                    }\n                    return result;\n                }\n\n                var copy = this.clone(true); // copy.nodeMap tells you the mapping\n                var N = this.nodes.length;\n\n                var intensityCatalog = new Dictionary();\n\n                /**\n                 * If there are both incoming and outgoing links this will return the flow intensity (out-in).\n                 * Otherwise the node acts as a flow source with N specifying the (equal) intensity.\n                 * @param node\n                 * @returns {number}\n                 */\n                var flowIntensity = function(node) {\n                    if (node.outgoing.length === 0) {\n                        return (2 - N);\n                    }\n                    else if (node.incoming.length === 0) {\n                        return (N - 2);\n                    }\n                    else {\n                        return node.outgoing.length - node.incoming.length;\n                    }\n                };\n\n                /**\n                 * Collects the nodes with the same intensity.\n                 * @param node\n                 * @param intensityCatalog\n                 */\n                var catalogEqualIntensity = function(node, intensityCatalog) {\n                    var intensity = flowIntensity(node, N);\n                    if (!intensityCatalog.containsKey(intensity)) {\n                        intensityCatalog.set(intensity, []);\n                    }\n                    intensityCatalog.get(intensity).push(node);\n                };\n\n                Utils.forEach(copy.nodes, function(v) {\n                    catalogEqualIntensity(v, intensityCatalog);\n                });\n\n                var sourceStack = [];\n                var targetStack = [];\n\n                while (copy.nodes.length > 0) {\n                    var source, target, intensity;\n                    if (intensityCatalog.containsKey(2 - N)) {\n                        var targets = intensityCatalog.get(2 - N); // nodes without outgoings\n                        while (targets.length > 0) {\n                            target = targets.pop();\n                            for (var li = 0; li < target.links.length; li++) {\n                                var targetLink = target.links[li];\n                                source = targetLink.getComplement(target);\n                                intensity = flowIntensity(source, N);\n                                Utils.remove(intensityCatalog.get(intensity), source);\n                                source.removeLink(targetLink);\n                                catalogEqualIntensity(source, intensityCatalog);\n                            }\n                            copy._removeNode(target);\n                            targetStack.unshift(target);\n                        }\n                    }\n\n                    // move sources to sourceStack\n                    if (intensityCatalog.containsKey(N - 2)) {\n                        var sources = intensityCatalog.get(N - 2); // nodes without incomings\n                        while (sources.length > 0) {\n                            source = sources.pop();\n                            for (var si = 0; si < source.links.length; si++) {\n                                var sourceLink = source.links[si];\n                                target = sourceLink.getComplement(source);\n                                intensity = flowIntensity(target, N);\n                                Utils.remove(intensityCatalog.get(intensity), target);\n                                target.removeLink(sourceLink);\n                                catalogEqualIntensity(target, intensityCatalog);\n                            }\n                            sourceStack.push(source);\n                            copy._removeNode(source);\n                        }\n                    }\n\n                    if (copy.nodes.length > 0) {\n                        for (var k = N - 3; k > 2 - N; k--) {\n                            if (intensityCatalog.containsKey(k) &&\n                                intensityCatalog.get(k).length > 0) {\n                                var maxdiff = intensityCatalog.get(k);\n                                var v = maxdiff.pop();\n                                for (var ri = 0; ri < v.links.length; ri++) {\n                                    var ril = v.links[ri];\n                                    var u = ril.getComplement(v);\n                                    intensity = flowIntensity(u, N);\n                                    Utils.remove(intensityCatalog.get(intensity), u);\n                                    u.removeLink(ril);\n                                    catalogEqualIntensity(u, intensityCatalog);\n                                }\n                                sourceStack.push(v);\n                                copy._removeNode(v);\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                sourceStack = sourceStack.concat(targetStack);\n\n                var vertexOrder = new Dictionary();\n                for (var kk = 0; kk < this.nodes.length; kk++) {\n                    vertexOrder.set(copy.nodeMap.get(sourceStack[kk]), kk);\n                }\n\n                var reversedEdges = [];\n                Utils.forEach(this.links, function(link) {\n                    if (vertexOrder.get(link.source) > vertexOrder.get(link.target)) {\n                        link.reverse();\n                        reversedEdges.push(link);\n                    }\n                });\n                return reversedEdges;\n            }\n        });\n\n        /**\n         * A collection of predefined graphs for demo and testing purposes.\n         */\n        Graph.Predefined = {\n            /**\n             * Eight-shapes graph all connected in a cycle.\n             * @returns {*}\n             * @constructor\n             */\n            EightGraph: function() {\n                return Graph.Utils.parse([ \"1->2\", \"2->3\", \"3->4\", \"4->1\", \"3->5\", \"5->6\", \"6->7\", \"7->3\"]);\n            },\n\n            /**\n             * Creates a typical mindmap diagram.\n             * @returns {*}\n             * @constructor\n             */\n            Mindmap: function() {\n                return Graph.Utils.parse([\"0->1\", \"0->2\", \"0->3\", \"0->4\", \"0->5\", \"1->6\", \"1->7\", \"7->8\", \"2->9\", \"9->10\", \"9->11\", \"3->12\",\n                    \"12->13\", \"13->14\", \"4->15\", \"4->16\", \"15->17\", \"15->18\", \"18->19\", \"18->20\", \"14->21\", \"14->22\", \"5->23\", \"23->24\", \"23->25\", \"6->26\"]);\n            },\n\n            /**\n             * Three nodes connected in a cycle.\n             * @returns {*}\n             * @constructor\n             */\n            ThreeGraph: function() {\n                return Graph.Utils.parse([ \"1->2\", \"2->3\", \"3->1\"]);\n            },\n\n            /**\n             * A tree with each node having two children.\n             * @param levels How many levels the binary tree should have.\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            BinaryTree: function(levels) {\n                if (Utils.isUndefined(levels)) {\n                    levels = 5;\n                }\n                return Graph.Utils.createBalancedTree(levels, 2);\n            },\n\n            /**\n             * A linear graph (discrete line segment).\n             * @param length How many segments (the node count is hence (length+1)).\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            Linear: function(length) {\n                if (Utils.isUndefined(length)) {\n                    length = 10;\n                }\n                return Graph.Utils.createBalancedTree(length, 1);\n            },\n\n            /**\n             * A standard tree-graph with the specified levels and children (siblings) count.\n             * Note that for a balanced tree of level N and sibling count s, counting the root as level zero:\n             *  - NodeCount = (1-s^(N+1))/(1-s)]\n             *  - LinkCount = s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            Tree: function(levels, siblingsCount) {\n                return Graph.Utils.createBalancedTree(levels, siblingsCount);\n            },\n\n            /**\n             * Creates a forest.\n             * Note that for a balanced forest of level N, sibling count s and tree count t, counting the root as level zero:\n             *  - NodeCount = t.(1-s^(N+1))/(1-s)]\n             *  - LinkCount = t.s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @param trees The amount of trees the forest should have.\n             * @returns {diagram.Graph}\n             * @constructor\n             */\n            Forest: function(levels, siblingsCount, trees) {\n                return Graph.Utils.createBalancedForest(levels, siblingsCount, trees);\n            },\n\n            /**\n             * A workflow-like graph with cycles.\n             * @returns {*}\n             * @constructor\n             */\n            Workflow: function() {\n                return Graph.Utils.parse(\n                    [\"0->1\", \"1->2\", \"2->3\", \"1->4\", \"4->3\", \"3->5\", \"5->6\", \"6->3\", \"6->7\", \"5->4\"]\n                );\n            },\n\n            /**\n             * A grid graph with the direction of the links avoiding cycles.\n             * Node count: (n+1).(m+1)\n             * Link count: n.(m+1) + m.(n+1)\n             * @param n Horizontal count of grid cells. If zero this will result in a linear graph.\n             * @param m Vertical count of grid cells. If zero this will result in a linear graph.\n             * @constructor\n             */\n            Grid: function(n, m) {\n                var g = new diagram.Graph();\n                if (n <= 0 && m <= 0) {\n                    return g;\n                }\n\n                for (var i = 0; i < n + 1; i++) {\n                    var previous = null;\n                    for (var j = 0; j < m + 1; j++) {\n                        // using x-y coordinates to name the nodes\n                        var node = new Node(i.toString() + \".\" + j.toString());\n                        g.addNode(node);\n                        if (previous) {\n                            g.addLink(previous, node);\n                        }\n                        if (i > 0) {\n                            var left = g.getNode((i - 1).toString() + \".\" + j.toString());\n                            g.addLink(left, node);\n                        }\n                        previous = node;\n                    }\n                }\n                return g;\n            }\n\n        };\n\n        /**\n         * Graph generation and other utilities.\n         */\n        Graph.Utils = {\n            /**\n             * The parsing allows a quick way to create graphs.\n             *  - [\"n1->n2\", \"n2->n3\"]: creates the three nodes and adds the links\n             *  - [\"n1->n2\", {id: \"id177\"}, \"n2->n3\"]: same as previous but also performs a deep extend of the link between n1 and n2 with the given object.\n             */\n            parse: function(graphString) {\n\n                var previousLink, graph = new diagram.Graph(), parts = graphString.slice();\n                for (var i = 0, len = parts.length; i < len; i++) {\n                    var part = parts[i];\n                    if (Utils.isString(part)) // link spec\n                    {\n                        if (part.indexOf(\"->\") < 0) {\n                            throw \"The link should be specified as 'a->b'.\";\n                        }\n                        var p = part.split(\"->\");\n                        if (p.length != 2) {\n                            throw \"The link should be specified as 'a->b'.\";\n                        }\n                        previousLink = new Link(p[0], p[1]);\n                        graph.addLink(previousLink);\n                    }\n                    if (Utils.isObject(part)) {\n                        if (!previousLink) {\n                            throw \"Specification found before Link definition.\";\n                        }\n                        kendo.deepExtend(previousLink, part);\n                    }\n                }\n                return graph;\n            },\n\n            /**\n             * Returns a linearized representation of the given Graph.\n             * See also the Graph.Utils.parse method for the inverse operation.\n             */\n            linearize: function(graph, addIds) {\n                if (Utils.isUndefined(graph)) {\n                    throw \"Expected an instance of a Graph object in slot one.\";\n                }\n                if (Utils.isUndefined(addIds)) {\n                    addIds = false;\n                }\n                var lin = [];\n                for (var i = 0, len = graph.links.length; i < len; i++) {\n                    var link = graph.links[i];\n                    lin.push(link.source.id + \"->\" + link.target.id);\n                    if (addIds) {\n                        lin.push({ id: link.id });\n                    }\n                }\n                return lin;\n            },\n\n            /**\n             * The method used by the diagram creation to instantiate a shape.\n             * @param kendoDiagram The Kendo diagram where the diagram will be created.\n             * @param p The position at which to place the shape.\n             * @param shapeDefaults Optional Shape options.\n             * @param id Optional identifier of the shape.\n             * @returns {*}\n             * @private\n             */\n            _addShape: function(kendoDiagram, p, id, shapeDefaults) {\n                if (Utils.isUndefined(p)) {\n                    p = new diagram.Point(0, 0);\n                }\n\n                if (Utils.isUndefined(id)) {\n                    id = randomId();\n                }\n\n                shapeDefaults = kendo.deepExtend({\n                    width: 20,\n                    height: 20,\n                    id: id,\n                    radius: 10,\n                    fill: \"#778899\",\n                    data: \"circle\",\n                    undoable: false,\n                    x: p.x,\n                    y: p.y\n                }, shapeDefaults);\n\n                return kendoDiagram.addShape(shapeDefaults);\n            },\n            /**\n             * The method used by the diagram creation to instantiate a connection.\n             * @param diagram he Kendo diagram where the diagram will be created.\n             * @param from The source shape.\n             * @param to The target shape.\n             * @param options Optional Connection options.\n             * @returns {*}\n             * @private\n             */\n            _addConnection: function(diagram, from, to, options) {\n                return diagram.connect(from, to, options);\n            },\n\n            /**\n             * Creates a diagram from the given Graph.\n             * @param diagram The Kendo diagram where the diagram will be created.\n             * @param graph The graph structure defining the diagram.\n             */\n            createDiagramFromGraph: function(diagram, graph, doLayout, randomSize) {\n\n                if (Utils.isUndefined(diagram)) {\n                    throw \"The diagram surface is undefined.\";\n                }\n                if (Utils.isUndefined(graph)) {\n                    throw \"No graph specification defined.\";\n                }\n                if (Utils.isUndefined(doLayout)) {\n                    doLayout = true;\n                }\n                if (Utils.isUndefined(randomSize)) {\n                    randomSize = false;\n                }\n\n                var width = diagram.element.clientWidth || 200;\n                var height = diagram.element.clientHeight || 200;\n                var map = [], node, shape;\n                for (var i = 0, len = graph.nodes.length; i < len; i++) {\n                    node = graph.nodes[i];\n                    var p = node.position;\n                    if (Utils.isUndefined(p)) {\n                        if (Utils.isDefined(node.x) && Utils.isDefined(node.y)) {\n                            p = new Point(node.x, node.y);\n                        }\n                        else {\n                            p = new Point(Utils.randomInteger(10, width - 20), Utils.randomInteger(10, height - 20));\n                        }\n                    }\n                    var opt = {};\n\n                    if (node.id === \"0\") {\n                        /* kendo.deepExtend(opt,\n                         {\n                         fill: \"Orange\",\n                         data: 'circle',\n                         width: 100,\n                         height: 100,\n                         center: new Point(50, 50)\n                         });*/\n                    }\n                    else if (randomSize) {\n                        kendo.deepExtend(opt, {\n                            width: Math.random() * 150 + 20,\n                            height: Math.random() * 80 + 50,\n                            data: 'rectangle',\n                            fill: {\n                                color: \"#778899\"\n                            }\n                        });\n                    }\n\n                    shape = this._addShape(diagram, p, node.id, opt);\n                    //shape.content(node.id);\n\n                    var bounds = shape.bounds();\n                    if (Utils.isDefined(bounds)) {\n                        node.x = bounds.x;\n                        node.y = bounds.y;\n                        node.width = bounds.width;\n                        node.height = bounds.height;\n                    }\n                    map[node.id] = shape;\n                }\n                for (var gli = 0; gli < graph.links.length; gli++) {\n                    var link = graph.links[gli];\n                    var sourceShape = map[link.source.id];\n                    if (Utils.isUndefined(sourceShape)) {\n                        continue;\n                    }\n                    var targetShape = map[link.target.id];\n                    if (Utils.isUndefined(targetShape)) {\n                        continue;\n                    }\n                    this._addConnection(diagram, sourceShape, targetShape, { id: link.id });\n\n                }\n                if (doLayout) {\n                    var l = new diagram.SpringLayout(diagram);\n                    l.layoutGraph(graph, { limitToView: false });\n                    for (var shi = 0; shi < graph.nodes.length; shi++) {\n                        node = graph.nodes[shi];\n                        shape = map[node.id];\n                        shape.bounds(new Rect(node.x, node.y, node.width, node.height));\n                    }\n                }\n            },\n\n            /**\n             * Creates a balanced tree with the specified number of levels and siblings count.\n             * Note that for a balanced tree of level N and sibling count s, counting the root as level zero:\n             *  - NodeCount = (1-s^(N+1))/(1-s)]\n             *  - LinkCount = s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @returns {diagram.Graph}\n             */\n            createBalancedTree: function(levels, siblingsCount) {\n                if (Utils.isUndefined(levels)) {\n                    levels = 3;\n                }\n                if (Utils.isUndefined(siblingsCount)) {\n                    siblingsCount = 3;\n                }\n\n                var g = new diagram.Graph(), counter = -1, lastAdded = [], news;\n                if (levels <= 0 || siblingsCount <= 0) {\n                    return g;\n                }\n                var root = new Node((++counter).toString());\n                g.addNode(root);\n                g.root = root;\n                lastAdded.push(root);\n                for (var i = 0; i < levels; i++) {\n                    news = [];\n                    for (var j = 0; j < lastAdded.length; j++) {\n                        var parent = lastAdded[j];\n                        for (var k = 0; k < siblingsCount; k++) {\n                            var item = new Node((++counter).toString());\n                            g.addLink(parent, item);\n                            news.push(item);\n                        }\n                    }\n                    lastAdded = news;\n                }\n                return g;\n            },\n\n            /**\n             * Creates a balanced tree with the specified number of levels and siblings count.\n             * Note that for a balanced forest of level N, sibling count s and tree count t, counting the root as level zero:\n             *  - NodeCount = t.(1-s^(N+1))/(1-s)]\n             *  - LinkCount = t.s.(1-s^N)/(1-s)\n             * @param levels How many levels the tree should have.\n             * @param siblingsCount How many siblings each level should have.\n             * @returns {diagram.Graph}\n             * @param treeCount The number of trees the forest should have.\n             */\n            createBalancedForest: function(levels, siblingsCount, treeCount) {\n                if (Utils.isUndefined(levels)) {\n                    levels = 3;\n                }\n                if (Utils.isUndefined(siblingsCount)) {\n                    siblingsCount = 3;\n                }\n                if (Utils.isUndefined(treeCount)) {\n                    treeCount = 5;\n                }\n                var g = new diagram.Graph(), counter = -1, lastAdded = [], news;\n                if (levels <= 0 || siblingsCount <= 0 || treeCount <= 0) {\n                    return g;\n                }\n\n                for (var t = 0; t < treeCount; t++) {\n                    var root = new Node((++counter).toString());\n                    g.addNode(root);\n                    lastAdded = [root];\n                    for (var i = 0; i < levels; i++) {\n                        news = [];\n                        for (var j = 0; j < lastAdded.length; j++) {\n                            var parent = lastAdded[j];\n                            for (var k = 0; k < siblingsCount; k++) {\n                                var item = new Node((++counter).toString());\n                                g.addLink(parent, item);\n                                news.push(item);\n                            }\n                        }\n                        lastAdded = news;\n                    }\n                }\n                return g;\n            },\n\n            /**\n             * Creates a random graph (uniform distribution) with the specified amount of nodes.\n             * @param nodeCount The amount of nodes the random graph should have.\n             * @param maxIncidence The maximum allowed degree of the nodes.\n             * @param isTree Whether the return graph should be a tree (default: false).\n             * @returns {diagram.Graph}\n             */\n            createRandomConnectedGraph: function(nodeCount, maxIncidence, isTree) {\n\n                /* Swa's Mathematica export of random Bernoulli graphs\n                 gr[n_,p_]:=Module[{g=RandomGraph[BernoulliGraphDistribution[n,p],VertexLabels->\"Name\",DirectedEdges->True]},\n                 While[Not[ConnectedGraphQ[g]],g=RandomGraph[BernoulliGraphDistribution[n,p],VertexLabels->\"Name\",DirectedEdges->True]];g];\n                 project[a_]:=(\"\\\"\"<>ToString[Part[#,1]]<>\"->\"<>ToString[Part[#,2]]<>\"\\\"\")&     @ a;\n                 export[g_]:=project/@ EdgeList[g]\n                 g = gr[12,.1]\n                 export [g]\n                 */\n\n                if (Utils.isUndefined(nodeCount)) {\n                    nodeCount = 40;\n                }\n                if (Utils.isUndefined(maxIncidence)) {\n                    maxIncidence = 4;\n                }\n                if (Utils.isUndefined(isTree)) {\n                    isTree = false;\n                }\n\n                var g = new diagram.Graph(), counter = -1;\n                if (nodeCount <= 0) {\n                    return g;\n                }\n\n                var root = new Node((++counter).toString());\n                g.addNode(root);\n                if (nodeCount === 1) {\n                    return g;\n                }\n                if (nodeCount > 1) {\n                    // random tree\n                    for (var i = 1; i < nodeCount; i++) {\n                        var poolNode = g.takeRandomNode([], maxIncidence);\n                        if (!poolNode) {\n                            //failed to find one so the graph will have less nodes than specified\n                            break;\n                        }\n                        var newNode = g.addNode(i.toString());\n                        g.addLink(poolNode, newNode);\n                    }\n                    if (!isTree && nodeCount > 1) {\n                        var randomAdditions = Utils.randomInteger(1, nodeCount);\n                        for (var ri = 0; ri < randomAdditions; ri++) {\n                            var n1 = g.takeRandomNode([], maxIncidence);\n                            var n2 = g.takeRandomNode([], maxIncidence);\n                            if (n1 && n2 && !g.areConnected(n1, n2)) {\n                                g.addLink(n1, n2);\n                            }\n                        }\n                    }\n                    return g;\n                }\n            },\n\n            /**\n             * Generates a random diagram.\n             * @param diagram The host diagram.\n             * @param shapeCount The number of shapes the random diagram should contain.\n             * @param maxIncidence The maximum degree the shapes can have.\n             * @param isTree Whether the generated diagram should be a tree\n             * @param layoutType The optional layout type to apply after the diagram is generated.\n             */\n            randomDiagram: function(diagram, shapeCount, maxIncidence, isTree, randomSize) {\n                var g = kendo.dataviz.diagram.Graph.Utils.createRandomConnectedGraph(shapeCount, maxIncidence, isTree);\n                Graph.Utils.createDiagramFromGraph(diagram, g, false, randomSize);\n            }\n        };\n\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n\n            Point: Point,\n            Intersect: Intersect,\n            Geometry: Geometry,\n            Rect: Rect,\n            Size: Size,\n            RectAlign: RectAlign,\n            Matrix: Matrix,\n            MatrixVector: MatrixVector,\n            normalVariable: normalVariable,\n            randomId: randomId,\n            Dictionary: Dictionary,\n            HashTable: HashTable,\n            Queue: Queue,\n            Set: Set,\n            Node: Node,\n            Link: Link,\n            Graph: Graph,\n            PathDefiner: PathDefiner\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        // Imports ================================================================\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram,\n            Class = kendo.Class,\n            deepExtend = kendo.deepExtend,\n            Point = diagram.Point,\n            Rect = diagram.Rect,\n            Matrix = diagram.Matrix,\n            Utils = diagram.Utils,\n            isNumber = Utils.isNumber,\n            isString = Utils.isString,\n            MatrixVector = diagram.MatrixVector,\n\n            g = kendo.geometry,\n            d = kendo.drawing,\n\n            defined = d.util.defined,\n\n            inArray = $.inArray;\n\n        // Constants ==============================================================\n        var TRANSPARENT = \"transparent\",\n            Markers = {\n                none: \"none\",\n                arrowStart: \"ArrowStart\",\n                filledCircle: \"FilledCircle\",\n                arrowEnd: \"ArrowEnd\"\n            },\n            FULL_CIRCLE_ANGLE = 360,\n            START = \"start\",\n            END = \"end\",\n            WIDTH = \"width\",\n            HEIGHT = \"height\",\n            X = \"x\",\n            Y = \"y\";\n\n        diagram.Markers = Markers;\n\n        function diffNumericOptions(options, fields) {\n            var elementOptions = this.options;\n            var hasChanges = false;\n            var value, field;\n            for (var i = 0; i < fields.length; i++) {\n                field = fields[i];\n                value = options[field];\n                if (isNumber(value) && elementOptions[field] !== value) {\n                    elementOptions[field] = value;\n                    hasChanges = true;\n                }\n            }\n\n            return hasChanges;\n        }\n\n        var Scale = Class.extend({\n            init: function(x, y) {\n                this.x = x;\n                this.y = y;\n            },\n            toMatrix: function() {\n                return Matrix.scaling(this.x, this.y);\n            },\n            toString: function() {\n                return kendo.format(\"scale({0},{1})\", this.x, this.y);\n            },\n            invert: function() {\n                return new Scale(1 / this.x, 1 / this.y);\n            }\n        });\n\n        var Translation = Class.extend({\n            init: function(x, y) {\n                this.x = x;\n                this.y = y;\n            },\n            toMatrixVector: function() {\n                return new MatrixVector(0, 0, 0, 0, this.x, this.y);\n            },\n            toMatrix: function() {\n                return Matrix.translation(this.x, this.y);\n            },\n            toString: function() {\n                return kendo.format(\"translate({0},{1})\", this.x, this.y);\n            },\n            plus: function(delta) {\n                this.x += delta.x;\n                this.y += delta.y;\n            },\n            times: function(factor) {\n                this.x *= factor;\n                this.y *= factor;\n            },\n            length: function() {\n                return Math.sqrt(this.x * this.x + this.y * this.y);\n            },\n            normalize: function() {\n                if (this.Length === 0) {\n                    return;\n                }\n                this.times(1 / this.length());\n            },\n            invert: function() {\n                return new Translation(-this.x, -this.y);\n            }\n        });\n\n        var Rotation = Class.extend({\n            init: function(angle, x, y) {\n                this.x = x || 0;\n                this.y = y || 0;\n                this.angle = angle;\n            },\n            toString: function() {\n                if (this.x && this.y) {\n                    return kendo.format(\"rotate({0},{1},{2})\", this.angle, this.x, this.y);\n                } else {\n                    return kendo.format(\"rotate({0})\", this.angle);\n                }\n            },\n            toMatrix: function() {\n                return Matrix.rotation(this.angle, this.x, this.y); // T*R*T^-1\n            },\n            center: function() {\n                return new Point(this.x, this.y);\n            },\n            invert: function() {\n                return new Rotation(FULL_CIRCLE_ANGLE - this.angle, this.x, this.y);\n            }\n        });\n\n        Rotation.ZERO = new Rotation(0);\n\n        Rotation.create = function(rotation) {\n            return new Rotation(rotation.angle, rotation.x, rotation.y);\n        };\n\n        Rotation.parse = function(str) {\n            var values = str.slice(1, str.length - 1).split(\",\"),\n                angle = values[0],\n                x = values[1],\n                y = values[2];\n            var rotation = new Rotation(angle, x, y);\n            return rotation;\n        };\n\n        var CompositeTransform = Class.extend({\n            init: function(x, y, scaleX, scaleY, angle, center) {\n                this.translate = new Translation(x, y);\n                if (scaleX !== undefined$1 && scaleY !== undefined$1) {\n                    this.scale = new Scale(scaleX, scaleY);\n                }\n                if (angle !== undefined$1) {\n                    this.rotate = center ? new Rotation(angle, center.x, center.y) : new Rotation(angle);\n                }\n            },\n            toString: function() {\n                var toString = function(transform) {\n                    return transform ? transform.toString() : \"\";\n                };\n\n                return toString(this.translate) +\n                    toString(this.rotate) +\n                    toString(this.scale);\n            },\n\n            render: function(visual) {\n                visual._transform = this;\n                visual._renderTransform();\n            },\n\n            toMatrix: function() {\n                var m = Matrix.unit();\n\n                if (this.translate) {\n                    m = m.times(this.translate.toMatrix());\n                }\n                if (this.rotate) {\n                    m = m.times(this.rotate.toMatrix());\n                }\n                if (this.scale) {\n                    m = m.times(this.scale.toMatrix());\n                }\n                return m;\n            },\n            invert: function() {\n                var rotate = this.rotate ? this.rotate.invert() : undefined$1,\n                    rotateMatrix = rotate ? rotate.toMatrix() : Matrix.unit(),\n                    scale = this.scale ? this.scale.invert() : undefined$1,\n                    scaleMatrix = scale ? scale.toMatrix() : Matrix.unit();\n\n                var translatePoint = new Point(-this.translate.x, -this.translate.y);\n                translatePoint = rotateMatrix.times(scaleMatrix).apply(translatePoint);\n                var translate = new Translation(translatePoint.x, translatePoint.y);\n\n                var transform = new CompositeTransform();\n                transform.translate = translate;\n                transform.rotate = rotate;\n                transform.scale = scale;\n\n                return transform;\n            }\n        });\n\n        var AutoSizeableMixin = {\n            _setScale: function() {\n                var options = this.options;\n                var originWidth = this._originWidth;\n                var originHeight = this._originHeight;\n                var scaleX = options.width / originWidth;\n                var scaleY = options.height / originHeight;\n\n                if (!isNumber(scaleX)) {\n                    scaleX = 1;\n                }\n                if (!isNumber(scaleY)) {\n                    scaleY = 1;\n                }\n\n                this._transform.scale = new Scale(scaleX, scaleY);\n            },\n\n            _setTranslate: function() {\n                var options = this.options;\n                var x = options.x || 0;\n                var y = options.y || 0;\n                this._transform.translate = new Translation(x, y);\n            },\n\n            _initSize: function() {\n                var options = this.options;\n                var transform = false;\n                if (options.autoSize !== false && (defined(options.width) || defined(options.height))) {\n                    this._measure(true);\n                    this._setScale();\n                    transform = true;\n                }\n\n                if (defined(options.x) || defined(options.y)) {\n                    this._setTranslate();\n                    transform = true;\n                }\n\n                if (transform) {\n                    this._renderTransform();\n                }\n            },\n\n            _updateSize: function(options) {\n                var update = false;\n\n                if (this.options.autoSize !== false && this._diffNumericOptions(options, [WIDTH, HEIGHT])) {\n                    update = true;\n                    this._measure(true);\n                    this._setScale();\n                }\n\n                if (this._diffNumericOptions(options, [X, Y])) {\n                    update = true;\n                    this._setTranslate();\n                }\n\n                if (update) {\n                    this._renderTransform();\n                }\n\n                return update;\n            }\n        };\n\n        var Element = Class.extend({\n            init: function(options) {\n                var element = this;\n                element.options = deepExtend({}, element.options, options);\n                element.id = element.options.id;\n                element._originSize = Rect.empty();\n                element._transform = new CompositeTransform();\n            },\n\n            visible: function(value) {\n                return this.drawingContainer().visible(value);\n            },\n\n            redraw: function(options) {\n                if (options && options.id) {\n                     this.id = options.id;\n                }\n            },\n\n            position: function(x, y) {\n                var options = this.options;\n                if (!defined(x)) {\n                   return new Point(options.x, options.y);\n                }\n\n                if (defined(y)) {\n                    options.x = x;\n                    options.y = y;\n                } else if (x instanceof Point) {\n                    options.x = x.x;\n                    options.y = x.y;\n                }\n\n                this._transform.translate = new Translation(options.x, options.y);\n                this._renderTransform();\n            },\n\n            rotate: function(angle, center) {\n                if (defined(angle)) {\n                    this._transform.rotate = new Rotation(angle, center.x, center.y);\n                    this._renderTransform();\n                }\n                return this._transform.rotate || Rotation.ZERO;\n            },\n\n            drawingContainer: function() {\n                return this.drawingElement;\n            },\n\n            _renderTransform: function() {\n                var matrix = this._transform.toMatrix();\n                this.drawingContainer().transform(new g.Matrix(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f));\n            },\n\n            _hover: function() {},\n\n            _diffNumericOptions: diffNumericOptions,\n\n            _measure: function(force) {\n                var rect;\n                if (!this._measured || force) {\n                    var box = this._boundingBox() || new g.Rect();\n                    var startPoint = box.topLeft();\n                    rect = new Rect(startPoint.x, startPoint.y, box.width(), box.height());\n                    this._originSize = rect;\n                    this._originWidth = rect.width;\n                    this._originHeight = rect.height;\n                    this._measured = true;\n                } else {\n                    rect = this._originSize;\n                }\n                return rect;\n            },\n\n            _boundingBox: function() {\n                return this.drawingElement.rawBBox();\n            }\n        });\n\n        var VisualBase = Element.extend({\n            init: function(options) {\n                Element.fn.init.call(this, options);\n\n                options = this.options;\n                options.fill = normalizeDrawingOptions(options.fill);\n                options.stroke = normalizeDrawingOptions(options.stroke);\n            },\n\n            options: {\n                stroke: {\n                    color: \"gray\",\n                    width: 1\n                },\n                fill: {\n                    color: TRANSPARENT\n                }\n            },\n\n            fill: function(color, opacity) {\n                this._fill({\n                    color: getColor(color),\n                    opacity: opacity\n                });\n            },\n\n            stroke: function(color, width, opacity) {\n                this._stroke({\n                    color: getColor(color),\n                    width: width,\n                    opacity: opacity\n                });\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var stroke = options.stroke;\n                    var fill = options.fill;\n                    if (stroke) {\n                        this._stroke(normalizeDrawingOptions(stroke));\n                    }\n                    if (fill) {\n                        this._fill(normalizeDrawingOptions(fill));\n                    }\n\n                    Element.fn.redraw.call(this, options);\n                }\n            },\n\n            _hover: function(show) {\n                var drawingElement = this.drawingElement;\n                var options = this.options;\n                var hover = options.hover;\n\n                if (hover && hover.fill) {\n                    var fill = show ? normalizeDrawingOptions(hover.fill) : options.fill;\n                    drawingElement.fill(fill.color, fill.opacity);\n                }\n            },\n\n            _stroke: function(strokeOptions) {\n                var options = this.options;\n                deepExtend(options, {\n                    stroke: strokeOptions\n                });\n\n                strokeOptions = options.stroke;\n\n                var stroke = null;\n                if (strokeOptions.width > 0) {\n                    stroke = {\n                        color: strokeOptions.color,\n                        width: strokeOptions.width,\n                        opacity: strokeOptions.opacity,\n                        dashType: strokeOptions.dashType\n                    };\n                }\n\n                this.drawingElement.options.set(\"stroke\", stroke);\n            },\n\n            _fill: function(fillOptions) {\n                var options = this.options;\n                deepExtend(options, {\n                    fill: fillOptions || {}\n                });\n                var fill = options.fill;\n\n                if (fill.gradient) {\n                    var gradient = fill.gradient;\n                    var GradientClass = (gradient.type === \"radial\" ? d.RadialGradient : d.LinearGradient);\n                    this.drawingElement.fill(new GradientClass(gradient));\n                } else {\n                    this.drawingElement.fill(fill.color, fill.opacity);\n                }\n            }\n        });\n\n        var TextBlock = VisualBase.extend({\n            init: function(options) {\n                options = this._textColor(options);\n                VisualBase.fn.init.call(this, options);\n\n                this._font();\n                this._initText();\n                this._initSize();\n            },\n\n            options: {\n                fontSize: 15,\n                fontFamily: \"sans-serif\",\n                stroke: {\n                    width: 0\n                },\n                fill: {\n                    color: \"black\"\n                },\n                autoSize: true\n            },\n\n            _initText: function() {\n                var options = this.options;\n\n                this.drawingElement = new d.Text(defined(options.text) ? options.text : \"\", new g.Point(), {\n                    font: options.font\n                });\n\n                this._fill();\n                this._stroke();\n            },\n\n            _textColor: function(options) {\n                if (options && options.color) {\n                    options = deepExtend({}, options, {\n                        fill: {\n                            color: options.color\n                        }\n                    });\n                }\n                return options;\n            },\n\n            _font: function() {\n                var options = this.options;\n                if (options.fontFamily && defined(options.fontSize)) {\n                    var fontOptions = [];\n\n                    if (options.fontStyle) {\n                        fontOptions.push(options.fontStyle);\n                    }\n\n                    if (options.fontWeight) {\n                        fontOptions.push(options.fontWeight);\n                    }\n\n                    fontOptions.push(options.fontSize + (isNumber(options.fontSize) ? \"px\" : \"\"));\n                    fontOptions.push(options.fontFamily);\n\n                    options.font = fontOptions.join(\" \");\n                } else {\n                    delete options.font;\n                }\n            },\n\n            content: function(text) {\n                return this.drawingElement.content(text);\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var sizeChanged = false;\n                    var textOptions = this.options;\n\n                    options = this._textColor(options);\n\n                    VisualBase.fn.redraw.call(this, options);\n\n                    if (options.fontFamily || defined(options.fontSize) || options.fontStyle || options.fontWeight) {\n                        deepExtend(textOptions, {\n                            fontFamily: options.fontFamily,\n                            fontSize: options.fontSize,\n                            fontStyle: options.fontStyle,\n                            fontWeight: options.fontWeight\n                        });\n                        this._font();\n                        this.drawingElement.options.set(\"font\", textOptions.font);\n                        sizeChanged = true;\n                    }\n\n                    if (options.text) {\n                        this.content(options.text);\n                        sizeChanged = true;\n                    }\n\n                    if (!this._updateSize(options) && sizeChanged) {\n                        this._initSize();\n                    }\n                }\n            }\n        });\n\n        deepExtend(TextBlock.fn, AutoSizeableMixin);\n\n        var Rectangle = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this._initPath();\n                this._setPosition();\n            },\n\n            _setPosition: function() {\n                var options = this.options;\n                var x = options.x;\n                var y = options.y;\n                if (defined(x) || defined(y)) {\n                    this.position(x || 0, y || 0);\n                }\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    VisualBase.fn.redraw.call(this, options);\n                    if (this._diffNumericOptions(options, [WIDTH, HEIGHT])) {\n                        this._drawPath();\n                    }\n                    if (this._diffNumericOptions(options, [X, Y])) {\n                        this._setPosition();\n                    }\n                }\n            },\n\n            _initPath: function() {\n                var options = this.options;\n                this.drawingElement = new d.Path({\n                    stroke: options.stroke,\n                    closed: true\n                });\n\n                this._fill();\n                this._drawPath();\n            },\n\n            _drawPath: function() {\n                var drawingElement = this.drawingElement;\n                var sizeOptions = sizeOptionsOrDefault(this.options);\n                var width = sizeOptions.width;\n                var height = sizeOptions.height;\n\n                drawingElement.segments.elements([\n                    createSegment(0, 0),\n                    createSegment(width, 0),\n                    createSegment(width, height),\n                    createSegment(0, height)\n                ]);\n            }\n        });\n\n        var MarkerBase = VisualBase.extend({\n            init: function(options) {\n               VisualBase.fn.init.call(this, options);\n               var anchor = this.options.anchor;\n               this.anchor = new g.Point(anchor.x, anchor.y);\n               this.createElement();\n            },\n\n            options: {\n               stroke: {\n                    color: TRANSPARENT,\n                    width: 0\n               },\n               fill: {\n                    color: \"black\"\n               }\n            },\n\n            _transformToPath: function(point, path) {\n                var transform = path.transform();\n                if (point && transform) {\n                    point = point.transformCopy(transform);\n                }\n                return point;\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    if (options.position) {\n                        this.options.position = options.position;\n                    }\n\n                    VisualBase.fn.redraw.call(this, options);\n                }\n            }\n        });\n\n        var CircleMarker = MarkerBase.extend({\n            options: {\n                radius: 4,\n                anchor: {\n                    x: 0,\n                    y: 0\n                }\n            },\n\n            createElement: function() {\n                var options = this.options;\n                this.drawingElement = new d.Circle(new g.Circle(this.anchor, options.radius), {\n                    fill: options.fill,\n                    stroke: options.stroke\n                });\n            },\n\n            positionMarker: function(path) {\n                var options = this.options;\n                var position = options.position;\n                var segments = path.segments;\n                var targetSegment;\n                var point;\n\n                if (position == START) {\n                    targetSegment = segments[0];\n                } else {\n                    targetSegment = segments[segments.length - 1];\n                }\n                if (targetSegment) {\n                    point = this._transformToPath(targetSegment.anchor(), path);\n                    this.drawingElement.transform(g.transform().translate(point.x, point.y));\n                }\n            }\n        });\n\n        var ArrowMarker = MarkerBase.extend({\n            options: {\n                path: \"M 0 0 L 10 5 L 0 10 L 3 5 z\" ,\n                anchor: {\n                    x: 10,\n                    y: 5\n                }\n            },\n\n            createElement: function() {\n                var options = this.options;\n                this.drawingElement = d.Path.parse(options.path, {\n                    fill: options.fill,\n                    stroke: options.stroke\n                });\n            },\n\n            positionMarker: function(path) {\n                var points = this._linePoints(path);\n                var start = points.start;\n                var end = points.end;\n                var transform = g.transform();\n                if (start) {\n                    transform.rotate(lineAngle(start, end), end);\n                }\n\n                if (end) {\n                    var anchor = this.anchor;\n                    var translate = end.clone().translate(-anchor.x, -anchor.y);\n                    transform.translate(translate.x, translate.y);\n                }\n                this.drawingElement.transform(transform);\n            },\n\n            _linePoints: function(path) {\n                var options = this.options;\n                var segments = path.segments;\n                var startPoint, endPoint, targetSegment;\n                if (options.position == START) {\n                    targetSegment = segments[0];\n                    if (targetSegment) {\n                        endPoint = targetSegment.anchor();\n                        startPoint = targetSegment.controlOut();\n                        var nextSegment = segments[1];\n                        if (!startPoint && nextSegment) {\n                            startPoint = nextSegment.anchor();\n                        }\n                    }\n                } else {\n                    targetSegment = segments[segments.length - 1];\n                    if (targetSegment) {\n                        endPoint = targetSegment.anchor();\n                        startPoint = targetSegment.controlIn();\n                        var prevSegment = segments[segments.length - 2];\n                        if (!startPoint && prevSegment) {\n                            startPoint = prevSegment.anchor();\n                        }\n                    }\n                }\n                if (endPoint) {\n                    return {\n                        start: this._transformToPath(startPoint, path),\n                        end: this._transformToPath(endPoint, path)\n                    };\n                }\n            }\n        });\n\n        var MarkerPathMixin = {\n            _getPath: function(position) {\n                var path = this.drawingElement;\n                if (path instanceof d.MultiPath) {\n                    if (position == START) {\n                        path = path.paths[0];\n                    } else {\n                        path = path.paths[path.paths.length - 1];\n                    }\n                }\n                if (path && path.segments.length) {\n                    return path;\n                }\n            },\n\n            _normalizeMarkerOptions: function(options) {\n                var startCap = options.startCap;\n                var endCap = options.endCap;\n\n                if (isString(startCap)) {\n                    options.startCap = {\n                        type: startCap\n                    };\n                }\n\n                if (isString(endCap)) {\n                    options.endCap = {\n                        type: endCap\n                    };\n                }\n            },\n\n            _removeMarker: function(position) {\n                var marker = this._markers[position];\n                if (marker) {\n                    this.drawingContainer().remove(marker.drawingElement);\n                    delete this._markers[position];\n                }\n            },\n\n            _createMarkers: function() {\n                var options = this.options;\n                this._normalizeMarkerOptions(options);\n\n                this._markers = {};\n                this._markers[START] = this._createMarker(options.startCap, START);\n                this._markers[END] = this._createMarker(options.endCap, END);\n            },\n\n            _createMarker: function(options, position) {\n                var type = (options || {}).type;\n                var path = this._getPath(position);\n                var markerType, marker;\n                if (!path) {\n                    this._removeMarker(position);\n                    return;\n                }\n\n                if (type == Markers.filledCircle) {\n                    markerType = CircleMarker;\n                } else if (type == Markers.arrowStart || type == Markers.arrowEnd) {\n                    markerType = ArrowMarker;\n                } else {\n                    this._removeMarker(position);\n                }\n                if (markerType) {\n                    marker = new markerType(deepExtend({}, options, {\n                        position: position\n                    }));\n                    marker.positionMarker(path);\n                    this.drawingContainer().append(marker.drawingElement);\n\n                    return marker;\n                }\n            },\n\n            _positionMarker: function(position) {\n                var marker = this._markers[position];\n\n                if (marker) {\n                    var path = this._getPath(position);\n                    if (path) {\n                        marker.positionMarker(path);\n                    } else {\n                        this._removeMarker(position);\n                    }\n                }\n            },\n\n            _capMap: {\n                start: \"startCap\",\n                end: \"endCap\"\n            },\n\n            _redrawMarker: function(pathChange, position, options) {\n                this._normalizeMarkerOptions(options);\n\n                var pathOptions = this.options;\n                var cap = this._capMap[position];\n                var pathCapType = (pathOptions[cap] || {}).type;\n                var optionsCap = options[cap];\n                var created = false;\n                if (optionsCap) {\n                    pathOptions[cap] = deepExtend({}, pathOptions[cap], optionsCap);\n                    if (optionsCap.type && pathCapType != optionsCap.type) {\n                        this._removeMarker(position);\n                        this._markers[position] = this._createMarker(pathOptions[cap], position);\n                        created = true;\n                    } else if (this._markers[position]) {\n                       this._markers[position].redraw(optionsCap);\n                    }\n                } else if (pathChange && !this._markers[position] && pathOptions[cap]) {\n                    this._markers[position] = this._createMarker(pathOptions[cap], position);\n                    created = true;\n                }\n                return created;\n            },\n\n            _redrawMarkers: function(pathChange, options) {\n                if (!this._redrawMarker(pathChange, START, options) && pathChange) {\n                    this._positionMarker(START);\n                }\n                if (!this._redrawMarker(pathChange, END, options) && pathChange) {\n                    this._positionMarker(END);\n                }\n            }\n        };\n\n        var Path = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this.container = new d.Group();\n                this._createElements();\n                this._initSize();\n            },\n\n            options: {\n                autoSize: true\n            },\n\n            drawingContainer: function() {\n                return this.container;\n            },\n\n            data: function(value) {\n                var options = this.options;\n                if (value) {\n                    if (options.data != value) {\n                       options.data = value;\n                       this._setData(value);\n                       this._initSize();\n                       this._redrawMarkers(true, {});\n                    }\n                } else {\n                    return options.data;\n                }\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    VisualBase.fn.redraw.call(this, options);\n\n                    var pathOptions = this.options;\n                    var data = options.data;\n\n                    if (defined(data) && pathOptions.data != data) {\n                        pathOptions.data = data;\n                        this._setData(data);\n                        if (!this._updateSize(options)) {\n                            this._initSize();\n                        }\n                        this._redrawMarkers(true, options);\n                    } else {\n                        this._updateSize(options);\n                        this._redrawMarkers(false, options);\n                    }\n                }\n            },\n\n            _createElements: function() {\n                var options = this.options;\n\n                this.drawingElement = d.Path.parse(options.data || \"\", {\n                    stroke: options.stroke\n                });\n\n                this._fill();\n                this.container.append(this.drawingElement);\n                this._createMarkers();\n            },\n\n            _setData: function(data) {\n                var drawingElement = this.drawingElement;\n                var multipath = d.Path.parse(data || \"\");\n                var paths = multipath.paths.slice(0);\n                multipath.paths.elements([]);\n                drawingElement.paths.elements(paths);\n            }\n        });\n\n        deepExtend(Path.fn, AutoSizeableMixin);\n        deepExtend(Path.fn, MarkerPathMixin);\n\n        var Line = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this.container = new d.Group();\n                this._initPath();\n                this._createMarkers();\n            },\n\n            drawingContainer: function() {\n                return this.container;\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    options = options || {};\n                    var from = options.from;\n                    var to = options.to;\n                    if (from) {\n                        this.options.from = from;\n                    }\n\n                    if (to) {\n                        this.options.to = to;\n                    }\n\n                    if (from || to) {\n                        this._drawPath();\n                        this._redrawMarkers(true, options);\n                    } else {\n                        this._redrawMarkers(false, options);\n                    }\n\n                    VisualBase.fn.redraw.call(this, options);\n                }\n            },\n\n            _initPath: function() {\n                var options = this.options;\n                var drawingElement = this.drawingElement = new d.Path({\n                    stroke: options.stroke\n                });\n\n                this._fill();\n                this._drawPath();\n                this.container.append(drawingElement);\n            },\n\n            _drawPath: function() {\n                var options = this.options;\n                var drawingElement = this.drawingElement;\n                var from = options.from || new Point();\n                var to = options.to || new Point();\n\n                drawingElement.segments.elements([\n                    createSegment(from.x, from.y),\n                    createSegment(to.x, to.y)\n                ]);\n            }\n        });\n\n        deepExtend(Line.fn, MarkerPathMixin);\n\n        var Polyline = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this.container = new d.Group();\n                this._initPath();\n                this._createMarkers();\n            },\n\n            drawingContainer: function() {\n                return this.container;\n            },\n\n            points: function(points) {\n                var options = this.options;\n                if (points) {\n                    options.points = points;\n                    this._updatePath();\n                } else {\n                    return options.points;\n                }\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var points = options.points;\n                    VisualBase.fn.redraw.call(this, options);\n\n                    if (points && this._pointsDiffer(points)) {\n                        this.points(points);\n                        this._redrawMarkers(true, options);\n                    } else {\n                        this._redrawMarkers(false, options);\n                    }\n                }\n            },\n\n            _initPath: function() {\n                var options = this.options;\n                this.drawingElement = new d.Path({\n                    stroke: options.stroke\n                });\n\n                this._fill();\n                this.container.append(this.drawingElement);\n\n                if (options.points) {\n                    this._updatePath();\n                }\n            },\n\n            _pointsDiffer: function(points) {\n                var currentPoints = this.options.points;\n                var differ = currentPoints.length !== points.length;\n                if (!differ) {\n                    for (var i = 0; i < points.length; i++) {\n                        if (currentPoints[i].x !== points[i].x || currentPoints[i].y !== points[i].y) {\n                            differ = true;\n                            break;\n                        }\n                    }\n                }\n\n                return differ;\n            },\n\n            _updatePath: function() {\n                var drawingElement = this.drawingElement;\n                var options = this.options;\n                var points = options.points;\n                var segments = [];\n                var point;\n                for (var i = 0; i < points.length; i++) {\n                    point = points[i];\n                    segments.push(createSegment(point.x, point.y));\n                }\n\n                drawingElement.segments.elements(segments);\n            },\n\n            options: {\n                points: []\n            }\n        });\n\n        deepExtend(Polyline.fn, MarkerPathMixin);\n\n        var Image = Element.extend({\n            init: function(options) {\n                Element.fn.init.call(this, options);\n\n                this._initImage();\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    if (options.source) {\n                        this.drawingElement.src(options.source);\n                    }\n\n                    if (this._diffNumericOptions(options, [WIDTH, HEIGHT, X, Y])) {\n                        this.drawingElement.rect(this._rect());\n                    }\n\n                    Element.fn.redraw.call(this, options);\n                }\n            },\n\n            _initImage: function() {\n                var options = this.options;\n                var rect = this._rect();\n\n                this.drawingElement = new d.Image(options.source, rect, {});\n            },\n\n            _rect: function() {\n                var sizeOptions = sizeOptionsOrDefault(this.options);\n                var origin = new g.Point(sizeOptions.x, sizeOptions.y);\n                var size = new g.Size(sizeOptions.width, sizeOptions.height);\n\n                return new g.Rect(origin, size);\n            }\n        });\n\n        var Group = Element.extend({\n            init: function(options) {\n                this.children = [];\n                Element.fn.init.call(this, options);\n                this.drawingElement = new d.Group();\n                this._initSize();\n            },\n\n            options: {\n                autoSize: false\n            },\n\n            append: function(visual) {\n                this.drawingElement.append(visual.drawingContainer());\n                this.children.push(visual);\n                this._childrenChange = true;\n            },\n\n            remove: function(visual) {\n                if (this._remove(visual)) {\n                    this._childrenChange = true;\n                }\n            },\n\n            _remove: function(visual) {\n                var index = inArray(visual, this.children);\n                if (index >= 0) {\n                    this.drawingElement.removeAt(index);\n                    this.children.splice(index, 1);\n                    return true;\n                }\n            },\n\n            clear: function() {\n                this.drawingElement.clear();\n                this.children = [];\n                this._childrenChange = true;\n            },\n\n            toFront: function(visuals) {\n                var visual;\n\n                for (var i = 0; i < visuals.length; i++) {\n                    visual = visuals[i];\n                    if (this._remove(visual)) {\n                        this.append(visual);\n                    }\n                }\n            },\n            //TO DO: add drawing group support for moving and inserting children\n            toBack: function(visuals) {\n                this._reorderChildren(visuals, 0);\n            },\n\n            toIndex: function(visuals, indices) {\n                this._reorderChildren(visuals, indices);\n            },\n\n            _reorderChildren: function(visuals, indices) {\n                var group = this.drawingElement;\n                var drawingChildren = group.children.slice(0);\n                var children = this.children;\n                var fixedPosition = isNumber(indices);\n                var i, index, toIndex, drawingElement, visual;\n\n                for (i = 0; i < visuals.length; i++) {\n                    visual = visuals[i];\n                    drawingElement = visual.drawingContainer();\n\n                    index = inArray(visual, children);\n                    if (index >= 0) {\n                        drawingChildren.splice(index, 1);\n                        children.splice(index, 1);\n\n                        toIndex = fixedPosition ? indices : indices[i];\n\n                        drawingChildren.splice(toIndex, 0, drawingElement);\n                        children.splice(toIndex, 0, visual);\n                    }\n                }\n                group.clear();\n                group.append.apply(group, drawingChildren);\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    if (this._childrenChange) {\n                        this._childrenChange = false;\n                        if (!this._updateSize(options)) {\n                            this._initSize();\n                        }\n                    } else {\n                        this._updateSize(options);\n                    }\n\n                    Element.fn.redraw.call(this, options);\n                }\n            },\n\n            _boundingBox: function() {\n                var children = this.children;\n                var boundingBox;\n                var visual, childBoundingBox;\n                for (var i = 0; i < children.length; i++) {\n                    visual = children[i];\n                    if (visual.visible() && visual._includeInBBox !== false) {\n                        childBoundingBox = visual.drawingContainer().clippedBBox(null);\n                        if (childBoundingBox) {\n                            if (boundingBox) {\n                                boundingBox = g.Rect.union(boundingBox, childBoundingBox);\n                            } else {\n                                boundingBox = childBoundingBox;\n                            }\n                        }\n                    }\n                }\n\n                return boundingBox;\n            }\n        });\n\n        deepExtend(Group.fn, AutoSizeableMixin);\n\n        var Layout = Group.extend({\n            init: function(rect, options) {\n                this.children = [];\n                Element.fn.init.call(this, options);\n                this.drawingElement = new d.Layout(toDrawingRect(rect), options);\n                this._initSize();\n            },\n\n            rect: function(rect) {\n                if (rect) {\n                    this.drawingElement.rect(toDrawingRect(rect));\n                } else {\n                    var drawingRect = this.drawingElement.rect();\n                    if (drawingRect) {\n                        return new Rect(drawingRect.origin.x, drawingRect.origin.y, drawingRect.size.width, drawingRect.size.height);\n                    }\n                }\n            },\n\n            reflow: function() {\n                this.drawingElement.reflow();\n            },\n\n            redraw: function(options) {\n                kendo.deepExtend(this.drawingElement.options, options);\n                Group.fn.redraw.call(this, options);\n            }\n        });\n\n        var Circle = VisualBase.extend({\n            init: function(options) {\n                VisualBase.fn.init.call(this, options);\n                this._initCircle();\n                this._initSize();\n            },\n\n            redraw: function(options) {\n                if (options) {\n                    var circleOptions = this.options;\n\n                    if (options.center) {\n                        deepExtend(circleOptions, {\n                            center: options.center\n                        });\n                        this._center.move(circleOptions.center.x, circleOptions.center.y);\n                    }\n\n                    if (this._diffNumericOptions(options, [\"radius\"])) {\n                        this._circle.setRadius(circleOptions.radius);\n                    }\n\n                    this._updateSize(options);\n\n                    VisualBase.fn.redraw.call(this, options);\n                }\n            },\n\n            _initCircle: function() {\n                var options = this.options;\n                var width = options.width;\n                var height = options.height;\n                var radius = options.radius;\n                if (!defined(radius)) {\n                    if (!defined(width)) {\n                        width = height;\n                    }\n                    if (!defined(height)) {\n                        height = width;\n                    }\n                    options.radius = radius = Math.min(width, height) / 2;\n                }\n\n                var center = options.center || { x: radius, y: radius };\n                this._center = new g.Point(center.x, center.y);\n                this._circle = new g.Circle(this._center, radius);\n                this.drawingElement = new d.Circle(this._circle, {\n                    stroke: options.stroke\n                });\n\n                this._fill();\n            }\n        });\n        deepExtend(Circle.fn, AutoSizeableMixin);\n\n        var Canvas = Class.extend({\n            init: function(element, options) {\n                options = options || {};\n                this.element = element;\n                this.surface = d.Surface.create(element, options);\n                if (kendo.isFunction(this.surface.translate)) {\n                    this.translate = this._translate;\n                }\n\n                this.drawingElement = new d.Group();\n                this._viewBox = new Rect(0, 0, options.width, options.height);\n                this.size(this._viewBox);\n            },\n\n            bounds: function() {\n                var box = this.drawingElement.clippedBBox();\n                return new Rect(0, 0, box.width(), box.height());\n            },\n\n            size: function(size) {\n                var viewBox = this._viewBox;\n                if (defined(size)) {\n                    viewBox.width = size.width;\n                    viewBox.height = size.height;\n                    this.surface.setSize(size);\n                }\n                return {\n                    width: viewBox.width,\n                    height: viewBox.height\n                };\n            },\n\n            _translate: function(x, y) {\n                var viewBox = this._viewBox;\n                if (defined(x) && defined(y)) {\n                    viewBox.x = x;\n                    viewBox.y = y;\n                    this.surface.translate({ x: x, y: y });\n                }\n                return {\n                    x: viewBox.x,\n                    y: viewBox.y\n                };\n            },\n\n            draw: function() {\n                this.surface.draw(this.drawingElement);\n            },\n\n            append: function(visual) {\n                this.drawingElement.append(visual.drawingContainer());\n                return this;\n            },\n\n            remove: function(visual) {\n                this.drawingElement.remove(visual.drawingContainer());\n            },\n\n            insertBefore: function() {\n\n            },\n\n            clear: function() {\n                this.drawingElement.clear();\n            },\n\n            destroy: function(clearHtml) {\n                this.surface.destroy();\n                if (clearHtml) {\n                    $(this.element).remove();\n                }\n            }\n        });\n\n        // Helper functions ===========================================\n\n        function sizeOptionsOrDefault(options) {\n            return {\n                x: options.x || 0,\n                y: options.y || 0,\n                width: options.width || 0,\n                height: options.height || 0\n            };\n        }\n\n        function normalizeDrawingOptions(options) {\n            if (options) {\n                var drawingOptions = options;\n\n                if (isString(drawingOptions)) {\n                    drawingOptions = {\n                        color: drawingOptions\n                    };\n                }\n\n                if (drawingOptions.color) {\n                    drawingOptions.color = getColor(drawingOptions.color);\n                }\n                return drawingOptions;\n            }\n        }\n\n        function getColor(value) {\n            var color;\n            if (value != TRANSPARENT) {\n                color = new d.Color(value).toHex();\n            } else {\n                color = value;\n            }\n            return color;\n        }\n\n        function lineAngle(p1, p2) {\n            var xDiff = p2.x - p1.x;\n            var yDiff = p2.y - p1.y;\n            var angle = d.util.deg(Math.atan2(yDiff, xDiff));\n            return angle;\n        }\n\n        function createSegment(x, y) {\n            return new d.Segment(new g.Point(x, y));\n        }\n\n        function toDrawingRect(rect) {\n            if (rect) {\n                return new g.Rect([rect.x, rect.y], [rect.width, rect.height]);\n            }\n        }\n\n        // Exports ================================================================\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n            diffNumericOptions: diffNumericOptions,\n            Element: Element,\n            Scale: Scale,\n            Translation: Translation,\n            Rotation: Rotation,\n            Circle: Circle,\n            Group: Group,\n            Rectangle: Rectangle,\n            Canvas: Canvas,\n            Path: Path,\n            Layout: Layout,\n            Line: Line,\n            MarkerBase: MarkerBase,\n            ArrowMarker: ArrowMarker,\n            CircleMarker: CircleMarker,\n            Polyline: Polyline,\n            CompositeTransform: CompositeTransform,\n            TextBlock: TextBlock,\n            Image: Image,\n            VisualBase: VisualBase\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n            // Imports ================================================================\n            var kendo = window.kendo,\n                dataviz = kendo.dataviz,\n                diagram = dataviz.diagram,\n                Class = kendo.Class,\n                Group = diagram.Group,\n                Rect = diagram.Rect,\n                Rectangle = diagram.Rectangle,\n                Utils = diagram.Utils,\n                isUndefined = Utils.isUndefined,\n                Point = diagram.Point,\n                Circle = diagram.Circle,\n                Ticker = diagram.Ticker,\n                deepExtend = kendo.deepExtend,\n                Movable = kendo.ui.Movable,\n                util = kendo.drawing.util,\n                defined = util.defined,\n                inArray = $.inArray;\n\n            // Constants ==============================================================\n            var Cursors = {\n                    arrow: \"default\",\n                    grip: \"pointer\",\n                    cross: \"pointer\",\n                    add: \"pointer\",\n                    move: \"move\",\n                    select: \"pointer\",\n                    south: \"s-resize\",\n                    east: \"e-resize\",\n                    west: \"w-resize\",\n                    north: \"n-resize\",\n                    rowresize: \"row-resize\",\n                    colresize: \"col-resize\"\n                },\n                HIT_TEST_DISTANCE = 10,\n                AUTO = \"Auto\",\n                TOP = \"Top\",\n                RIGHT = \"Right\",\n                LEFT = \"Left\",\n                BOTTOM = \"Bottom\",\n                DEFAULT_SNAP_SIZE = 10,\n                DEFAULT_SNAP_ANGLE = 10,\n                DRAG_START = \"dragStart\",\n                DRAG = \"drag\",\n                DRAG_END = \"dragEnd\",\n                ITEMROTATE = \"itemRotate\",\n                ITEMBOUNDSCHANGE = \"itemBoundsChange\",\n                MIN_SNAP_SIZE = 5,\n                MIN_SNAP_ANGLE = 5,\n                MOUSE_ENTER = \"mouseEnter\",\n                MOUSE_LEAVE = \"mouseLeave\",\n                ZOOM_START = \"zoomStart\",\n                ZOOM_END = \"zoomEnd\",\n                SCROLL_MIN = -20000,\n                SCROLL_MAX = 20000,\n                FRICTION = 0.90,\n                FRICTION_MOBILE = 0.93,\n                VELOCITY_MULTIPLIER = 5,\n                TRANSPARENT = \"transparent\",\n                PAN = \"pan\",\n                ROTATED = \"rotated\",\n                SOURCE = \"source\",\n                TARGET = \"target\",\n                HANDLE_NAMES = {\n                    \"-1\": SOURCE,\n                    \"1\": TARGET\n                };\n\n            diagram.Cursors = Cursors;\n\n            var PositionAdapter = kendo.Class.extend({\n                init: function(layoutState) {\n                    this.layoutState = layoutState;\n                    this.diagram = layoutState.diagram;\n                },\n                initState: function() {\n                    this.froms = [];\n                    this.tos = [];\n                    this.subjects = [];\n                    function pusher(id, bounds) {\n                        var shape = this.diagram.getShapeById(id);\n                        if (shape) {\n                            this.subjects.push(shape);\n                            this.froms.push(shape.bounds().topLeft());\n                            this.tos.push(bounds.topLeft());\n                        }\n                    }\n\n                    this.layoutState.nodeMap.forEach(pusher, this);\n                },\n                update: function(tick) {\n                    if (this.subjects.length <= 0) {\n                        return;\n                    }\n                    for (var i = 0; i < this.subjects.length; i++) {\n                        //todo: define a Lerp function instead\n                        this.subjects[i].position(\n                            new Point(this.froms[i].x + (this.tos[i].x - this.froms[i].x) * tick, this.froms[i].y + (this.tos[i].y - this.froms[i].y) * tick)\n                        );\n                    }\n                }\n            });\n\n            var LayoutUndoUnit = Class.extend({\n                init: function(initialState, finalState, animate) {\n                    if (isUndefined(animate)) {\n                        this.animate = false;\n                    }\n                    else {\n                        this.animate = animate;\n                    }\n                    this._initialState = initialState;\n                    this._finalState = finalState;\n                    this.title = \"Diagram layout\";\n                },\n                undo: function() {\n                    this.setState(this._initialState);\n                },\n                redo: function() {\n                    this.setState(this._finalState);\n                },\n                setState: function(state) {\n                    var diagram = state.diagram;\n                    if (this.animate) {\n                        state.linkMap.forEach(\n                            function(id, points) {\n                                var conn = diagram.getShapeById(id);\n                                conn.visible(false);\n                                if (conn) {\n                                    conn.points(points);\n                                }\n                            }\n                        );\n                        var ticker = new Ticker();\n                        ticker.addAdapter(new PositionAdapter(state));\n                        ticker.onComplete(function() {\n                            state.linkMap.forEach(\n                                function(id) {\n                                    var conn = diagram.getShapeById(id);\n                                    conn.visible(true);\n                                }\n                            );\n                        });\n                        ticker.play();\n                    }\n                    else {\n                        state.nodeMap.forEach(function(id, bounds) {\n                            var shape = diagram.getShapeById(id);\n                            if (shape) {\n                                shape.position(bounds.topLeft());\n                            }\n                        });\n                        state.linkMap.forEach(\n                            function(id, points) {\n                                var conn = diagram.getShapeById(id);\n                                if (conn) {\n                                    conn.points(points);\n                                }\n                            }\n                        );\n                    }\n                }\n            });\n\n            var CompositeUnit = Class.extend({\n                init: function(unit) {\n                    this.units = [];\n                    this.title = \"Composite unit\";\n                    if (unit !== undefined$1) {\n                        this.units.push(unit);\n                    }\n                },\n                add: function(undoUnit) {\n                    this.units.push(undoUnit);\n                },\n                undo: function() {\n                    for (var i = 0; i < this.units.length; i++) {\n                        this.units[i].undo();\n                    }\n                },\n                redo: function() {\n                    for (var i = 0; i < this.units.length; i++) {\n                        this.units[i].redo();\n                    }\n                }\n            });\n\n            var ConnectionEditUnit = Class.extend({\n                init: function(item, redoSource, redoTarget) {\n                    this.item = item;\n                    this._redoSource = redoSource;\n                    this._redoTarget = redoTarget;\n                    if (defined(redoSource)) {\n                        this._undoSource = item.source();\n                    }\n\n                    if (defined(redoTarget)) {\n                        this._undoTarget = item.target();\n                    }\n                    this.title = \"Connection Editing\";\n                },\n                undo: function() {\n                    if (this._undoSource !== undefined$1) {\n                        this.item._updateConnector(this._undoSource, \"source\");\n                    }\n\n                    if (this._undoTarget !== undefined$1) {\n                        this.item._updateConnector(this._undoTarget, \"target\");\n                    }\n\n                    this.item.updateModel();\n                },\n                redo: function() {\n                    if (this._redoSource !== undefined$1) {\n                        this.item._updateConnector(this._redoSource, \"source\");\n                    }\n\n                    if (this._redoTarget !== undefined$1) {\n                        this.item._updateConnector(this._redoTarget, \"target\");\n                    }\n\n                    this.item.updateModel();\n                }\n            });\n\n            var ConnectionEditUndoUnit = Class.extend({\n                init: function(item, undoSource, undoTarget) {\n                    this.item = item;\n                    this._undoSource = undoSource;\n                    this._undoTarget = undoTarget;\n                    this._redoSource = item.source();\n                    this._redoTarget = item.target();\n                    this.title = \"Connection Editing\";\n                },\n                undo: function() {\n                    this.item._updateConnector(this._undoSource, \"source\");\n                    this.item._updateConnector(this._undoTarget, \"target\");\n                    this.item.updateModel();\n                },\n                redo: function() {\n                    this.item._updateConnector(this._redoSource, \"source\");\n                    this.item._updateConnector(this._redoTarget, \"target\");\n                    this.item.updateModel();\n                }\n            });\n\n            var DeleteConnectionUnit = Class.extend({\n                init: function(connection) {\n                    this.connection = connection;\n                    this.diagram = connection.diagram;\n                    this.targetConnector = connection.targetConnector;\n                    this.title = \"Delete connection\";\n                },\n                undo: function() {\n                    this.diagram._addConnection(this.connection, false);\n                },\n                redo: function() {\n                    this.diagram.remove(this.connection, false);\n                }\n            });\n\n            var DeleteShapeUnit = Class.extend({\n                init: function(shape) {\n                    this.shape = shape;\n                    this.diagram = shape.diagram;\n                    this.title = \"Deletion\";\n                },\n                undo: function() {\n                    this.diagram._addShape(this.shape, false);\n                    this.shape.select(false);\n                },\n                redo: function() {\n                    this.shape.select(false);\n                    this.diagram.remove(this.shape, false);\n                }\n            });\n            /**\n             * Holds the undoredo state when performing a rotation, translation or scaling. The adorner is optional.\n             * @type {*}\n             */\n            var TransformUnit = Class.extend({\n                init: function(shapes, undoStates, adorner) {\n                    this.shapes = shapes;\n                    this.undoStates = undoStates;\n                    this.title = \"Transformation\";\n                    this.redoStates = [];\n                    this.adorner = adorner;\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        this.redoStates.push(shape.bounds());\n                    }\n                },\n                undo: function() {\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        shape.bounds(this.undoStates[i]);\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape, this.redoStates[i], this.undoStates[i]);\n                        }\n                        shape.updateModel();\n                    }\n                    if (this.adorner) {\n                        this.adorner.refreshBounds();\n                        this.adorner.refresh();\n                    }\n                },\n                redo: function() {\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        shape.bounds(this.redoStates[i]);\n                        // the 'layout' property, if implemented, lets the shape itself work out what to do with the new bounds\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape, this.undoStates[i], this.redoStates[i]);\n                        }\n                        shape.updateModel();\n                    }\n\n                    if (this.adorner) {\n                        this.adorner.refreshBounds();\n                        this.adorner.refresh();\n                    }\n                }\n            });\n\n            var AddConnectionUnit = Class.extend({\n                init: function(connection, diagram) {\n                    this.connection = connection;\n                    this.diagram = diagram;\n                    this.title = \"New connection\";\n                },\n\n                undo: function() {\n                    this.diagram.remove(this.connection, false);\n                },\n\n                redo: function() {\n                    this.diagram._addConnection(this.connection, false);\n                }\n            });\n\n            var AddShapeUnit = Class.extend({\n                init: function(shape, diagram) {\n                    this.shape = shape;\n                    this.diagram = diagram;\n                    this.title = \"New shape\";\n                },\n\n                undo: function() {\n                    this.diagram.deselect();\n                    this.diagram.remove(this.shape, false);\n                },\n\n                redo: function() {\n                    this.diagram._addShape(this.shape, false);\n                }\n            });\n\n            var PanUndoUnit = Class.extend({\n                init: function(initialPosition, finalPosition, diagram) {\n                    this.initial = initialPosition;\n                    this.finalPos = finalPosition;\n                    this.diagram = diagram;\n                    this.title = \"Pan Unit\";\n                },\n                undo: function() {\n                    this.diagram.pan(this.initial);\n                },\n                redo: function() {\n                    this.diagram.pan(this.finalPos);\n                }\n            });\n\n            var RotateUnit = Class.extend({\n                init: function(adorner, shapes, undoRotates) {\n                    this.shapes = shapes;\n                    this.undoRotates = undoRotates;\n                    this.title = \"Rotation\";\n                    this.redoRotates = [];\n                    this.redoAngle = adorner._angle;\n                    this.adorner = adorner;\n                    this.center = adorner._innerBounds.center();\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        this.redoRotates.push(shape.rotate().angle);\n                    }\n                },\n                undo: function() {\n                    var i, shape;\n                    for (i = 0; i < this.shapes.length; i++) {\n                        shape = this.shapes[i];\n                        shape.rotate(this.undoRotates[i], this.center, false);\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape);\n                        }\n                        shape.updateModel();\n                    }\n                    if (this.adorner) {\n                        this.adorner._initialize();\n                        this.adorner.refresh();\n                    }\n                },\n                redo: function() {\n                    var i, shape;\n                    for (i = 0; i < this.shapes.length; i++) {\n                        shape = this.shapes[i];\n                        shape.rotate(this.redoRotates[i], this.center, false);\n                        if (shape.hasOwnProperty(\"layout\")) {\n                            shape.layout(shape);\n                        }\n                        shape.updateModel();\n                    }\n                    if (this.adorner) {\n                        this.adorner._initialize();\n                        this.adorner.refresh();\n                    }\n                }\n            });\n\n            var ToFrontUnit = Class.extend({\n                init: function(diagram, items, initialIndices) {\n                    this.diagram = diagram;\n                    this.indices = initialIndices;\n                    this.items = items;\n                    this.title = \"Rotate Unit\";\n                },\n                undo: function() {\n                    this.diagram._toIndex(this.items, this.indices);\n                },\n                redo: function() {\n                    this.diagram.toFront(this.items, false);\n                }\n            });\n\n            var ToBackUnit = Class.extend({\n                init: function(diagram, items, initialIndices) {\n                    this.diagram = diagram;\n                    this.indices = initialIndices;\n                    this.items = items;\n                    this.title = \"Rotate Unit\";\n                },\n                undo: function() {\n                    this.diagram._toIndex(this.items, this.indices);\n                },\n                redo: function() {\n                    this.diagram.toBack(this.items, false);\n                }\n            });\n\n            /**\n             * Undo-redo service.\n             */\n            var UndoRedoService = kendo.Observable.extend({\n                init: function(options) {\n                    kendo.Observable.fn.init.call(this, options);\n                    this.bind(this.events, options);\n                    this.stack = [];\n                    this.index = 0;\n                    this.capacity = 100;\n                },\n\n                events: [\"undone\", \"redone\"],\n\n                /**\n                 * Starts the collection of units. Add those with\n                 * the addCompositeItem method and call commit. Or cancel to forget about it.\n                 */\n                begin: function() {\n                    this.composite = new CompositeUnit();\n                },\n\n                /**\n                 * Cancels the collection process of unit started with 'begin'.\n                 */\n                cancel: function() {\n                    this.composite = undefined$1;\n                },\n\n                /**\n                 * Commits a batch of units.\n                 */\n                commit: function(execute) {\n                    if (this.composite.units.length > 0) {\n                        this._restart(this.composite, execute);\n                    }\n                    this.composite = undefined$1;\n                },\n\n                /**\n                 * Adds a unit as part of the begin-commit batch.\n                 * @param undoUnit\n                 */\n                addCompositeItem: function(undoUnit) {\n                    if (this.composite) {\n                        this.composite.add(undoUnit);\n                    } else {\n                        this.add(undoUnit);\n                    }\n                },\n\n                /**\n                 * Standard addition of a unit. See also the batch version; begin-addCompositeUnit-commit methods.\n                 * @param undoUnit The unit to be added.\n                 * @param execute If false, the unit will be added but not executed.\n                 */\n                add: function(undoUnit, execute) {\n                    this._restart(undoUnit, execute);\n                },\n\n                /**\n                 * Returns the number of undoable unit in the stack.\n                 * @returns {Number}\n                 */\n\n                pop: function() {\n                    if (this.index > 0) {\n                        this.stack.pop();\n                        this.index--;\n                    }\n                },\n\n                count: function() {\n                    return this.stack.length;\n                },\n\n                /**\n                 * Rollback of the unit on top of the stack.\n                 */\n                undo: function() {\n                    if (this.index > 0) {\n                        this.index--;\n                        this.stack[this.index].undo();\n                        this.trigger(\"undone\");\n                    }\n                },\n\n                /**\n                 * Redo of the last undone action.\n                 */\n                redo: function() {\n                    if (this.stack.length > 0 && this.index < this.stack.length) {\n                        this.stack[this.index].redo();\n                        this.index++;\n                        this.trigger(\"redone\");\n                    }\n                },\n\n                _restart: function(composite, execute) {\n                    // throw away anything beyond this point if this is a new branch\n                    this.stack.splice(this.index, this.stack.length - this.index);\n                    this.stack.push(composite);\n                    if (execute !== false) {\n                        this.redo();\n                    } else {\n                        this.index++;\n                    }\n                    // check the capacity\n                    if (this.stack.length > this.capacity) {\n                        this.stack.splice(0, this.stack.length - this.capacity);\n                        this.index = this.capacity; //points to the end of the stack\n                    }\n                },\n\n                /**\n                 * Clears the stack.\n                 */\n                clear: function() {\n                    this.stack = [];\n                    this.index = 0;\n                }\n            });\n\n    // Tools =========================================\n\n            var EmptyTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                },\n                start: function() {\n                },\n                move: function() {\n                },\n                end: function() {\n                },\n                tryActivate: function() {\n                    return false;\n                },\n                getCursor: function() {\n                    return Cursors.arrow;\n                }\n            });\n\n            var ScrollerTool = EmptyTool.extend({\n                init: function(toolService) {\n                    var tool = this;\n                    var friction = kendo.support.mobileOS ? FRICTION_MOBILE : FRICTION;\n                    EmptyTool.fn.init.call(tool, toolService);\n\n                    var diagram = tool.toolService.diagram,\n                        canvas = diagram.canvas;\n\n                    var scroller = diagram.scroller = tool.scroller = $(diagram.scrollable).kendoMobileScroller({\n                        friction: friction,\n                        velocityMultiplier: VELOCITY_MULTIPLIER,\n                        mousewheelScrolling: false,\n                        zoom: false,\n                        scroll: tool._move.bind(tool)\n                    }).data(\"kendoMobileScroller\");\n\n                    if (canvas.translate) {\n                        tool.movableCanvas = new Movable(canvas.element);\n                    }\n\n                    var virtualScroll = function(dimension, min, max) {\n                        dimension.makeVirtual();\n                        dimension.virtualSize(min || SCROLL_MIN, max || SCROLL_MAX);\n                    };\n\n                    virtualScroll(scroller.dimensions.x);\n                    virtualScroll(scroller.dimensions.y);\n                    scroller.disable();\n                },\n\n                tryActivate: function(p, meta) {\n                    var toolService = this.toolService;\n                    var options = toolService.diagram.options.pannable;\n                    var enabled = meta.ctrlKey;\n\n                    if (defined(options.key)) {\n                        if (!options.key || options.key == \"none\") {\n                            enabled = noMeta(meta) && !defined(toolService.hoveredItem);\n                        } else {\n                            enabled = meta[options.key + \"Key\"];\n                        }\n                    }\n\n                    return options !== false && enabled && !defined(toolService.hoveredAdorner) && !defined(toolService._hoveredConnector);\n                },\n\n                start: function() {\n                    this.scroller.enable();\n                },\n                move: function() {\n                },//the tool itself should not handle the scrolling. Let kendo scroller take care of this part. Check _move\n                _move: function(args) {\n                    var tool = this,\n                        diagram = tool.toolService.diagram,\n                        canvas = diagram.canvas,\n                        scrollPos = new Point(args.scrollLeft, args.scrollTop);\n\n                    if (canvas.translate) {\n                        diagram._storePan(scrollPos.times(-1));\n                        tool.movableCanvas.moveTo(scrollPos);\n                        canvas.translate(scrollPos.x, scrollPos.y);\n                    } else {\n                        scrollPos = scrollPos.plus(diagram._pan.times(-1));\n                    }\n\n                    diagram.trigger(PAN, { pan: scrollPos });\n                },\n                end: function() {\n                    this.scroller.disable();\n                },\n                getCursor: function() {\n                    return Cursors.move;\n                }\n            });\n\n            /**\n             * The tool handling the transformations via the adorner.\n             * @type {*}\n             */\n            var PointerTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                },\n                tryActivate: function() {\n                    return true; // the pointer tool is last and handles all others requests.\n                },\n                start: function(p, meta) {\n                    var toolService = this.toolService,\n                        diagram = toolService.diagram,\n                        hoveredItem = toolService.hoveredItem;\n\n                    if (hoveredItem) {\n                        toolService.selectSingle(hoveredItem, meta);\n                        if (hoveredItem.adorner) { //connection\n                            this.adorner = hoveredItem.adorner;\n                            this.handle = this.adorner._hitTest(p);\n                        }\n                    }\n\n                    if (!this.handle) {\n                        this.handle = diagram._resizingAdorner._hitTest(p);\n                        if (this.handle) {\n                            this.adorner = diagram._resizingAdorner;\n                        }\n                    }\n\n                    if (this.adorner) {\n                        if (!this.adorner.isDragHandle(this.handle) || !diagram.trigger(DRAG_START, { shapes: this.adorner.shapes, connections: [] })) {\n                            this.adorner.start(p);\n                        } else {\n                            toolService.startPoint = p;\n                            toolService.end(p);\n                        }\n                    }\n                },\n\n                move: function(p) {\n                    if (this.adorner) {\n                        this.adorner.move(this.handle, p);\n                        if (this.adorner.isDragHandle(this.handle)) {\n                            this.toolService.diagram.trigger(DRAG, { shapes: this.adorner.shapes, connections: [] });\n                        }\n                    }\n                },\n\n                end: function() {\n                    var diagram = this.toolService.diagram,\n                        adorner = this.adorner,\n                        unit;\n\n                    if (adorner) {\n                        if (!adorner.isDragHandle(this.handle) || !diagram.trigger(DRAG_END, { shapes: adorner.shapes, connections: [] })) {\n                            unit = adorner.stop();\n                            if (unit) {\n                                diagram.undoRedoService.add(unit, false);\n                            }\n                        } else {\n                            adorner.cancel();\n                        }\n                    }\n\n                    this.adorner = undefined$1;\n                    this.handle = undefined$1;\n                },\n                getCursor: function(p) {\n                    return this.toolService.hoveredItem ? this.toolService.hoveredItem._getCursor(p) : Cursors.arrow;\n                }\n            });\n\n            var SelectionTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                },\n                tryActivate: function(p, meta) {\n                    var toolService = this.toolService;\n                    var selectable = toolService.diagram.options.selectable;\n                    var enabled = selectable && selectable.multiple !== false;\n\n                    if (enabled) {\n                        if (selectable.key && selectable.key != \"none\") {\n                            enabled = meta[selectable.key + \"Key\"];\n                        } else {\n                            enabled = noMeta(meta);\n                        }\n                    }\n\n                    return enabled && !defined(toolService.hoveredItem) && !defined(toolService.hoveredAdorner);\n                },\n                start: function(p) {\n                    var diagram = this.toolService.diagram;\n                    diagram.deselect();\n                    diagram.selector.start(p);\n                },\n                move: function(p) {\n                    var diagram = this.toolService.diagram;\n                    diagram.selector.move(p);\n                },\n                end: function(p, meta) {\n                    var diagram = this.toolService.diagram, hoveredItem = this.toolService.hoveredItem;\n                    var rect = diagram.selector.bounds();\n                    if ((!hoveredItem || !hoveredItem.isSelected) && !meta.ctrlKey) {\n                        diagram.deselect();\n                    }\n                    if (!rect.isEmpty()) {\n                        diagram.selectArea(rect);\n                    }\n                    diagram.selector.end();\n                },\n                getCursor: function() {\n                    return Cursors.arrow;\n                }\n            });\n\n            var ConnectionTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                    this.type = \"ConnectionTool\";\n                },\n                tryActivate: function() {\n                    return this.toolService._hoveredConnector;\n                },\n                start: function(p, meta) {\n                    var toolService = this.toolService,\n                        diagram = toolService.diagram,\n                        connector = toolService._hoveredConnector,\n                        connection = diagram._createConnection({}, connector._c, p);\n\n                    if (canDrag(connection) && !diagram.trigger(DRAG_START, { shapes: [], connections: [connection], connectionHandle: TARGET }) && diagram._addConnection(connection)) {\n                        toolService._connectionManipulation(connection, connector._c.shape, true);\n                        toolService._removeHover();\n                        toolService.selectSingle(toolService.activeConnection, meta);\n                        if (meta.type == \"touchmove\") {\n                            diagram._cachedTouchTarget = connector.visual;\n                        }\n                    } else {\n                        connection.source(null);\n                        toolService.end(p);\n                    }\n                },\n\n                move: function(p) {\n                    var toolService = this.toolService;\n                    var connection = toolService.activeConnection;\n\n                    connection.target(p);\n                    toolService.diagram.trigger(DRAG, { shapes: [], connections: [connection], connectionHandle: TARGET });\n                    return true;\n                },\n\n                end: function(p) {\n                    var toolService = this.toolService,\n                        d = toolService.diagram,\n                        connection = toolService.activeConnection,\n                        hoveredItem = toolService.hoveredItem,\n                        connector = toolService._hoveredConnector,\n                        target,\n                        cachedTouchTarget = d._cachedTouchTarget;\n\n                    if (!connection) {\n                        return;\n                    }\n\n                    if (connector && connector._c != connection.sourceConnector) {\n                        target = connector._c;\n                    } else if (hoveredItem && hoveredItem instanceof diagram.Shape) {\n                        target = hoveredItem.getConnector(AUTO) || hoveredItem.getConnector(p);\n                    } else {\n                        target = p;\n                    }\n\n                    connection.target(target);\n\n                    if (!d.trigger(DRAG_END, { shapes: [], connections: [connection], connectionHandle: TARGET })) {\n                        connection.updateModel();\n                        d._syncConnectionChanges();\n                    } else {\n                        d.remove(connection, false);\n                        d.undoRedoService.pop();\n                    }\n                    toolService._connectionManipulation();\n\n                    if (cachedTouchTarget) {\n                        d._connectorsAdorner.visual.remove(cachedTouchTarget);\n                        d._cachedTouchTarget = null;\n                    }\n                },\n\n                getCursor: function() {\n                    return Cursors.arrow;\n                }\n            });\n\n            var ConnectionEditTool = Class.extend({\n                init: function(toolService) {\n                    this.toolService = toolService;\n                    this.type = \"ConnectionTool\";\n                },\n\n                tryActivate: function(p, meta) {\n                    var toolService = this.toolService,\n                        diagram = toolService.diagram,\n                        selectable = diagram.options.selectable,\n                        item = toolService.hoveredItem,\n                        isActive = selectable !== false &&\n                                   item && item.path && !(item.isSelected && meta.ctrlKey);\n\n                    if (isActive) {\n                        this._c = item;\n                    }\n\n                    return isActive;\n                },\n\n                start: function(p, meta) {\n                    var toolService = this.toolService;\n                    var connection = this._c;\n\n                    toolService.selectSingle(connection, meta);\n\n                    var adorner = connection.adorner;\n\n                    var handle, name;\n                    if (adorner) {\n                        handle = adorner._hitTest(p);\n                        name = HANDLE_NAMES[handle];\n                    }\n\n                    if (canDrag(connection) && adorner && !toolService.diagram.trigger(DRAG_START, { shapes: [], connections: [connection], connectionHandle: name })) {\n                        this.handle = handle;\n                        this.handleName = name;\n                        adorner.start(p);\n                    } else {\n                        toolService.startPoint = p;\n                        toolService.end(p);\n                    }\n                },\n\n                move: function(p) {\n                    var adorner = this._c.adorner;\n                    if (canDrag(this._c) && adorner) {\n                        adorner.move(this.handle, p);\n                        this.toolService.diagram.trigger(DRAG, { shapes: [], connections: [this._c], connectionHandle: this.handleName });\n\n                        return true;\n                    }\n                },\n\n                end: function(p) {\n                    var connection = this._c;\n                    var adorner = connection.adorner;\n                    var toolService = this.toolService;\n                    var diagram = toolService.diagram;\n\n                    if (adorner) {\n                        if (canDrag(connection)) {\n                            var unit = adorner.stop(p);\n                            if (!diagram.trigger(DRAG_END, { shapes: [], connections: [connection], connectionHandle: this.handleName })) {\n                                diagram.undoRedoService.add(unit, false);\n                                connection.updateModel();\n                                diagram._syncConnectionChanges();\n                            } else {\n                                unit.undo();\n                            }\n                        }\n                    }\n                },\n\n                getCursor: function() {\n                    return Cursors.move;\n                }\n            });\n\n            function testKey(key, str) {\n                return str.charCodeAt(0) == key || str.toUpperCase().charCodeAt(0) == key;\n            }\n\n            /**\n             * The service managing the tools.\n             * @type {*}\n             */\n            var ToolService = Class.extend({\n                init: function(diagram) {\n                    this.diagram = diagram;\n                    this.tools = [\n                        new ScrollerTool(this),\n                        new ConnectionEditTool(this),\n                        new ConnectionTool(this),\n                        new SelectionTool(this),\n                        new PointerTool(this)\n                    ]; // the order matters.\n\n                    this.activeTool = undefined$1;\n                },\n\n                start: function(p, meta) {\n                    meta = deepExtend({}, meta);\n                    if (this.activeTool) {\n                        this.activeTool.end(p, meta);\n                    }\n                    this._updateHoveredItem(p);\n                    this._activateTool(p, meta);\n                    this.activeTool.start(p, meta);\n                    this._updateCursor(p);\n                    this.diagram.focus();\n                    this.diagram.canvas.surface.suspendTracking();\n                    this.startPoint = p;\n                    return true;\n                },\n\n                move: function(p, meta) {\n                    meta = deepExtend({}, meta);\n                    var updateHovered = true;\n                    if (this.activeTool) {\n                        updateHovered = this.activeTool.move(p, meta);\n                    }\n                    if (updateHovered) {\n                        this._updateHoveredItem(p);\n                    }\n                    this._updateCursor(p);\n                    return true;\n                },\n\n                end: function(p, meta) {\n                    meta = deepExtend({}, meta);\n                    if (this.activeTool) {\n                        this.activeTool.end(p, meta);\n                    }\n                    this.diagram.canvas.surface.resumeTracking();\n                    this.activeTool = undefined$1;\n                    this._updateCursor(p);\n                    return true;\n                },\n\n                keyDown: function(key, meta) {\n                    var diagram = this.diagram;\n                    meta = deepExtend({ ctrlKey: false, metaKey: false, altKey: false }, meta);\n                    if ((meta.ctrlKey || meta.metaKey) && !meta.altKey) {// ctrl or option\n                        if (testKey(key, \"a\")) {// A: select all\n                            diagram.selectAll();\n                            diagram._destroyToolBar();\n                            return true;\n                        } else if (testKey(key, \"z\")) {// Z: undo\n                            diagram.undo();\n                            diagram._destroyToolBar();\n                            return true;\n                        } else if (testKey(key, \"y\")) {// y: redo\n                            diagram.redo();\n                            diagram._destroyToolBar();\n                            return true;\n                        } else if (testKey(key, \"c\")) {\n                            diagram.copy();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"x\")) {\n                            diagram.cut();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"v\")) {\n                            diagram.paste();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"l\")) {\n                            diagram.layout();\n                            diagram._destroyToolBar();\n                        } else if (testKey(key, \"d\")) {\n                            diagram._destroyToolBar();\n                            diagram.copy();\n                            diagram.paste();\n                        }\n                    } else if (key === 46 || key === 8) {// del: deletion\n                        var toRemove = this.diagram._triggerRemove(diagram.select());\n                        if (toRemove.length) {\n                            this.diagram.remove(toRemove, true);\n                            this.diagram._syncChanges();\n                            this.diagram._destroyToolBar();\n                        }\n\n                        return true;\n                    } else if (key === 27) {// ESC: stop any action\n                        this._discardNewConnection();\n                        diagram.deselect();\n                        diagram._destroyToolBar();\n                        return true;\n                    }\n\n                },\n                wheel: function(p, meta) {\n                    var diagram = this.diagram,\n                        delta = meta.delta,\n                        z = diagram.zoom(),\n                        options = diagram.options,\n                        zoomRate = options.zoomRate,\n                        zoomOptions = { point: p, meta: meta, zoom: z };\n\n                    if (diagram.trigger(ZOOM_START, zoomOptions)) {\n                        return;\n                    }\n\n                    if (delta < 0) {\n                        z += zoomRate;\n                    } else {\n                        z -= zoomRate;\n                    }\n\n                    z = kendo.dataviz.round(Math.max(options.zoomMin, Math.min(options.zoomMax, z)), 2);\n                    zoomOptions.zoom = z;\n\n                    diagram.zoom(z, zoomOptions);\n                    diagram.trigger(ZOOM_END, zoomOptions);\n\n                    return true;\n                },\n                setTool: function(tool, index) {\n                    tool.toolService = this;\n                    this.tools[index] = tool;\n                },\n\n                selectSingle: function(item, meta) {\n                    var diagram = this.diagram;\n                    var selectable = diagram.options.selectable;\n                    if (selectable && !item.isSelected && item.options.selectable !== false) {\n                        var addToSelection = meta.ctrlKey && selectable.multiple !== false;\n                        diagram.select(item, { addToSelection: addToSelection });\n                    }\n                },\n\n                _discardNewConnection: function() {\n                    if (this.newConnection) {\n                        this.diagram.remove(this.newConnection);\n                        this.newConnection = undefined$1;\n                    }\n                },\n                _activateTool: function(p, meta) {\n                    for (var i = 0; i < this.tools.length; i++) {\n                        var tool = this.tools[i];\n                        if (tool.tryActivate(p, meta)) {\n                            this.activeTool = tool;\n                            break; // activating the first available tool in the loop.\n                        }\n                    }\n                },\n                _updateCursor: function(p) {\n                    var element = this.diagram.element;\n                    var cursor = this.activeTool ? this.activeTool.getCursor(p) : (this.hoveredAdorner ? this.hoveredAdorner._getCursor(p) : (this.hoveredItem ? this.hoveredItem._getCursor(p) : Cursors.arrow));\n\n                    element.css({ cursor: cursor });\n                },\n                _connectionManipulation: function(connection, disabledShape, isNew) {\n                    this.activeConnection = connection;\n                    this.disabledShape = disabledShape;\n                    if (isNew) {\n                        this.newConnection = this.activeConnection;\n                    } else {\n                        this.newConnection = undefined$1;\n                    }\n                },\n                _updateHoveredItem: function(p) {\n                    var hit = this._hitTest(p);\n                    var diagram = this.diagram;\n\n                    if (hit != this.hoveredItem && (!this.disabledShape || hit != this.disabledShape)) {\n                        if (this.hoveredItem) {\n                            diagram.trigger(MOUSE_LEAVE, { item: this.hoveredItem });\n                            this.hoveredItem._hover(false);\n                        }\n\n                        if (hit && hit.options.enable) {\n                            diagram.trigger(MOUSE_ENTER, { item: hit });\n\n                            this.hoveredItem = hit; // Shape, connection or connector\n                            this.hoveredItem._hover(true);\n                        } else {\n                            this.hoveredItem = undefined$1;\n                        }\n                    }\n                },\n                _removeHover: function() {\n                    if (this.hoveredItem) {\n                        this.hoveredItem._hover(false);\n                        this.hoveredItem = undefined$1;\n                    }\n                },\n                _hitTest: function(point) {\n                    var hit, d = this.diagram, item, i;\n\n                    // connectors\n                    if (this._hoveredConnector) {\n                        this._hoveredConnector._hover(false);\n                        this._hoveredConnector = undefined$1;\n                    }\n                    if (d._connectorsAdorner._visible) {\n                        hit = d._connectorsAdorner._hitTest(point);\n                        if (hit) {\n                            return hit;\n                        }\n                    }\n\n                    hit = this.diagram._resizingAdorner._hitTest(point);\n                    if (hit) {\n                        this.hoveredAdorner = d._resizingAdorner;\n                        if (hit.x !== 0 || hit.y !== 0) { // hit testing for resizers or rotator, otherwise if (0,0) than pass through.\n                            return;\n                        }\n                        hit = undefined$1;\n                    } else {\n                        this.hoveredAdorner = undefined$1;\n                    }\n\n                    if (!this.activeTool || this.activeTool.type !== \"ConnectionTool\") {\n                        var selectedConnections = []; // only the connections should have higher presence because the connection edit point is on top of connector.\n                        // TODO: This should be reworked. The connection adorner should be one for all selected connections and should be hit tested prior the connections and shapes itself.\n                        for (i = 0; i < d._selectedItems.length; i++) {\n                            item = d._selectedItems[i];\n                            if (item instanceof diagram.Connection) {\n                                selectedConnections.push(item);\n                            }\n                        }\n                        hit = this._hitTestItems(selectedConnections, point);\n                    }\n\n                    return hit || this._hitTestElements(point);\n                },\n\n                _hitTestElements: function(point) {\n                    var diagram = this.diagram;\n                    var shapeHit = this._hitTestItems(diagram.shapes, point);\n                    var connectionHit = this._hitTestItems(diagram.connections, point);\n                    var hit;\n\n                    if ((!this.activeTool || this.activeTool.type != \"ConnectionTool\") && shapeHit && connectionHit && !hitTestShapeConnectors(shapeHit, point)) {\n                        var mainLayer = diagram.mainLayer;\n                        var shapeIdx = inArray(shapeHit.visual, mainLayer.children);\n                        var connectionIdx = inArray(connectionHit.visual, mainLayer.children);\n                        hit = shapeIdx > connectionIdx ? shapeHit : connectionHit;\n                    }\n                    return hit || shapeHit || connectionHit;\n                },\n\n                _hitTestItems: function(array, point) {\n                    var i, item, hit;\n                    for (i = array.length - 1; i >= 0; i--) {\n                        item = array[i];\n                        hit = item._hitTest(point);\n                        if (hit) {\n                            return hit;\n                        }\n                    }\n                }\n            });\n\n    // Routing =========================================\n\n            /**\n             * Base class for connection routers.\n             */\n            var ConnectionRouterBase = kendo.Class.extend({\n                init: function() {\n                }\n                /*route: function (connection) {\n                 },\n                 hitTest: function (p) {\n\n                 },\n                 getBounds: function () {\n\n                 }*/\n            });\n\n            /**\n             * Base class for polyline and cascading routing.\n             */\n            var LinearConnectionRouter = ConnectionRouterBase.extend({\n                init: function(connection) {\n                    var that = this;\n                    ConnectionRouterBase.fn.init.call(that);\n                    this.connection = connection;\n                },\n                /**\n                 * Hit testing for polyline paths.\n                 */\n                hitTest: function(p) {\n                    var rec = this.getBounds().inflate(HIT_TEST_DISTANCE);\n                    if (!rec.contains(p)) {\n                        return false;\n                    }\n                    return diagram.Geometry.distanceToPolyline(p, this.connection.allPoints()) < HIT_TEST_DISTANCE;\n                },\n\n                /**\n                 * Bounds of a polyline.\n                 * @returns {kendo.dataviz.diagram.Rect}\n                 */\n                getBounds: function() {\n                    var points = this.connection.allPoints(),\n                        s = points[0],\n                        e = points[points.length - 1],\n                        right = Math.max(s.x, e.x),\n                        left = Math.min(s.x, e.x),\n                        top = Math.min(s.y, e.y),\n                        bottom = Math.max(s.y, e.y);\n\n                    for (var i = 1; i < points.length - 1; ++i) {\n                        right = Math.max(right, points[i].x);\n                        left = Math.min(left, points[i].x);\n                        top = Math.min(top, points[i].y);\n                        bottom = Math.max(bottom, points[i].y);\n                    }\n\n                    return new Rect(left, top, right - left, bottom - top);\n                }\n            });\n\n            /**\n             * A simple poly-linear routing which does not alter the intermediate points.\n             * Does hold the underlying hit, bounds....logic.\n             * @type {*|Object|void|extend|Zepto.extend|b.extend}\n             */\n            var PolylineRouter = LinearConnectionRouter.extend({\n                init: function(connection) {\n                    var that = this;\n                    LinearConnectionRouter.fn.init.call(that);\n                    this.connection = connection;\n                },\n                route: function() {\n                    // just keep the points as is\n                }\n            });\n\n            var CascadingRouter = LinearConnectionRouter.extend({\n                SAME_SIDE_DISTANCE_RATIO: 5,\n\n                init: function(connection) {\n                    var that = this;\n                    LinearConnectionRouter.fn.init.call(that);\n                    this.connection = connection;\n                },\n\n                routePoints: function(start, end, sourceConnector, targetConnector) {\n                    var result;\n\n                    if (sourceConnector && targetConnector) {\n                        result = this._connectorPoints(start, end, sourceConnector, targetConnector);\n                    } else {\n                        result = this._floatingPoints(start, end, sourceConnector);\n                    }\n                    return result;\n                },\n\n                route: function() {\n                    var sourceConnector = this.connection._resolvedSourceConnector;\n                    var targetConnector = this.connection._resolvedTargetConnector;\n                    var start = this.connection.sourcePoint();\n                    var end = this.connection.targetPoint();\n                    var points = this.routePoints(start, end, sourceConnector, targetConnector);\n                    this.connection.points(points);\n                },\n\n                _connectorSides: [{\n                    name: \"Top\",\n                    axis: \"y\",\n                    boundsPoint: \"topLeft\",\n                    secondarySign: 1\n                }, {\n                    name: \"Left\",\n                    axis: \"x\",\n                    boundsPoint: \"topLeft\",\n                    secondarySign: 1\n                }, {\n                    name: \"Bottom\",\n                    axis: \"y\",\n                    boundsPoint: \"bottomRight\",\n                    secondarySign: -1\n                }, {\n                    name: \"Right\",\n                    axis: \"x\",\n                    boundsPoint: \"bottomRight\",\n                    secondarySign: -1\n                }],\n\n                _connectorSide: function(connector, targetPoint) {\n                    var position = connector.position();\n                    var shapeBounds = connector.shape.bounds(ROTATED);\n                    var bounds = {\n                        topLeft: shapeBounds.topLeft(),\n                        bottomRight: shapeBounds.bottomRight()\n                    };\n                    var sides = this._connectorSides;\n                    var min = util.MAX_NUM;\n                    var sideDistance;\n                    var minSide;\n                    var axis;\n                    var side;\n                    for (var idx = 0; idx < sides.length; idx++) {\n                        side = sides[idx];\n                        axis = side.axis;\n                        sideDistance = Math.round(Math.abs(position[axis] - bounds[side.boundsPoint][axis]));\n                        if (sideDistance < min) {\n                            min = sideDistance;\n                            minSide = side;\n                        } else if (sideDistance === min &&\n                            (position[axis] - targetPoint[axis]) * side.secondarySign > (position[minSide.axis] - targetPoint[minSide.axis]) * minSide.secondarySign) {\n                            minSide = side;\n                        }\n                    }\n                    return minSide.name;\n                },\n\n                _sameSideDistance: function(connector) {\n                    var bounds = connector.shape.bounds(ROTATED);\n                    return Math.min(bounds.width, bounds.height) / this.SAME_SIDE_DISTANCE_RATIO;\n                },\n\n                _connectorPoints: function(start, end, sourceConnector, targetConnector) {\n                    var sourceConnectorSide = this._connectorSide(sourceConnector, end);\n                    var targetConnectorSide = this._connectorSide(targetConnector, start);\n                    var deltaX = end.x - start.x;\n                    var deltaY = end.y - start.y;\n                    var sameSideDistance = this._sameSideDistance(sourceConnector);\n                    var result = [];\n                    var pointX, pointY;\n\n                    if (sourceConnectorSide === TOP || sourceConnectorSide == BOTTOM) {\n                        if (targetConnectorSide == TOP || targetConnectorSide == BOTTOM) {\n                            if (sourceConnectorSide == targetConnectorSide) {\n                                if (sourceConnectorSide == TOP) {\n                                    pointY = Math.min(start.y, end.y) - sameSideDistance;\n                                } else {\n                                    pointY = Math.max(start.y, end.y) + sameSideDistance;\n                                }\n                                result = [new Point(start.x, pointY), new Point(end.x, pointY)];\n                            } else {\n                                result = [new Point(start.x, start.y + deltaY / 2), new Point(end.x, start.y + deltaY / 2)];\n                            }\n                        } else {\n                            result = [new Point(start.x, end.y)];\n                        }\n                    } else {\n                        if (targetConnectorSide == LEFT || targetConnectorSide == RIGHT) {\n                            if (sourceConnectorSide == targetConnectorSide) {\n                                if (sourceConnectorSide == LEFT) {\n                                    pointX = Math.min(start.x, end.x) - sameSideDistance;\n                                } else {\n                                    pointX = Math.max(start.x, end.x) + sameSideDistance;\n                                }\n                                result = [new Point(pointX, start.y), new Point(pointX, end.y)];\n                            } else {\n                                result = [new Point(start.x + deltaX / 2, start.y), new Point(start.x + deltaX / 2, start.y + deltaY)];\n                            }\n                        } else {\n                            result = [new Point(end.x, start.y)];\n                        }\n                    }\n                    return result;\n                },\n\n                _floatingPoints: function(start, end, sourceConnector) {\n                    var sourceConnectorSide = sourceConnector ? this._connectorSide(sourceConnector, end) : null;\n                    var cascadeStartHorizontal = this._startHorizontal(start, end, sourceConnectorSide);\n                    var points = [start, start, end, end];\n                    var deltaX = end.x - start.x;\n                    var deltaY = end.y - start.y;\n                    var length = points.length;\n                    var shiftX;\n                    var shiftY;\n\n                    // note that this is more generic than needed for only two intermediate points.\n                    for (var idx = 1; idx < length - 1; ++idx) {\n                        if (cascadeStartHorizontal) {\n                            if (idx % 2 !== 0) {\n                                shiftX = deltaX / (length / 2);\n                                shiftY = 0;\n                            }\n                            else {\n                                shiftX = 0;\n                                shiftY = deltaY / ((length - 1) / 2);\n                            }\n                        }\n                        else {\n                            if (idx % 2 !== 0) {\n                                shiftX = 0;\n                                shiftY = deltaY / (length / 2);\n                            }\n                            else {\n                                shiftX = deltaX / ((length - 1) / 2);\n                                shiftY = 0;\n                            }\n                        }\n                        points[idx] = new Point(points[idx - 1].x + shiftX, points[idx - 1].y + shiftY);\n                    }\n                    // need to fix the wrong 1.5 factor of the last intermediate point\n                    idx--;\n                    if ((cascadeStartHorizontal && (idx % 2 !== 0)) || (!cascadeStartHorizontal && (idx % 2 === 0))) {\n                        points[length - 2] = new Point(points[length - 1].x, points[length - 2].y);\n                    } else {\n                        points[length - 2] = new Point(points[length - 2].x, points[length - 1].y);\n                    }\n\n                    return [points[1], points[2]];\n                },\n\n                _startHorizontal: function(start, end, sourceSide) {\n                    var horizontal;\n                    if (sourceSide !== null && (sourceSide === RIGHT || sourceSide === LEFT)) {\n                        horizontal = true;\n                    } else {\n                        horizontal = Math.abs(start.x - end.x) > Math.abs(start.y - end.y);\n                    }\n\n                    return horizontal;\n                }\n            });\n\n    // Adorners =========================================\n\n            var AdornerBase = Class.extend({\n                init: function(diagram, options) {\n                    var that = this;\n                    that.diagram = diagram;\n                    that.options = deepExtend({}, that.options, options);\n                    that.visual = new Group();\n                    that.diagram._adorners.push(that);\n                },\n                refresh: function() {\n\n                }\n            });\n\n            var ConnectionEditAdorner = AdornerBase.extend({\n                init: function(connection, options) {\n                    var that = this, diagram;\n                    that.connection = connection;\n                    diagram = that.connection.diagram;\n                    that._ts = diagram.toolService;\n                    AdornerBase.fn.init.call(that, diagram, options);\n                    var sp = that.connection.sourcePoint();\n                    var tp = that.connection.targetPoint();\n                    that.spVisual = new Circle(deepExtend(that.options.handles, { center: sp }));\n                    that.epVisual = new Circle(deepExtend(that.options.handles, { center: tp }));\n                    that.visual.append(that.spVisual);\n                    that.visual.append(that.epVisual);\n                },\n\n                options: {\n                    handles: {}\n                },\n\n                _getCursor: function() {\n                    return Cursors.move;\n                },\n\n                start: function(p) {\n                    this.handle = this._hitTest(p);\n                    this.startPoint = p;\n                    this._initialSource = this.connection.source();\n                    this._initialTarget = this.connection.target();\n                    switch (this.handle) {\n                        case -1:\n                            if (this.connection.targetConnector) {\n                                this._ts._connectionManipulation(this.connection, this.connection.targetConnector.shape);\n                            }\n                            break;\n                        case 1:\n                            if (this.connection.sourceConnector) {\n                                this._ts._connectionManipulation(this.connection, this.connection.sourceConnector.shape);\n                            }\n                            break;\n                    }\n                },\n\n                move: function(handle, p) {\n                    switch (handle) {\n                        case -1:\n                            this.connection.source(p);\n                            break;\n                        case 1:\n                            this.connection.target(p);\n                            break;\n                        default:\n                            var delta = p.minus(this.startPoint);\n                            this.startPoint = p;\n                            if (!this.connection.sourceConnector) {\n                                this.connection.source(this.connection.sourcePoint().plus(delta));\n                            }\n                            if (!this.connection.targetConnector) {\n                                this.connection.target(this.connection.targetPoint().plus(delta));\n                            }\n                            break;\n                    }\n                    this.refresh();\n                    return true;\n                },\n\n                stop: function(p) {\n                    var ts = this.diagram.toolService, item = ts.hoveredItem, target;\n                    if (ts._hoveredConnector) {\n                        target = ts._hoveredConnector._c;\n                    } else if (item && item instanceof diagram.Shape) {\n                        target = item.getConnector(AUTO) || item.getConnector(p);\n                    } else {\n                        target = p;\n                    }\n\n                    if (this.handle === -1) {\n                        this.connection.source(target);\n                    } else if (this.handle === 1) {\n                        this.connection.target(target);\n                    }\n\n                    this.handle = undefined$1;\n                    this._ts._connectionManipulation();\n                    return new ConnectionEditUndoUnit(this.connection, this._initialSource, this._initialTarget);\n                },\n\n                _hitTest: function(point) {\n                    var sourcePoint = this.connection.sourcePoint();\n                    var targetPoint = this.connection.targetPoint();\n                    var radiusX = this.options.handles.width / 2 + HIT_TEST_DISTANCE;\n                    var radiusY = this.options.handles.height / 2 + HIT_TEST_DISTANCE;\n                    var sourcePointDistance = sourcePoint.distanceTo(point);\n                    var targetPointDistance = targetPoint.distanceTo(point);\n                    var sourceHandle = new Rect(sourcePoint.x, sourcePoint.y).inflate(radiusX, radiusY).contains(point);\n                    var targetHandle = new Rect(targetPoint.x, targetPoint.y).inflate(radiusX, radiusY).contains(point);\n                    var handle = 0;\n\n                    if (sourceHandle && (!targetHandle || sourcePointDistance < targetPointDistance)) {\n                        handle = -1;\n                    } else if (targetHandle && (!sourceHandle || targetPointDistance < sourcePointDistance)) {\n                        handle = 1;\n                    }\n\n                    return handle;\n                },\n\n                refresh: function() {\n                    this.spVisual.redraw({ center: this.diagram.modelToLayer(this.connection.sourcePoint()) });\n                    this.epVisual.redraw({ center: this.diagram.modelToLayer(this.connection.targetPoint()) });\n                }\n            });\n\n            var ConnectorsAdorner = AdornerBase.extend({\n                init: function(diagram, options) {\n                    var that = this;\n                    AdornerBase.fn.init.call(that, diagram, options);\n                    that._refreshHandler = function(e) {\n                        if (e.item == that.shape) {\n                            that.refresh();\n                        }\n                    };\n                },\n\n                show: function(shape) {\n                    var that = this, len, i, ctr;\n                    that._visible = true;\n                    that.shape = shape;\n                    that.diagram.bind(ITEMBOUNDSCHANGE, that._refreshHandler);\n                    len = shape.connectors.length;\n                    that.connectors = [];\n                    that._clearVisual();\n                    for (i = 0; i < len; i++) {\n                        ctr = new ConnectorVisual(shape.connectors[i]);\n                        that.connectors.push(ctr);\n                        that.visual.append(ctr.visual);\n                    }\n                    that.visual.visible(true);\n                    that.refresh();\n                },\n\n                _clearVisual: function() {\n                    var that = this;\n                    if (that.diagram._cachedTouchTarget) {\n                        that._keepCachedTouchTarget();\n                    } else {\n                        that.visual.clear();\n                    }\n                },\n\n                _keepCachedTouchTarget: function() {\n                    var that = this,\n                        visualChildren = that.visual.children;\n                    var childrenCount = visualChildren.length;\n                    var index = inArray(that.diagram._cachedTouchTarget, visualChildren);\n                    for (var i = childrenCount - 1; i >= 0; i--) {\n                        if (i == index) {\n                            continue;\n                        }\n                        that.visual.remove(visualChildren[i]);\n                    }\n                },\n\n                destroy: function() {\n                    var that = this;\n                    that.diagram.unbind(ITEMBOUNDSCHANGE, that._refreshHandler);\n                    that.shape = undefined$1;\n                    that._visible = undefined$1;\n                    that.visual.visible(false);\n                },\n\n                _hitTest: function(p) {\n                    var ctr, i;\n                    for (i = 0; i < this.connectors.length; i++) {\n                        ctr = this.connectors[i];\n                        if (ctr._hitTest(p)) {\n                            ctr._hover(true);\n                            this.diagram.toolService._hoveredConnector = ctr;\n                            break;\n                        }\n                    }\n                },\n\n                refresh: function() {\n                    if (this.shape) {\n                        var bounds = this.shape.bounds();\n                            bounds = this.diagram.modelToLayer(bounds);\n                        this.visual.position(bounds.topLeft());\n                        $.each(this.connectors, function() {\n                            this.refresh();\n                        });\n                    }\n                }\n            });\n\n            function hitToOppositeSide(hit, bounds) {\n                var result;\n\n                if (hit.x == -1 && hit.y == -1) {\n                    result = bounds.bottomRight();\n                } else if (hit.x == 1 && hit.y == 1) {\n                    result = bounds.topLeft();\n                } else if (hit.x == -1 && hit.y == 1) {\n                    result = bounds.topRight();\n                } else if (hit.x == 1 && hit.y == -1) {\n                    result = bounds.bottomLeft();\n                } else if (hit.x === 0 && hit.y == -1) {\n                    result = bounds.bottom();\n                } else if (hit.x === 0 && hit.y == 1) {\n                    result = bounds.top();\n                } else if (hit.x == 1 && hit.y === 0) {\n                    result = bounds.left();\n                } else if (hit.x == -1 && hit.y === 0) {\n                    result = bounds.right();\n                }\n\n                return result;\n            }\n\n            var ResizingAdorner = AdornerBase.extend({\n                init: function(diagram, options) {\n                    var that = this;\n                    AdornerBase.fn.init.call(that, diagram, options);\n                    that._manipulating = false;\n                    that.map = [];\n                    that.shapes = [];\n\n                    that._initSelection();\n                    that._createHandles();\n                    that.redraw();\n                    that.diagram.bind(\"select\", function(e) {\n                        that._initialize(e.selected);\n                    });\n\n                    that._refreshHandler = function() {\n                        if (!that._internalChange) {\n                            that.refreshBounds();\n                            that.refresh();\n                        }\n                    };\n\n                    that._rotatedHandler = function() {\n                        if (that.shapes.length == 1) {\n                            that._angle = that.shapes[0].rotate().angle;\n                        }\n                        that._refreshHandler();\n                    };\n\n                    that.diagram.bind(ITEMBOUNDSCHANGE, that._refreshHandler).bind(ITEMROTATE, that._rotatedHandler);\n                    that.refreshBounds();\n                    that.refresh();\n                },\n\n                options: {\n                    handles: {\n                        fill: {\n                            color: \"#fff\"\n                        },\n                        stroke: {\n                            color: \"#282828\"\n                        },\n                        height: 7,\n                        width: 7,\n                        hover: {\n                            fill: {\n                                color: \"#282828\"\n                            },\n                            stroke: {\n                                color: \"#282828\"\n                            }\n                        }\n                    },\n                    selectable: {\n                        stroke: {\n                            color: \"#778899\",\n                            width: 1,\n                            dashType: \"dash\"\n                        },\n                        fill: {\n                            color: TRANSPARENT\n                        }\n                    },\n                    offset: 10\n                },\n\n                _initSelection: function() {\n                    var that = this;\n                    var diagram = that.diagram;\n                    var selectable = diagram.options.selectable;\n                    var options = deepExtend({}, that.options.selectable, selectable);\n                    that.rect = new Rectangle(options);\n                    that.visual.append(that.rect);\n                },\n\n                _resizable: function() {\n                    return this.options.editable && this.options.editable.resize !== false;\n                },\n\n                _handleOptions: function() {\n                    return (this.options.editable.resize || {}).handles || this.options.handles;\n                },\n\n                _createHandles: function() {\n                    var handles, item, y, x;\n\n                    if (this._resizable()) {\n                        handles = this._handleOptions();\n                        for (x = -1; x <= 1; x++) {\n                            for (y = -1; y <= 1; y++) {\n                                if ((x !== 0) || (y !== 0)) { // (0, 0) element, (-1, -1) top-left, (+1, +1) bottom-right\n                                    item = new Rectangle(handles);\n                                    item.drawingElement._hover = this._hover.bind(this);\n                                    this.map.push({ x: x, y: y, visual: item });\n                                    this.visual.append(item);\n                                }\n                            }\n                        }\n                    }\n                },\n\n                bounds: function(value) {\n                    if (value) {\n                        this._innerBounds = value.clone();\n                        this._bounds = this.diagram.modelToLayer(value).inflate(this.options.offset, this.options.offset);\n                    } else {\n                        return this._bounds;\n                    }\n                },\n\n                _hitTest: function(p) {\n                    var tp = this.diagram.modelToLayer(p),\n                        i, hit, handleBounds, handlesCount = this.map.length, handle;\n\n                    if (this._angle) {\n                        tp = tp.clone().rotate(this._bounds.center(), this._angle);\n                    }\n\n                    if (this._resizable()) {\n                        for (i = 0; i < handlesCount; i++) {\n                            handle = this.map[i];\n                            hit = new Point(handle.x, handle.y);\n                            handleBounds = this._getHandleBounds(hit); //local coordinates\n                            handleBounds.offset(this._bounds.x, this._bounds.y);\n                            if (handleBounds.contains(tp)) {\n                                return hit;\n                            }\n                        }\n                    }\n\n                    if (this._bounds.contains(tp)) {\n                        return new Point(0, 0);\n                    }\n                },\n\n                _getHandleBounds: function(p) {\n                    if (this._resizable()) {\n                        var handles = this._handleOptions(),\n                            w = handles.width,\n                            h = handles.height,\n                            r = new Rect(0, 0, w, h);\n\n                        if (p.x < 0) {\n                            r.x = - w / 2;\n                        } else if (p.x === 0) {\n                            r.x = Math.floor(this._bounds.width / 2) - w / 2;\n                        } else if (p.x > 0) {\n                            r.x = this._bounds.width + 1.0 - w / 2;\n                        } if (p.y < 0) {\n                            r.y = - h / 2;\n                        } else if (p.y === 0) {\n                            r.y = Math.floor(this._bounds.height / 2) - h / 2;\n                        } else if (p.y > 0) {\n                            r.y = this._bounds.height + 1.0 - h / 2;\n                        }\n\n                        return r;\n                    }\n                },\n\n                _getCursor: function(point) {\n                    var hit = this._hitTest(point);\n                    if (hit && (hit.x >= -1) && (hit.x <= 1) && (hit.y >= -1) && (hit.y <= 1) && this._resizable()) {\n                        var angle = this._angle;\n                        if (angle) {\n                            angle = 360 - angle;\n                            hit.rotate(new Point(0, 0), angle);\n                            hit = new Point(Math.round(hit.x), Math.round(hit.y));\n                        }\n\n                        if (hit.x == -1 && hit.y == -1) {\n                            return \"nw-resize\";\n                        }\n                        if (hit.x == 1 && hit.y == 1) {\n                            return \"se-resize\";\n                        }\n                        if (hit.x == -1 && hit.y == 1) {\n                            return \"sw-resize\";\n                        }\n                        if (hit.x == 1 && hit.y == -1) {\n                            return \"ne-resize\";\n                        }\n                        if (hit.x === 0 && hit.y == -1) {\n                            return \"n-resize\";\n                        }\n                        if (hit.x === 0 && hit.y == 1) {\n                            return \"s-resize\";\n                        }\n                        if (hit.x == 1 && hit.y === 0) {\n                            return \"e-resize\";\n                        }\n                        if (hit.x == -1 && hit.y === 0) {\n                            return \"w-resize\";\n                        }\n                    }\n                    return this._manipulating ? Cursors.move : Cursors.select;\n                },\n\n                _initialize: function() {\n                    var that = this, i, item,\n                        items = that.diagram.select();\n\n                    that.shapes = [];\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (item instanceof diagram.Shape) {\n                            that.shapes.push(item);\n                            item._rotationOffset = new Point();\n                        }\n                    }\n\n                    that._angle = that.shapes.length == 1 ? that.shapes[0].rotate().angle : 0;\n                    that._startAngle = that._angle;\n                    that._rotates();\n                    that._positions();\n                    that.refreshBounds();\n                    that.refresh();\n                    that.redraw();\n                },\n\n                _rotates: function() {\n                    var that = this, i, shape;\n                    that.initialRotates = [];\n                    for (i = 0; i < that.shapes.length; i++) {\n                        shape = that.shapes[i];\n                        that.initialRotates.push(shape.rotate().angle);\n                    }\n                },\n\n                _positions: function() {\n                    var that = this, i, shape;\n                    that.initialStates = [];\n                    for (i = 0; i < that.shapes.length; i++) {\n                        shape = that.shapes[i];\n                        that.initialStates.push(shape.bounds());\n                    }\n                },\n\n                _hover: function(value, element) {\n                    if (this._resizable()) {\n                        var handleOptions = this._handleOptions(),\n                            hover = handleOptions.hover,\n                            stroke = handleOptions.stroke,\n                            fill = handleOptions.fill;\n\n                        if (value && Utils.isDefined(hover.stroke)) {\n                            stroke = deepExtend({}, stroke, hover.stroke);\n                        }\n\n                        if (value && Utils.isDefined(hover.fill)) {\n                            fill = hover.fill;\n                        }\n                        element.stroke(stroke.color, stroke.width, stroke.opacity);\n                        element.fill(fill.color, fill.opacity);\n                    }\n                },\n\n                start: function(p) {\n                    this._sp = p;\n                    this._cp = p;\n                    this._lp = p;\n                    this._manipulating = true;\n                    this._internalChange = true;\n                    this.shapeStates = [];\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        this.shapeStates.push(shape.bounds());\n                    }\n                },\n\n                redraw: function() {\n                    var i, handle,\n                        visibleHandles = this._resizable();\n\n                    for (i = 0; i < this.map.length; i++) {\n                        handle = this.map[i];\n                        handle.visual.visible(visibleHandles);\n                    }\n                },\n\n                angle: function(value) {\n                    if (defined(value)) {\n                        this._angle = value;\n                    }\n\n                    return this._angle;\n                },\n\n                rotate: function() {\n                    var center = this._innerBounds.center();\n                    var currentAngle = this.angle();\n                    this._internalChange = true;\n                    for (var i = 0; i < this.shapes.length; i++) {\n                        var shape = this.shapes[i];\n                        currentAngle = (currentAngle + this.initialRotates[i] - this._startAngle) % 360;\n                        shape.rotate(currentAngle, center);\n                    }\n                    this.refresh();\n                },\n\n                move: function(handle, p) {\n                    var delta, dragging,\n                        dtl = new Point(),\n                        dbr = new Point(),\n                        bounds, center, shape,\n                        i, angle, newBounds,\n                        changed = 0, staticPoint,\n                        scaleX, scaleY;\n\n                    if (handle.y === -2 && handle.x === -1) {\n                        center = this._innerBounds.center();\n                        this._angle = this._truncateAngle(Utils.findAngle(center, p));\n                        for (i = 0; i < this.shapes.length; i++) {\n                            shape = this.shapes[i];\n                            angle = (this._angle + this.initialRotates[i] - this._startAngle) % 360;\n                            shape.rotate(angle, center);\n                            if (shape.hasOwnProperty(\"layout\")) {\n                                shape.layout(shape);\n                            }\n                            this._rotating = true;\n                        }\n                        this.refresh();\n                    } else {\n                        if (this.shouldSnap()) {\n                            var thr = this._truncateDistance(p.minus(this._lp));\n                            // threshold\n                            if (thr.x === 0 && thr.y === 0) {\n                                this._cp = p;\n                                return;\n                            }\n                            delta = thr;\n                            this._lp = new Point(this._lp.x + thr.x, this._lp.y + thr.y);\n                        } else {\n                            delta = p.minus(this._cp);\n                        }\n\n                        if (this.isDragHandle(handle)) {\n                            dbr = dtl = delta; // dragging\n                            dragging = true;\n                        } else {\n                            if (this._angle) { // adjust the delta so that resizers resize in the correct direction after rotation.\n                                delta.rotate(new Point(0, 0), this._angle);\n                            }\n                            if (handle.x == -1) {\n                                dtl.x = delta.x;\n                            } else if (handle.x == 1) {\n                                dbr.x = delta.x;\n                            }\n                            if (handle.y == -1) {\n                                dtl.y = delta.y;\n                            } else if (handle.y == 1) {\n                                dbr.y = delta.y;\n                            }\n                        }\n\n                        if (!dragging) {\n                            staticPoint = hitToOppositeSide(handle, this._innerBounds);\n                            scaleX = (this._innerBounds.width + delta.x * handle.x) / this._innerBounds.width;\n                            scaleY = (this._innerBounds.height + delta.y * handle.y) / this._innerBounds.height;\n                        }\n\n                        for (i = 0; i < this.shapes.length; i++) {\n                            shape = this.shapes[i];\n                            bounds = shape.bounds();\n                            if (dragging) {\n                                if (!canDrag(shape)) {\n                                    continue;\n                                }\n                                newBounds = this._displaceBounds(bounds, dtl, dbr, dragging);\n                            } else {\n                                newBounds = bounds.clone();\n                                newBounds.scale(scaleX, scaleY, staticPoint, this._innerBounds.center(), shape.rotate().angle);\n                                var newCenter = newBounds.center(); // fixes the new rotation center.\n                                newCenter.rotate(bounds.center(), -this._angle);\n                                newBounds = new Rect(newCenter.x - newBounds.width / 2, newCenter.y - newBounds.height / 2, newBounds.width, newBounds.height);\n                            }\n                            if (newBounds.width >= shape.options.minWidth && newBounds.height >= shape.options.minHeight) { // if we up-size very small shape\n                                var oldBounds = bounds;\n                                shape.bounds(newBounds);\n                                if (shape.hasOwnProperty(\"layout\")) {\n                                    shape.layout(shape, oldBounds, newBounds);\n                                }\n                                if (oldBounds.width !== newBounds.width || oldBounds.height !== newBounds.height) {\n                                    shape.rotate(shape.rotate().angle); // forces the rotation to update it's rotation center\n                                }\n                                changed += 1;\n                            }\n                        }\n\n                        if (changed) {\n                            if (changed == i) {\n                                newBounds = this._displaceBounds(this._innerBounds, dtl, dbr, dragging);\n                                this.bounds(newBounds);\n                            } else {\n                                this.refreshBounds();\n                            }\n                            this.refresh();\n                        }\n\n                        this._positions();\n                    }\n\n                    this._cp = p;\n                },\n\n                isDragHandle: function(handle) {\n                    return handle.x === 0 && handle.y === 0;\n                },\n\n                cancel: function() {\n                    var shapes = this.shapes;\n                    var states = this.shapeStates;\n                    for (var idx = 0; idx < shapes.length; idx++) {\n                        shapes[idx].bounds(states[idx]);\n                    }\n                    this.refreshBounds();\n                    this.refresh();\n                    this._manipulating = undefined$1;\n                    this._internalChange = undefined$1;\n                    this._rotating = undefined$1;\n                },\n\n                _truncatePositionToGuides: function(bounds) {\n                    if (this.diagram.ruler) {\n                        return this.diagram.ruler.truncatePositionToGuides(bounds);\n                    }\n                    return bounds;\n                },\n\n                _truncateSizeToGuides: function(bounds) {\n                    if (this.diagram.ruler) {\n                        return this.diagram.ruler.truncateSizeToGuides(bounds);\n                    }\n                    return bounds;\n                },\n\n                _truncateAngle: function(a) {\n                    var snap = this.snapOptions();\n                    var snapAngle = Math.max(snap.angle || DEFAULT_SNAP_ANGLE, MIN_SNAP_ANGLE);\n                    return snap ? Math.floor((a % 360) / snapAngle) * snapAngle : (a % 360);\n                },\n\n                _truncateDistance: function(d) {\n                    if (d instanceof diagram.Point) {\n                        return new diagram.Point(this._truncateDistance(d.x), this._truncateDistance(d.y));\n                    } else {\n                        var snap = this.snapOptions() || {};\n                        var snapSize = Math.max(snap.size || DEFAULT_SNAP_SIZE, MIN_SNAP_SIZE);\n                        return snap ? Math.floor(d / snapSize) * snapSize : d;\n                    }\n                },\n\n                snapOptions: function() {\n                    var editable = this.diagram.options.editable;\n                    var snap = ((editable || {}).drag || {}).snap || {};\n                    return snap;\n                },\n\n                shouldSnap: function() {\n                    var editable = this.diagram.options.editable;\n                    var drag = (editable || {}).drag;\n                    var snap = (drag || {}).snap;\n                    return editable !== false && drag !== false && snap !== false;\n                },\n\n                _displaceBounds: function(bounds, dtl, dbr, dragging) {\n                    var tl = bounds.topLeft().plus(dtl),\n                        br = bounds.bottomRight().plus(dbr),\n                        newBounds = Rect.fromPoints(tl, br),\n                        newCenter;\n                    if (!dragging) {\n                        newCenter = newBounds.center();\n                        newCenter.rotate(bounds.center(), -this._angle);\n                        newBounds = new Rect(newCenter.x - newBounds.width / 2, newCenter.y - newBounds.height / 2, newBounds.width, newBounds.height);\n                    }\n                    return newBounds;\n                },\n\n                stop: function() {\n                    var unit, i, shape;\n                    if (this._cp != this._sp) {\n                        if (this._rotating) {\n                            unit = new RotateUnit(this, this.shapes, this.initialRotates);\n                            this._rotating = false;\n                        } else if (this._diffStates()) {\n                            if (this.diagram.ruler) {\n                                for (i = 0; i < this.shapes.length; i++) {\n                                    shape = this.shapes[i];\n                                    var bounds = shape.bounds();\n                                    bounds = this._truncateSizeToGuides(this._truncatePositionToGuides(bounds));\n                                    shape.bounds(bounds);\n                                    this.refreshBounds();\n                                    this.refresh();\n                                }\n                            }\n                            for (i = 0; i < this.shapes.length; i++) {\n                                shape = this.shapes[i];\n                                shape.updateModel();\n                            }\n                            unit = new TransformUnit(this.shapes, this.shapeStates, this);\n                            this.diagram._syncShapeChanges();\n                        }\n                    }\n\n                    this._manipulating = undefined$1;\n                    this._internalChange = undefined$1;\n                    this._rotating = undefined$1;\n                    return unit;\n                },\n\n                _diffStates: function() {\n                    var shapes = this.shapes;\n                    var states = this.shapeStates;\n                    for (var idx = 0; idx < shapes.length; idx++) {\n                        if (!shapes[idx].bounds().equals(states[idx])) {\n                            return true;\n                        }\n                    }\n                    return false;\n                },\n\n                refreshBounds: function() {\n                    var bounds = this.shapes.length == 1 ?\n                        this.shapes[0].bounds().clone() :\n                        this.diagram.boundingBox(this.shapes, true);\n\n                    this.bounds(bounds);\n                },\n\n                refresh: function() {\n                    var that = this, b, bounds;\n                    if (this.shapes.length > 0) {\n                        bounds = this.bounds();\n                        this.visual.visible(true);\n                        this.visual.position(bounds.topLeft());\n                        $.each(this.map, function() {\n                            b = that._getHandleBounds(new Point(this.x, this.y));\n                            this.visual.position(b.topLeft());\n                        });\n                        this.visual.position(bounds.topLeft());\n\n                        var center = new Point(bounds.width / 2, bounds.height / 2);\n                        this.visual.rotate(this._angle, center);\n                        this.rect.redraw({ width: bounds.width, height: bounds.height });\n                        if (this.rotationThumb) {\n                            var thumb = this.options.editable.rotate.thumb;\n                            this._rotationThumbBounds = new Rect(bounds.center().x, bounds.y + thumb.y, 0, 0).inflate(thumb.width);\n                            this.rotationThumb.redraw({ x: bounds.width / 2 - thumb.width / 2 });\n                        }\n                    } else {\n                        this.visual.visible(false);\n                    }\n                }\n            });\n\n            var Selector = Class.extend({\n                init: function(diagram) {\n                    var selectable = diagram.options.selectable;\n                    this.options = deepExtend({}, this.options, selectable);\n\n                    this.visual = new Rectangle(this.options);\n                    this.diagram = diagram;\n                },\n                options: {\n                    stroke: {\n                        color: \"#778899\",\n                        width: 1,\n                        dashType: \"dash\"\n                    },\n                    fill: {\n                        color: TRANSPARENT\n                    }\n                },\n                start: function(p) {\n                    this._sp = this._ep = p;\n                    this.refresh();\n                    this.diagram._adorn(this, true);\n                },\n                end: function() {\n                    this._sp = this._ep = undefined$1;\n                    this.diagram._adorn(this, false);\n                },\n                bounds: function(value) {\n                    if (value) {\n                        this._bounds = value;\n                    }\n                    return this._bounds;\n                },\n                move: function(p) {\n                    this._ep = p;\n                    this.refresh();\n                },\n                refresh: function() {\n                    if (this._sp) {\n                        var visualBounds = Rect.fromPoints(this.diagram.modelToLayer(this._sp), this.diagram.modelToLayer(this._ep));\n                        this.bounds(Rect.fromPoints(this._sp, this._ep));\n                        this.visual.position(visualBounds.topLeft());\n                        this.visual.redraw({ height: visualBounds.height + 1, width: visualBounds.width + 1 });\n                    }\n                }\n            });\n\n            var ConnectorVisual = Class.extend({\n                init: function(connector) {\n                    this.options = deepExtend({}, connector.options);\n                    this._c = connector;\n                    this.visual = new Circle(this.options);\n                    this.refresh();\n                },\n                _hover: function(value) {\n                    var options = this.options,\n                        hover = options.hover,\n                        stroke = options.stroke,\n                        fill = options.fill;\n\n                    if (value && Utils.isDefined(hover.stroke)) {\n                        stroke = deepExtend({}, stroke, hover.stroke);\n                    }\n\n                    if (value && Utils.isDefined(hover.fill)) {\n                        fill = hover.fill;\n                    }\n\n                    this.visual.redraw({\n                        stroke: stroke,\n                        fill: fill\n                    });\n                },\n                refresh: function() {\n                    var p = this._c.shape.diagram.modelToView(this._c.position()),\n                        relative = p.minus(this._c.shape.bounds(\"transformed\").topLeft()),\n                        value = new Rect(p.x, p.y, 0, 0);\n                    value.inflate(this.options.width / 2, this.options.height / 2);\n                    this._visualBounds = value;\n                    this.visual.redraw({ center: new Point(relative.x, relative.y) });\n                },\n                _hitTest: function(p) {\n                    var tp = this._c.shape.diagram.modelToView(p);\n                    return this._visualBounds.contains(tp);\n                }\n            });\n\n            function canDrag(element) {\n                var editable = element.options.editable;\n                return editable && editable.drag !== false;\n            }\n\n            function hitTestShapeConnectors(shape, point) {\n                var connector, position, rect;\n                for (var idx = 0; idx < shape.connectors.length; idx++) {\n                    connector = shape.connectors[idx];\n                    position = connector.position();\n                    rect = new Rect(position.x, position.y);\n                    rect.inflate(HIT_TEST_DISTANCE, HIT_TEST_DISTANCE);\n                    if (rect.contains(point)) {\n                        return connector;\n                    }\n                }\n            }\n\n            function noMeta(meta) {\n                return meta.ctrlKey === false && meta.altKey === false && meta.shiftKey === false;\n            }\n\n            deepExtend(diagram, {\n                CompositeUnit: CompositeUnit,\n                TransformUnit: TransformUnit,\n                PanUndoUnit: PanUndoUnit,\n                AddShapeUnit: AddShapeUnit,\n                AddConnectionUnit: AddConnectionUnit,\n                DeleteShapeUnit: DeleteShapeUnit,\n                DeleteConnectionUnit: DeleteConnectionUnit,\n                ConnectionEditAdorner: ConnectionEditAdorner,\n                ConnectionTool: ConnectionTool,\n                ConnectorVisual: ConnectorVisual,\n                UndoRedoService: UndoRedoService,\n                ResizingAdorner: ResizingAdorner,\n                Selector: Selector,\n                ToolService: ToolService,\n                ConnectorsAdorner: ConnectorsAdorner,\n                LayoutUndoUnit: LayoutUndoUnit,\n                ConnectionEditUnit: ConnectionEditUnit,\n                ToFrontUnit: ToFrontUnit,\n                ToBackUnit: ToBackUnit,\n                ConnectionRouterBase: ConnectionRouterBase,\n                PolylineRouter: PolylineRouter,\n                CascadingRouter: CascadingRouter,\n                SelectionTool: SelectionTool,\n                ScrollerTool: ScrollerTool,\n                PointerTool: PointerTool,\n                ConnectionEditTool: ConnectionEditTool,\n                RotateUnit: RotateUnit\n            });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram,\n            Graph = diagram.Graph,\n            Node = diagram.Node,\n            Link = diagram.Link,\n            deepExtend = kendo.deepExtend,\n            Size = diagram.Size,\n            Rect = diagram.Rect,\n            Dictionary = diagram.Dictionary,\n            Set = diagram.Set,\n            HyperTree = diagram.Graph,\n            Utils = diagram.Utils,\n            Point = diagram.Point,\n            EPSILON = 1e-06,\n            DEG_TO_RAD = Math.PI / 180,\n            contains = Utils.contains,\n            grep = $.grep;\n\n        /**\n         * Base class for layout algorithms.\n         * @type {*}\n         */\n        var LayoutBase = kendo.Class.extend({\n            defaultOptions: {\n                type: \"Tree\",\n                subtype: \"Down\",\n                roots: null,\n                animate: false,\n                //-------------------------------------------------------------------\n                /**\n                 * Force-directed option: whether the motion of the nodes should be limited by the boundaries of the diagram surface.\n                 */\n                limitToView: false,\n                /**\n                 * Force-directed option: the amount of friction applied to the motion of the nodes.\n                 */\n                friction: 0.9,\n                /**\n                 * Force-directed option: the optimal distance between nodes (minimum energy).\n                 */\n                nodeDistance: 50,\n                /**\n                 * Force-directed option: the number of time things are being calculated.\n                 */\n                iterations: 300,\n                //-------------------------------------------------------------------\n                /**\n                 * Tree option: the separation in one direction (depends on the subtype what direction this is).\n                 */\n                horizontalSeparation: 90,\n                /**\n                 * Tree option: the separation in the complementary direction (depends on the subtype what direction this is).\n                 */\n                verticalSeparation: 50,\n\n                //-------------------------------------------------------------------\n                /**\n                 * Tip-over tree option: children-to-parent vertical distance.\n                 */\n                underneathVerticalTopOffset: 15,\n                /**\n                 * Tip-over tree option: children-to-parent horizontal distance.\n                 */\n                underneathHorizontalOffset: 15,\n                /**\n                 * Tip-over tree option: leaf-to-next-branch vertical distance.\n                 */\n                underneathVerticalSeparation: 15,\n                //-------------------------------------------------------------------\n                /**\n                 * Settings object to organize the different components of the diagram in a grid layout structure\n                 */\n                grid: {\n                    /**\n                     * The width of the grid in which components are arranged. Beyond this width a component will be on the next row.\n                     */\n                    width: 1500,\n                    /**\n                     * The left offset of the grid.\n                     */\n                    offsetX: 50,\n                    /**\n                     * The top offset of the grid.\n                     */\n                    offsetY: 50,\n                    /**\n                     * The horizontal padding within a cell of the grid where a single component resides.\n                     */\n                    componentSpacingX: 20,\n                    /**\n                     * The vertical padding within a cell of the grid where a single component resides.\n                     */\n                    componentSpacingY: 20\n                },\n\n                //-------------------------------------------------------------------\n                /**\n                 * Layered option: the separation height/width between the layers.\n                 */\n                layerSeparation: 50,\n                /**\n                 * Layered option: how many rounds of shifting and fine-tuning.\n                 */\n                layeredIterations: 2,\n                /**\n                 * Tree-radial option: the angle at which the layout starts.\n                 */\n                startRadialAngle: 0,\n                /**\n                 * Tree-radial option: the angle at which the layout starts.\n                 */\n                endRadialAngle: 360,\n                /**\n                 * Tree-radial option: the separation between levels.\n                 */\n                radialSeparation: 150,\n                /**\n                 * Tree-radial option: the separation between the root and the first level.\n                 */\n                radialFirstLevelSeparation: 200,\n                /**\n                 * Tree-radial option: whether a virtual roots bing the components in one radial layout.\n                 */\n                keepComponentsInOneRadialLayout: false,\n                //-------------------------------------------------------------------\n\n                // TODO: ensure to change this to false when containers are around\n                ignoreContainers: true,\n                layoutContainerChildren: false,\n                ignoreInvisible: true,\n                animateTransitions: false\n            },\n            init: function() {\n            },\n\n            /**\n             * Organizes the components in a grid.\n             * Returns the final set of nodes (not the Graph).\n             * @param components\n             */\n            gridLayoutComponents: function(components) {\n                if (!components) {\n                    throw \"No components supplied.\";\n                }\n\n                // calculate and cache the bounds of the components\n                Utils.forEach(components, function(c) {\n                    c.calcBounds();\n                });\n\n                // order by decreasing width\n                components.sort(function(a, b) {\n                    return b.bounds.width - a.bounds.width;\n                });\n\n                var maxWidth = this.options.grid.width,\n                    offsetX = this.options.grid.componentSpacingX,\n                    offsetY = this.options.grid.componentSpacingY,\n                    height = 0,\n                    startX = this.options.grid.offsetX,\n                    startY = this.options.grid.offsetY,\n                    x = startX,\n                    y = startY,\n                    i,\n                    resultLinkSet = [],\n                    resultNodeSet = [];\n\n                while (components.length > 0) {\n                    if (x >= maxWidth) {\n                        // start a new row\n                        x = startX;\n                        y += height + offsetY;\n                        // reset the row height\n                        height = 0;\n                    }\n                    var component = components.pop();\n                    this.moveToOffset(component, new Point(x, y));\n                    for (i = 0; i < component.nodes.length; i++) {\n                        resultNodeSet.push(component.nodes[i]); // to be returned in the end\n                    }\n                    for (i = 0; i < component.links.length; i++) {\n                        resultLinkSet.push(component.links[i]);\n                    }\n                    var boundingRect = component.bounds;\n                    var currentHeight = boundingRect.height;\n                    if (currentHeight <= 0 || isNaN(currentHeight)) {\n                        currentHeight = 0;\n                    }\n                    var currentWidth = boundingRect.width;\n                    if (currentWidth <= 0 || isNaN(currentWidth)) {\n                        currentWidth = 0;\n                    }\n\n                    if (currentHeight >= height) {\n                        height = currentHeight;\n                    }\n                    x += currentWidth + offsetX;\n                }\n\n                return {\n                    nodes: resultNodeSet,\n                    links: resultLinkSet\n                };\n            },\n\n            moveToOffset: function(component, p) {\n                var i, j,\n                    bounds = component.bounds,\n                    deltax = p.x - bounds.x,\n                    deltay = p.y - bounds.y;\n\n                for (i = 0; i < component.nodes.length; i++) {\n                    var node = component.nodes[i];\n                    var nodeBounds = node.bounds();\n                    if (nodeBounds.width === 0 && nodeBounds.height === 0 && nodeBounds.x === 0 && nodeBounds.y === 0) {\n                        nodeBounds = new Rect(0, 0, 0, 0);\n                    }\n                    nodeBounds.x += deltax;\n                    nodeBounds.y += deltay;\n                    node.bounds(nodeBounds);\n                }\n                for (i = 0; i < component.links.length; i++) {\n                    var link = component.links[i];\n                    if (link.points) {\n                        var newpoints = [];\n                        var points = link.points;\n                        for (j = 0; j < points.length; j++) {\n                            var pt = points[j];\n                            pt.x += deltax;\n                            pt.y += deltay;\n                            newpoints.push(pt);\n                        }\n                        link.points = newpoints;\n                    }\n                }\n                this.currentHorizontalOffset += bounds.width + this.options.grid.offsetX;\n                return new Point(deltax, deltay);\n            },\n\n            transferOptions: function(options) {\n\n                // Size options lead to stackoverflow and need special handling\n\n                this.options = kendo.deepExtend({}, this.defaultOptions);\n                if (Utils.isUndefined(options)) {\n                    return;\n                }\n\n                this.options = kendo.deepExtend(this.options, options || {});\n            }\n        });\n\n        /**\n         * The data bucket a hypertree holds in its nodes.     *\n         * @type {*}\n         */\n        /* var ContainerGraph = kendo.Class.extend({\n         init: function (diagram) {\n         this.diagram = diagram;\n         this.graph = new Graph(diagram);\n         this.container = null;\n         this.containerNode = null;\n         }\n\n         });*/\n\n        /**\n         * Adapter between the diagram control and the graph representation. It converts shape and connections to nodes and edges taking into the containers and their collapsef state,\n         * the visibility of items and more. If the layoutContainerChildren is true a hypertree is constructed which holds the hierarchy of containers and many conditions are analyzed\n         * to investigate how the effective graph structure looks like and how the layout has to be performed.\n         * @type {*}\n         */\n        var DiagramToHyperTreeAdapter = kendo.Class.extend({\n            init: function(diagram) {\n\n                /**\n                 * The mapping to/from the original nodes.\n                 * @type {Dictionary}\n                 */\n                this.nodeMap = new Dictionary();\n\n                /**\n                 * Gets the mapping of a shape to a container in case the shape sits in a collapsed container.\n                 * @type {Dictionary}\n                 */\n                this.shapeMap = new Dictionary();\n\n                /**\n                 * The nodes being mapped.\n                 * @type {Dictionary}\n                 */\n                this.nodes = [];\n\n                /**\n                 * The connections being mapped.\n                 * @type {Dictionary}\n                 */\n                this.edges = [];\n\n                // the mapping from an edge to all the connections it represents, this can be both because of multiple connections between\n                // two shapes or because a container holds multiple connections to another shape or container.\n                this.edgeMap = new Dictionary();\n\n                /**\n                 * The resulting set of Nodes when the analysis has finished.\n                 * @type {Array}\n                 */\n                this.finalNodes = [];\n\n                /**\n                 * The resulting set of Links when the analysis has finished.\n                 * @type {Array}\n                 */\n                this.finalLinks = [];\n\n                /**\n                 * The items being omitted because of multigraph edges.\n                 * @type {Array}\n                 */\n                this.ignoredConnections = [];\n\n                /**\n                 * The items being omitted because of containers, visibility and other factors.\n                 * @type {Array}\n                 */\n                this.ignoredShapes = [];\n\n                /**\n                 * The map from a node to the partition/hypernode in which it sits. This hyperMap is null if 'options.layoutContainerChildren' is false.\n                 * @type {Dictionary}\n                 */\n                this.hyperMap = new Dictionary();\n\n                /**\n                 * The hypertree contains the hierarchy defined by the containers.\n                 * It's in essence a Graph of Graphs with a tree structure defined by the hierarchy of containers.\n                 * @type {HyperTree}\n                 */\n                this.hyperTree = new Graph();\n\n                /**\n                 * The resulting graph after conversion. Note that this does not supply the information contained in the\n                 * ignored connection and shape collections.\n                 * @type {null}\n                 */\n                this.finalGraph = null;\n\n                this.diagram = diagram;\n            },\n\n            /**\n             * The hyperTree is used when the 'options.layoutContainerChildren' is true. It contains the hierarchy of containers whereby each node is a ContainerGraph.\n             * This type of node has a Container reference to the container which holds the Graph items. There are three possible situations during the conversion process:\n             *  - Ignore the containers: the container are non-existent and only normal shapes are mapped. If a shape has a connection to a container it will be ignored as well\n             *    since there is no node mapped for the container.\n             *  - Do not ignore the containers and leave the content of the containers untouched: the top-level elements are being mapped and the children within a container are not altered.\n             *  - Do not ignore the containers and organize the content of the containers as well: the hypertree is constructed and there is a partitioning of all nodes and connections into the hypertree.\n             *    The only reason a connection or node is not being mapped might be due to the visibility, which includes the visibility change through a collapsed parent container.\n             * @param options\n             */\n            convert: function(options) {\n\n                if (Utils.isUndefined(this.diagram)) {\n                    throw \"No diagram to convert.\";\n                }\n\n                this.options = kendo.deepExtend({\n                        ignoreInvisible: true,\n                        ignoreContainers: true,\n                        layoutContainerChildren: false\n                    },\n                    options || {}\n                );\n\n                this.clear();\n                // create the nodes which participate effectively in the graph analysis\n                this._renormalizeShapes();\n\n                // recreate the incoming and outgoing collections of each and every node\n                this._renormalizeConnections();\n\n                // export the resulting graph\n                this.finalNodes = new Dictionary(this.nodes);\n                this.finalLinks = new Dictionary(this.edges);\n\n                this.finalGraph = new Graph();\n                this.finalNodes.forEach(function(n) {\n                    this.finalGraph.addNode(n);\n                }, this);\n                this.finalLinks.forEach(function(l) {\n                    this.finalGraph.addExistingLink(l);\n                }, this);\n                return this.finalGraph;\n            },\n\n            /**\n             * Maps the specified connection to an edge of the graph deduced from the given diagram.\n             * @param connection\n             * @returns {*}\n             */\n            mapConnection: function(connection) {\n                return this.edgeMap.get(connection.id);\n            },\n\n            /**\n             * Maps the specified shape to a node of the graph deduced from the given diagram.\n             * @param shape\n             * @returns {*}\n             */\n            mapShape: function(shape) {\n                return this.nodeMap.get(shape.id);\n            },\n\n            /**\n             * Gets the edge, if any, between the given nodes.\n             * @param a\n             * @param b\n             */\n            getEdge: function(a, b) {\n                return Utils.first(a.links, function(link) {\n                    return link.getComplement(a) === b;\n                });\n            },\n\n            /**\n             * Clears all the collections used by the conversion process.\n             */\n            clear: function() {\n                this.finalGraph = null;\n                this.hyperTree = (!this.options.ignoreContainers && this.options.layoutContainerChildren) ? new HyperTree() : null;\n                this.hyperMap = (!this.options.ignoreContainers && this.options.layoutContainerChildren) ? new Dictionary() : null;\n                this.nodeMap = new Dictionary();\n                this.shapeMap = new Dictionary();\n                this.nodes = [];\n                this.edges = [];\n                this.edgeMap = new Dictionary();\n                this.ignoredConnections = [];\n                this.ignoredShapes = [];\n                this.finalNodes = [];\n                this.finalLinks = [];\n            },\n\n            /**\n             * The path from a given ContainerGraph to the root (container).\n             * @param containerGraph\n             * @returns {Array}\n             */\n            listToRoot: function(containerGraph) {\n                var list = [];\n                var s = containerGraph.container;\n                if (!s) {\n                    return list;\n                }\n                list.push(s);\n                while (s.parentContainer) {\n                    s = s.parentContainer;\n                    list.push(s);\n                }\n                list.reverse();\n                return list;\n            },\n\n            firstNonIgnorableContainer: function(shape) {\n\n                if (shape.isContainer && !this._isIgnorableItem(shape)) {\n                    return shape;\n                }\n                return !shape.parentContainer ? null : this.firstNonIgnorableContainer(shape.parentContainer);\n            },\n            isContainerConnection: function(a, b) {\n                if (a.isContainer && this.isDescendantOf(a, b)) {\n                    return true;\n                }\n                return b.isContainer && this.isDescendantOf(b, a);\n            },\n\n            /**\n             * Returns true if the given shape is a direct child or a nested container child of the given container.\n             * If the given container and shape are the same this will return false since a shape cannot be its own child.\n             * @param scope\n             * @param a\n             * @returns {boolean}\n             */\n            isDescendantOf: function(scope, a) {\n                if (!scope.isContainer) {\n                    throw \"Expecting a container.\";\n                }\n                if (scope === a) {\n                    return false;\n                }\n                if (contains(scope.children, a)) {\n                    return true;\n                }\n                var containers = [];\n                for (var i = 0, len = scope.children.length; i < len; i++) {\n                    var c = scope.children[i];\n                    if (c.isContainer && this.isDescendantOf(c, a)) {\n                        containers.push(c);\n                    }\n                }\n\n                return containers.length > 0;\n            },\n            isIgnorableItem: function(shape) {\n                if (this.options.ignoreInvisible) {\n                    if (shape.isCollapsed && this._isVisible(shape)) {\n                        return false;\n                    }\n                    if (!shape.isCollapsed && this._isVisible(shape)) {\n                        return false;\n                    }\n                    return true;\n                }\n                else {\n                    return shape.isCollapsed && !this._isTop(shape);\n                }\n            },\n\n            /**\n             *  Determines whether the shape is or needs to be mapped to another shape. This occurs essentially when the shape sits in\n             * a collapsed container hierarchy and an external connection needs a node endpoint. This node then corresponds to the mapped shape and is\n             * necessarily a container in the parent hierarchy of the shape.\n             * @param shape\n             */\n            isShapeMapped: function(shape) {\n                return shape.isCollapsed && !this._isVisible(shape) && !this._isTop(shape);\n            },\n\n            leastCommonAncestor: function(a, b) {\n                if (!a) {\n                    throw \"Parameter should not be null.\";\n                }\n                if (!b) {\n                    throw \"Parameter should not be null.\";\n                }\n\n                if (!this.hyperTree) {\n                    throw \"No hypertree available.\";\n                }\n                var al = this.listToRoot(a);\n                var bl = this.listToRoot(b);\n                var found = null;\n                if (Utils.isEmpty(al) || Utils.isEmpty(bl)) {\n                    return this.hyperTree.root.data;\n                }\n                var xa = al[0];\n                var xb = bl[0];\n                var i = 0;\n                while (xa === xb) {\n                    found = al[i];\n                    i++;\n                    if (i >= al.length || i >= bl.length) {\n                        break;\n                    }\n                    xa = al[i];\n                    xb = bl[i];\n                }\n                if (!found) {\n                    return this.hyperTree.root.data;\n                }\n                else {\n                    return grep(this.hyperTree.nodes, function(n) {\n                        return n.data.container === found;\n                    });\n                }\n            },\n            /**\n             * Determines whether the specified item is a top-level shape or container.\n             * @param item\n             * @returns {boolean}\n             * @private\n             */\n            _isTop: function(item) {\n                return !item.parentContainer;\n            },\n\n            /**\n             * Determines iteratively (by walking up the container stack) whether the specified shape is visible.\n             * This does NOT tell whether the item is not visible due to an explicit Visibility change or due to a collapse state.\n             * @param shape\n             * @returns {*}\n             * @private\n             */\n            _isVisible: function(shape) {\n\n                if (!shape.visible()) {\n                    return false;\n                }\n                return !shape.parentContainer ? shape.visible() : this._isVisible(shape.parentContainer);\n            },\n\n            _isCollapsed: function(shape) {\n\n                if (shape.isContainer && shape.isCollapsed) {\n                    return true;\n                }\n                return shape.parentContainer && this._isCollapsed(shape.parentContainer);\n            },\n\n            /**\n             * First part of the graph creation; analyzing the shapes and containers and deciding whether they should be mapped to a Node.\n             * @private\n             */\n            _renormalizeShapes: function() {\n                // add the nodes, the adjacency structure will be reconstructed later on\n                if (this.options.ignoreContainers) {\n                    for (var i = 0, len = this.diagram.shapes.length; i < len; i++) {\n                        var shape = this.diagram.shapes[i];\n\n                        // if not visible (and ignoring the invisible ones) or a container we skip\n                        if ((this.options.ignoreInvisible && !this._isVisible(shape)) || shape.isContainer) {\n                            this.ignoredShapes.push(shape);\n                            continue;\n                        }\n                        var node = new Node(shape.id, shape);\n                        node.isVirtual = false;\n\n                        // the mapping will always contain singletons and the hyperTree will be null\n                        this.nodeMap.add(shape.id, node);\n                        this.nodes.push(node);\n                    }\n                }\n                else {\n                    throw \"Containers are not supported yet, but stay tuned.\";\n                }\n            },\n\n            /**\n             * Second part of the graph creation; analyzing the connections and deciding whether they should be mapped to an edge.\n             * @private\n             */\n            _renormalizeConnections: function() {\n                if (this.diagram.connections.length === 0) {\n                    return;\n                }\n                for (var i = 0, len = this.diagram.connections.length; i < len; i++) {\n                    var conn = this.diagram.connections[i];\n\n                    if (this.isIgnorableItem(conn)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    var source = !conn.sourceConnector ? null : conn.sourceConnector.shape;\n                    var sink = !conn.targetConnector ? null : conn.targetConnector.shape;\n\n                    // no layout for floating connections\n                    if (!source || !sink) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    if (contains(this.ignoredShapes, source) && !this.shapeMap.containsKey(source)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n                    if (contains(this.ignoredShapes, sink) && !this.shapeMap.containsKey(sink)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    // if the endpoint sits in a collapsed container we need the container rather than the shape itself\n                    if (this.shapeMap.containsKey(source)) {\n                        source = this.shapeMap[source];\n                    }\n                    if (this.shapeMap.containsKey(sink)) {\n                        sink = this.shapeMap[sink];\n                    }\n\n                    var sourceNode = this.mapShape(source);\n                    var sinkNode = this.mapShape(sink);\n                    if ((sourceNode === sinkNode) || this.areConnectedAlready(sourceNode, sinkNode)) {\n                        this.ignoredConnections.push(conn);\n                        continue;\n                    }\n\n                    if (sourceNode === null || sinkNode === null) {\n                        throw \"A shape was not mapped to a node.\";\n                    }\n                    if (this.options.ignoreContainers) {\n                        // much like a floating connection here since at least one end is attached to a container\n                        if (sourceNode.isVirtual || sinkNode.isVirtual) {\n                            this.ignoredConnections.push(conn);\n                            continue;\n                        }\n                        var newEdge = new Link(sourceNode, sinkNode, conn.id, conn);\n\n                        this.edgeMap.add(conn.id, newEdge);\n                        this.edges.push(newEdge);\n                    }\n                    else {\n                        throw \"Containers are not supported yet, but stay tuned.\";\n                    }\n                }\n            },\n\n            areConnectedAlready: function(n, m) {\n                return Utils.any(this.edges, function(l) {\n                    return l.source === n && l.target === m || l.source === m && l.target === n;\n                });\n            }\n\n            /**\n             * Depth-first traversal of the given container.\n             * @param container\n             * @param action\n             * @param includeStart\n             * @private\n             */\n            /* _visitContainer: function (container, action, includeStart) {\n\n             *//*if (container == null) throw new ArgumentNullException(\"container\");\n             if (action == null) throw new ArgumentNullException(\"action\");\n             if (includeStart) action(container);\n             if (container.children.isEmpty()) return;\n             foreach(\n             var item\n             in\n             container.children.OfType < IShape > ()\n             )\n             {\n             var childContainer = item\n             as\n             IContainerShape;\n             if (childContainer != null) this.VisitContainer(childContainer, action);\n             else action(item);\n             }*//*\n             }*/\n\n\n        });\n\n        /**\n         * The classic spring-embedder (aka force-directed, Fruchterman-Rheingold, barycentric) algorithm.\n         * http://en.wikipedia.org/wiki/Force-directed_graph_drawing\n         *  - Chapter 12 of Tamassia et al. \"Handbook of graph drawing and visualization\".\n         *  - Kobourov on preprint arXiv; http://arxiv.org/pdf/1201.3011.pdf\n         *  - Fruchterman and Rheingold in SOFTWARE-PRACTICE AND EXPERIENCE, VOL. 21(1 1), 1129-1164 (NOVEMBER 1991)\n         * @type {*}\n         */\n        var SpringLayout = LayoutBase.extend({\n            init: function(diagram) {\n                var that = this;\n                LayoutBase.fn.init.call(that);\n                if (Utils.isUndefined(diagram)) {\n                    throw \"Diagram is not specified.\";\n                }\n                this.diagram = diagram;\n            },\n\n            layout: function(options) {\n\n                this.transferOptions(options);\n\n                var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n                var graph = adapter.convert(options);\n                if (graph.isEmpty()) {\n                    return;\n                }\n                // split into connected components\n                var components = graph.getConnectedComponents();\n                if (Utils.isEmpty(components)) {\n                    return;\n                }\n                for (var i = 0; i < components.length; i++) {\n                    var component = components[i];\n                    this.layoutGraph(component, options);\n                }\n                var finalNodeSet = this.gridLayoutComponents(components);\n                return new diagram.LayoutState(this.diagram, finalNodeSet);\n            },\n\n            layoutGraph: function(graph, options) {\n\n                if (Utils.isDefined(options)) {\n                    this.transferOptions(options);\n                }\n                this.graph = graph;\n\n                var initialTemperature = this.options.nodeDistance * 9;\n                this.temperature = initialTemperature;\n\n                var guessBounds = this._expectedBounds();\n                this.width = guessBounds.width;\n                this.height = guessBounds.height;\n\n                for (var step = 0; step < this.options.iterations; step++) {\n                    this.refineStage = step >= this.options.iterations * 5 / 6;\n                    this.tick();\n                    // exponential cooldown\n                    this.temperature = this.refineStage ?\n                        initialTemperature / 30 :\n                        initialTemperature * (1 - step / (2 * this.options.iterations ));\n                }\n            },\n\n            /**\n             * Single iteration of the simulation.\n             */\n            tick: function() {\n                var i;\n                // collect the repulsive forces on each node\n                for (i = 0; i < this.graph.nodes.length; i++) {\n                    this._repulsion(this.graph.nodes[i]);\n                }\n\n                // collect the attractive forces on each node\n                for (i = 0; i < this.graph.links.length; i++) {\n                    this._attraction(this.graph.links[i]);\n                }\n                // update the positions\n                for (i = 0; i < this.graph.nodes.length; i++) {\n                    var node = this.graph.nodes[i];\n                    var offset = Math.sqrt(node.dx * node.dx + node.dy * node.dy);\n                    if (offset === 0) {\n                        return;\n                    }\n                    node.x += Math.min(offset, this.temperature) * node.dx / offset;\n                    node.y += Math.min(offset, this.temperature) * node.dy / offset;\n                    if (this.options.limitToView) {\n                        node.x = Math.min(this.width, Math.max(node.width / 2, node.x));\n                        node.y = Math.min(this.height, Math.max(node.height / 2, node.y));\n                    }\n                }\n            },\n\n            /**\n             * Shakes the node away from its current position to escape the deadlock.\n             * @param node A Node.\n             * @private\n             */\n            _shake: function(node) {\n                // just a simple polar neighborhood\n                var rho = Math.random() * this.options.nodeDistance / 4;\n                var alpha = Math.random() * 2 * Math.PI;\n                node.x += rho * Math.cos(alpha);\n                node.y -= rho * Math.sin(alpha);\n            },\n\n            /**\n             * The typical Coulomb-Newton force law F=k/r^2\n             * @remark This only works in dimensions less than three.\n             * @param d\n             * @param n A Node.\n             * @param m Another Node.\n             * @returns {number}\n             * @private\n             */\n            _InverseSquareForce: function(d, n, m) {\n                var force;\n                if (!this.refineStage) {\n                    force = Math.pow(d, 2) / Math.pow(this.options.nodeDistance, 2);\n                }\n                else {\n                    var deltax = n.x - m.x;\n                    var deltay = n.y - m.y;\n\n                    var wn = n.width / 2;\n                    var hn = n.height / 2;\n                    var wm = m.width / 2;\n                    var hm = m.height / 2;\n\n                    force = (Math.pow(deltax, 2) / Math.pow(wn + wm + this.options.nodeDistance, 2)) + (Math.pow(deltay, 2) / Math.pow(hn + hm + this.options.nodeDistance, 2));\n                }\n                return force * 4 / 3;\n            },\n\n            /**\n             * The typical Hooke force law F=kr^2\n             * @param d\n             * @param n\n             * @param m\n             * @returns {number}\n             * @private\n             */\n            _SquareForce: function(d, n, m) {\n                return 1 / this._InverseSquareForce(d, n, m);\n            },\n\n            _repulsion: function(n) {\n                n.dx = 0;\n                n.dy = 0;\n                Utils.forEach(this.graph.nodes, function(m) {\n                    if (m === n) {\n                        return;\n                    }\n                    while (n.x === m.x && n.y === m.y) {\n                        this._shake(m);\n                    }\n                    var vx = n.x - m.x;\n                    var vy = n.y - m.y;\n                    var distance = Math.sqrt(vx * vx + vy * vy);\n                    var r = this._SquareForce(distance, n, m) * 2;\n                    n.dx += (vx / distance) * r;\n                    n.dy += (vy / distance) * r;\n                }, this);\n            },\n            _attraction: function(link) {\n                var t = link.target;\n                var s = link.source;\n                if (s === t) {\n                    // loops induce endless shakes\n                    return;\n                }\n                while (s.x === t.x && s.y === t.y) {\n                    this._shake(t);\n                }\n\n                var vx = s.x - t.x;\n                var vy = s.y - t.y;\n                var distance = Math.sqrt(vx * vx + vy * vy);\n\n                var a = this._InverseSquareForce(distance, s, t) * 5;\n                var dx = (vx / distance) * a;\n                var dy = (vy / distance) * a;\n                t.dx += dx;\n                t.dy += dy;\n                s.dx -= dx;\n                s.dy -= dy;\n            },\n\n            /**\n             * Calculates the expected bounds after layout.\n             * @returns {*}\n             * @private\n             */\n            _expectedBounds: function() {\n\n                var size, N = this.graph.nodes.length, /*golden ration optimal?*/ ratio = 1.5, multiplier = 4;\n                if (N === 0) {\n                    return size;\n                }\n                size = Utils.fold(this.graph.nodes, function(s, node) {\n                    var area = node.width * node.height;\n                    if (area > 0) {\n                        s += Math.sqrt(area);\n                        return s;\n                    }\n                    return 0;\n                }, 0, this);\n                var av = size / N;\n                var squareSize = av * Math.ceil(Math.sqrt(N));\n                var width = squareSize * Math.sqrt(ratio);\n                var height = squareSize / Math.sqrt(ratio);\n                return { width: width * multiplier, height: height * multiplier };\n            }\n\n        });\n\n        var TreeLayoutProcessor = kendo.Class.extend({\n\n            init: function(options) {\n                this.center = null;\n                this.options = options;\n            },\n            layout: function(treeGraph, root) {\n                this.graph = treeGraph;\n                if (!this.graph.nodes || this.graph.nodes.length === 0) {\n                    return;\n                }\n\n                if (!contains(this.graph.nodes, root)) {\n                    throw \"The given root is not in the graph.\";\n                }\n\n                this.center = root;\n                this.graph.cacheRelationships();\n                /* var nonull = this.graph.nodes.where(function (n) {\n                 return n.associatedShape != null;\n                 });*/\n\n                // transfer the rects\n                /*nonull.forEach(function (n) {\n                 n.Location = n.associatedShape.Position;\n                 n.NodeSize = n.associatedShape.ActualBounds.ToSize();\n                 }\n\n                 );*/\n\n                // caching the children\n                /* nonull.forEach(function (n) {\n                 n.children = n.getChildren();\n                 });*/\n\n                this.layoutSwitch();\n\n                // apply the layout to the actual visuals\n                // nonull.ForEach(n => n.associatedShape.Position = n.Location);\n            },\n\n            layoutLeft: function(left) {\n                this.setChildrenDirection(this.center, \"Left\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var h = 0, w = 0, y, i, node;\n                for (i = 0; i < left.length; i++) {\n                    node = left[i];\n                    node.TreeDirection = \"Left\";\n                    var s = this.measure(node, Size.Empty);\n                    w = Math.max(w, s.Width);\n                    h += s.height + this.options.verticalSeparation;\n                }\n\n                h -= this.options.verticalSeparation;\n                var x = this.center.x - this.options.horizontalSeparation;\n                y = this.center.y + ((this.center.height - h) / 2);\n                for (i = 0; i < left.length; i++) {\n                    node = left[i];\n                    var p = new Point(x - node.Size.width, y);\n\n                    this.arrange(node, p);\n                    y += node.Size.height + this.options.verticalSeparation;\n                }\n            },\n\n            layoutRight: function(right) {\n                this.setChildrenDirection(this.center, \"Right\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var h = 0, w = 0, y, i, node;\n                for (i = 0; i < right.length; i++) {\n                    node = right[i];\n                    node.TreeDirection = \"Right\";\n                    var s = this.measure(node, Size.Empty);\n                    w = Math.max(w, s.Width);\n                    h += s.height + this.options.verticalSeparation;\n                }\n\n                h -= this.options.verticalSeparation;\n                var x = this.center.x + this.options.horizontalSeparation + this.center.width;\n                y = this.center.y + ((this.center.height - h) / 2);\n                for (i = 0; i < right.length; i++) {\n                    node = right[i];\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    y += node.Size.height + this.options.verticalSeparation;\n                }\n            },\n\n            layoutUp: function(up) {\n                this.setChildrenDirection(this.center, \"Up\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var w = 0, y, node, i;\n                for (i = 0; i < up.length; i++) {\n                    node = up[i];\n                    node.TreeDirection = \"Up\";\n                    var s = this.measure(node, Size.Empty);\n                    w += s.width + this.options.horizontalSeparation;\n                }\n\n                w -= this.options.horizontalSeparation;\n                var x = this.center.x + (this.center.width / 2) - (w / 2);\n\n                // y = this.center.y -verticalSeparation -this.center.height/2 - h;\n                for (i = 0; i < up.length; i++) {\n                    node = up[i];\n                    y = this.center.y - this.options.verticalSeparation - node.Size.height;\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    x += node.Size.width + this.options.horizontalSeparation;\n                }\n            },\n\n            layoutDown: function(down) {\n                var node, i;\n                this.setChildrenDirection(this.center, \"Down\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                var w = 0, y;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n                    node.treeDirection = \"Down\";\n                    var s = this.measure(node, Size.Empty);\n                    w += s.width + this.options.horizontalSeparation;\n                }\n\n                w -= this.options.horizontalSeparation;\n                var x = this.center.x + (this.center.width / 2) - (w / 2);\n                y = this.center.y + this.options.verticalSeparation + this.center.height;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    x += node.Size.width + this.options.horizontalSeparation;\n                }\n            },\n\n            layoutRadialTree: function() {\n                // var rmax = children.Aggregate(0D, (current, node) => Math.max(node.SectorAngle, current));\n                this.setChildrenDirection(this.center, \"Radial\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                this.previousRoot = null;\n                var startAngle = this.options.startRadialAngle * DEG_TO_RAD;\n                var endAngle = this.options.endRadialAngle * DEG_TO_RAD;\n                if (endAngle <= startAngle) {\n                    throw \"Final angle should not be less than the start angle.\";\n                }\n\n                this.maxDepth = 0;\n                this.origin = new Point(this.center.x, this.center.y);\n                this.calculateAngularWidth(this.center, 0);\n\n                // perform the layout\n                if (this.maxDepth > 0) {\n                    this.radialLayout(this.center, this.options.radialFirstLevelSeparation, startAngle, endAngle);\n                }\n\n                // update properties of the root node\n                this.center.Angle = endAngle - startAngle;\n            },\n\n            tipOverTree: function(down, startFromLevel) {\n                if (Utils.isUndefined(startFromLevel)) {\n                    startFromLevel = 0;\n                }\n\n                this.setChildrenDirection(this.center, \"Down\", false);\n                this.setChildrenLayout(this.center, \"Default\", false);\n                this.setChildrenLayout(this.center, \"Underneath\", false, startFromLevel);\n                var w = 0, y, node, i;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n\n                    // if (node.IsSpecial) continue;\n                    node.TreeDirection = \"Down\";\n                    var s = this.measure(node, Size.Empty);\n                    w += s.width + this.options.horizontalSeparation;\n                }\n\n                w -= this.options.horizontalSeparation;\n\n                // putting the root in the center with respect to the whole diagram is not a nice result, let's put it with respect to the first level only\n                w -= down[down.length - 1].width;\n                w += down[down.length - 1].associatedShape.bounds().width;\n\n                var x = this.center.x + (this.center.width / 2) - (w / 2);\n                y = this.center.y + this.options.verticalSeparation + this.center.height;\n                for (i = 0; i < down.length; i++) {\n                    node = down[i];\n                    // if (node.IsSpecial) continue;\n                    var p = new Point(x, y);\n                    this.arrange(node, p);\n                    x += node.Size.width + this.options.horizontalSeparation;\n                }\n\n                /*//let's place the special node, assuming there is only one\n                 if (down.Count(n => n.IsSpecial) > 0)\n                 {\n                 var special = (from n in down where n.IsSpecial select n).First();\n                 if (special.Children.Count > 0)\n                 throw new DiagramException(\"The 'special' element should not have children.\");\n                 special.Data.Location = new Point(Center.Data.Location.X + Center.AssociatedShape.BoundingRectangle.Width + this.options.HorizontalSeparation, Center.Data.Location.Y);\n                 }*/\n            },\n            calculateAngularWidth: function(n, d) {\n                if (d > this.maxDepth) {\n                    this.maxDepth = d;\n                }\n\n                var aw = 0, w = 1000, h = 1000, diameter = d === 0 ? 0 : Math.sqrt((w * w) + (h * h)) / d;\n\n                if (n.children.length > 0) {\n                    // eventually with n.IsExpanded\n                    for (var i = 0, len = n.children.length; i < len; i++) {\n                        var child = n.children[i];\n                        aw += this.calculateAngularWidth(child, d + 1);\n                    }\n                    aw = Math.max(diameter, aw);\n                }\n                else {\n                    aw = diameter;\n                }\n\n                n.sectorAngle = aw;\n                return aw;\n            },\n            sortChildren: function(n) {\n                var basevalue = 0, i;\n\n                // update basevalue angle for node ordering\n                if (n.parents.length > 1) {\n                    throw \"Node is not part of a tree.\";\n                }\n                var p = n.parents[0];\n                if (p) {\n                    var pl = new Point(p.x, p.y);\n                    var nl = new Point(n.x, n.y);\n                    basevalue = this.normalizeAngle(Math.atan2(pl.y - nl.y, pl.x - nl.x));\n                }\n\n                var count = n.children.length;\n                if (count === 0) {\n                    return null;\n                }\n\n                var angle = [];\n                var idx = [];\n\n                for (i = 0; i < count; ++i) {\n                    var c = n.children[i];\n                    var l = new Point(c.x, c.y);\n                    idx[i] = i;\n                    angle[i] = this.normalizeAngle(-basevalue + Math.atan2(l.y - l.y, l.x - l.x));\n                }\n\n                Utils.bisort(angle, idx);\n                var col = []; // list of nodes\n                var children = n.children;\n                for (i = 0; i < count; ++i) {\n                    col.push(children[idx[i]]);\n                }\n\n                return col;\n            },\n\n            normalizeAngle: function(angle) {\n                while (angle > Math.PI * 2) {\n                    angle -= 2 * Math.PI;\n                }\n                while (angle < 0) {\n                    angle += Math.PI * 2;\n                }\n                return angle;\n            },\n            radialLayout: function(node, radius, startAngle, endAngle) {\n                var deltaTheta = endAngle - startAngle;\n                var deltaThetaHalf = deltaTheta / 2.0;\n                var parentSector = node.sectorAngle;\n                var fraction = 0;\n                var sorted = this.sortChildren(node);\n                for (var i = 0, len = sorted.length; i < len; i++) {\n                    var childNode = sorted[i];\n                    var cp = childNode;\n                    var childAngleFraction = cp.sectorAngle / parentSector;\n                    if (childNode.children.length > 0) {\n                        this.radialLayout(childNode,\n                            radius + this.options.radialSeparation,\n                            startAngle + (fraction * deltaTheta),\n                            startAngle + ((fraction + childAngleFraction) * deltaTheta));\n                    }\n\n                    this.setPolarLocation(childNode, radius, startAngle + (fraction * deltaTheta) + (childAngleFraction * deltaThetaHalf));\n                    cp.angle = childAngleFraction * deltaTheta;\n                    fraction += childAngleFraction;\n                }\n            },\n            setPolarLocation: function(node, radius, angle) {\n                node.x = this.origin.x + (radius * Math.cos(angle));\n                node.y = this.origin.y + (radius * Math.sin(angle));\n                node.BoundingRectangle = new Rect(node.x, node.y, node.width, node.height);\n            },\n\n            /**\n             * Sets the children direction recursively.\n             * @param node\n             * @param direction\n             * @param includeStart\n             */\n            setChildrenDirection: function(node, direction, includeStart) {\n                var rootDirection = node.treeDirection;\n                this.graph.depthFirstTraversal(node, function(n) {\n                    n.treeDirection = direction;\n                });\n                if (!includeStart) {\n                    node.treeDirection = rootDirection;\n                }\n            },\n\n            /**\n             * Sets the children layout recursively.\n             * @param node\n             * @param layout\n             * @param includeStart\n             * @param startFromLevel\n             */\n            setChildrenLayout: function(node, layout, includeStart, startFromLevel) {\n                if (Utils.isUndefined(startFromLevel)) {\n                    startFromLevel = 0;\n                }\n                var rootLayout = node.childrenLayout;\n                if (startFromLevel > 0) {\n                    // assign levels to the Node.Level property\n                    this.graph.assignLevels(node);\n\n                    // assign the layout on the condition that the level is at least the 'startFromLevel'\n                    this.graph.depthFirstTraversal(\n                        node, function(s) {\n                            if (s.level >= startFromLevel + 1) {\n                                s.childrenLayout = layout;\n                            }\n                        }\n                    );\n                }\n                else {\n                    this.graph.depthFirstTraversal(node, function(s) {\n                        s.childrenLayout = layout;\n                    });\n\n                    // if the start should not be affected we put the state back\n                    if (!includeStart) {\n                        node.childrenLayout = rootLayout;\n                    }\n                }\n            },\n\n            /**\n             * Returns the actual size of the node. The given size is the allowed space wherein the node can lay out itself.\n             * @param node\n             * @param givenSize\n             * @returns {Size}\n             */\n            measure: function(node, givenSize) {\n                var w = 0, h = 0, s;\n                var result = new Size(0, 0);\n                if (!node) {\n                    throw \"\";\n                }\n                var b = node.associatedShape.bounds();\n                var shapeWidth = b.width;\n                var shapeHeight = b.height;\n                if (node.parents.length !== 1) {\n                    throw \"Node not in a spanning tree.\";\n                }\n\n                var parent = node.parents[0];\n                if (node.treeDirection === \"Undefined\") {\n                    node.treeDirection = parent.treeDirection;\n                }\n\n                if (Utils.isEmpty(node.children)) {\n                    result = new Size(\n                        Math.abs(shapeWidth) < EPSILON ? 50 : shapeWidth,\n                        Math.abs(shapeHeight) < EPSILON ? 25 : shapeHeight);\n                }\n                else if (node.children.length === 1) {\n                    switch (node.treeDirection) {\n                        case \"Radial\":\n                            s = this.measure(node.children[0], givenSize); // child size\n                            w = shapeWidth + (this.options.radialSeparation * Math.cos(node.AngleToParent)) + s.width;\n                            h = shapeHeight + Math.abs(this.options.radialSeparation * Math.sin(node.AngleToParent)) + s.height;\n                            break;\n                        case \"Left\":\n                        case \"Right\":\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                    break;\n\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    w = shapeWidth + s.width + this.options.underneathHorizontalOffset;\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset + s.height;\n                                    break;\n\n                                case \"Default\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    w = shapeWidth + this.options.horizontalSeparation + s.width;\n                                    h = Math.max(shapeHeight, s.height);\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Radial layout measuring.\";\n                            }\n                            break;\n                        case \"Up\":\n                        case \"Down\":\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    w = Math.max(shapeWidth, s.width + this.options.underneathHorizontalOffset);\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset + s.height;\n                                    break;\n\n                                case \"Default\":\n                                    s = this.measure(node.children[0], givenSize);\n                                    h = shapeHeight + this.options.verticalSeparation + s.height;\n                                    w = Math.max(shapeWidth, s.width);\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Down layout measuring.\";\n                            }\n                            break;\n                        default:\n                            throw \"Unhandled TreeDirection in the layout measuring.\";\n                    }\n\n                    result = new Size(w, h);\n                }\n                else {\n                    var i, childNode;\n                    switch (node.treeDirection) {\n                        case \"Left\":\n                        case \"Right\":\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    w = shapeWidth;\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w = Math.max(w, s.width + this.options.underneathHorizontalOffset);\n                                        h += s.height + this.options.underneathVerticalSeparation;\n                                    }\n\n                                    h -= this.options.underneathVerticalSeparation;\n                                    break;\n\n                                case \"Default\":\n                                    w = shapeWidth;\n                                    h = 0;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w = Math.max(w, shapeWidth + this.options.horizontalSeparation + s.width);\n                                        h += s.height + this.options.verticalSeparation;\n                                    }\n                                    h -= this.options.verticalSeparation;\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Right layout measuring.\";\n                            }\n\n                            break;\n                        case \"Up\":\n                        case \"Down\":\n\n                            switch (node.childrenLayout) {\n\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    w = shapeWidth;\n                                    h = shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w = Math.max(w, s.width + this.options.underneathHorizontalOffset);\n                                        h += s.height + this.options.underneathVerticalSeparation;\n                                    }\n\n                                    h -= this.options.underneathVerticalSeparation;\n                                    break;\n\n                                case \"Default\":\n                                    w = 0;\n                                    h = 0;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        childNode = node.children[i];\n                                        s = this.measure(childNode, givenSize);\n                                        w += s.width + this.options.horizontalSeparation;\n                                        h = Math.max(h, s.height + this.options.verticalSeparation + shapeHeight);\n                                    }\n\n                                    w -= this.options.horizontalSeparation;\n                                    break;\n\n                                default:\n                                    throw \"Unhandled TreeDirection in the Down layout measuring.\";\n                            }\n\n                            break;\n                        default:\n                            throw \"Unhandled TreeDirection in the layout measuring.\";\n                    }\n\n                    result = new Size(w, h);\n                }\n\n                node.SectorAngle = Math.sqrt((w * w / 4) + (h * h / 4));\n                node.Size = result;\n                return result;\n            },\n            arrange: function(n, p) {\n                var i, pp, child, node, childrenwidth, b = n.associatedShape.bounds();\n                var shapeWidth = b.width;\n                var shapeHeight = b.height;\n                if (Utils.isEmpty(n.children)) {\n                    n.x = p.x;\n                    n.y = p.y;\n                    n.BoundingRectangle = new Rect(p.x, p.y, shapeWidth, shapeHeight);\n                }\n                else {\n                    var x, y;\n                    var selfLocation;\n                    switch (n.treeDirection) {\n                        case \"Left\":\n                            switch (n.childrenLayout) {\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    selfLocation = p;\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < node.children.length; i++) {\n                                        node = node.children[i];\n                                        x = selfLocation.x - node.associatedShape.width - this.options.underneathHorizontalOffset;\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.underneathVerticalSeparation;\n                                    }\n                                    break;\n\n                                case \"Default\":\n                                    selfLocation = new Point(p.x + n.Size.width - shapeWidth, p.y + ((n.Size.height - shapeHeight) / 2));\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = selfLocation.x - this.options.horizontalSeparation; // alignment of children\n                                    y = p.y;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x - node.Size.width, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.verticalSeparation;\n                                    }\n                                    break;\n\n                                default:\n                                    throw \"Unsupported TreeDirection\";\n                            }\n\n                            break;\n                        case \"Right\":\n                            switch (n.childrenLayout) {\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n\n                                case \"Underneath\":\n                                    selfLocation = p;\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = p.x + shapeWidth + this.options.underneathHorizontalOffset;\n\n                                    // alignment of children left-underneath the parent\n                                    y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.underneathVerticalSeparation;\n                                    }\n\n                                    break;\n\n                                case \"Default\":\n                                    selfLocation = new Point(p.x, p.y + ((n.Size.height - shapeHeight) / 2));\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = p.x + shapeWidth + this.options.horizontalSeparation; // alignment of children\n                                    y = p.y;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.verticalSeparation;\n                                    }\n                                    break;\n\n                                default:\n                                    throw \"Unsupported TreeDirection\";\n                            }\n\n                            break;\n                        case \"Up\":\n                            selfLocation = new Point(p.x + ((n.Size.width - shapeWidth) / 2), p.y + n.Size.height - shapeHeight);\n                            n.x = selfLocation.x;\n                            n.y = selfLocation.y;\n                            n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                            if (Math.abs(selfLocation.x - p.x) < EPSILON) {\n                                childrenwidth = 0;\n                                // means there is an aberration due to the oversized Element with respect to the children\n                                for (i = 0; i < n.children.length; i++) {\n                                    child = n.children[i];\n                                    childrenwidth += child.Size.width + this.options.horizontalSeparation;\n                                }\n                                childrenwidth -= this.options.horizontalSeparation;\n                                x = p.x + ((shapeWidth - childrenwidth) / 2);\n                            }\n                            else {\n                                x = p.x;\n                            }\n\n                            for (i = 0; i < n.children.length; i++) {\n                                node = n.children[i];\n                                y = selfLocation.y - this.options.verticalSeparation - node.Size.height;\n                                pp = new Point(x, y);\n                                this.arrange(node, pp);\n                                x += node.Size.width + this.options.horizontalSeparation;\n                            }\n                            break;\n\n                        case \"Down\":\n\n                            switch (n.childrenLayout) {\n                                case \"TopAlignedWithParent\":\n                                case \"BottomAlignedWithParent\":\n                                    break;\n                                case \"Underneath\":\n                                    selfLocation = p;\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    x = p.x + this.options.underneathHorizontalOffset; // alignment of children left-underneath the parent\n                                    y = p.y + shapeHeight + this.options.underneathVerticalTopOffset;\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        y += node.Size.height + this.options.underneathVerticalSeparation;\n                                    }\n                                    break;\n\n                                case \"Default\":\n                                    selfLocation = new Point(p.x + ((n.Size.width - shapeWidth) / 2), p.y);\n                                    n.x = selfLocation.x;\n                                    n.y = selfLocation.y;\n                                    n.BoundingRectangle = new Rect(n.x, n.y, n.width, n.height);\n                                    if (Math.abs(selfLocation.x - p.x) < EPSILON) {\n                                        childrenwidth = 0;\n                                        // means there is an aberration due to the oversized Element with respect to the children\n                                        for (i = 0; i < n.children.length; i++) {\n                                            child = n.children[i];\n                                            childrenwidth += child.Size.width + this.options.horizontalSeparation;\n                                        }\n\n                                        childrenwidth -= this.options.horizontalSeparation;\n                                        x = p.x + ((shapeWidth - childrenwidth) / 2);\n                                    }\n                                    else {\n                                        x = p.x;\n                                    }\n\n                                    for (i = 0; i < n.children.length; i++) {\n                                        node = n.children[i];\n                                        y = selfLocation.y + this.options.verticalSeparation + shapeHeight;\n                                        pp = new Point(x, y);\n                                        this.arrange(node, pp);\n                                        x += node.Size.width + this.options.horizontalSeparation;\n                                    }\n                                    break;\n\n                                default:\n                                    throw \"Unsupported TreeDirection\";\n                            }\n                            break;\n\n                        case \"None\":\n                            break;\n\n                        default:\n                            throw \"Unsupported TreeDirection\";\n                    }\n                }\n            },\n            layoutSwitch: function() {\n                if (!this.center) {\n                    return;\n                }\n\n                if (Utils.isEmpty(this.center.children)) {\n                    return;\n                }\n\n                var type = this.options.subtype;\n                if (Utils.isUndefined(type)) {\n                    type = \"Down\";\n                }\n                var single, male, female, leftcount;\n                var children = this.center.children;\n                switch (type.toLowerCase()) {\n                    case \"radial\":\n                    case \"radialtree\":\n                        this.layoutRadialTree();\n                        break;\n\n                    case \"mindmaphorizontal\":\n                    case \"mindmap\":\n                        single = this.center.children;\n\n                        if (this.center.children.length === 1) {\n                            this.layoutRight(single);\n                        }\n                        else {\n                            // odd number will give one more at the right\n                            leftcount = children.length / 2;\n                            male = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) < leftcount;\n                            });\n                            female = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) >= leftcount;\n                            });\n\n                            this.layoutLeft(male);\n                            this.layoutRight(female);\n                        }\n                        break;\n\n                    case \"mindmapvertical\":\n                        single = this.center.children;\n\n                        if (this.center.children.length === 1) {\n                            this.layoutDown(single);\n                        }\n                        else {\n                            // odd number will give one more at the right\n                            leftcount = children.length / 2;\n                            male = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) < leftcount;\n                            });\n                            female = grep(this.center.children, function(n) {\n                                return Utils.indexOf(children, n) >= leftcount;\n                            });\n                            this.layoutUp(male);\n                            this.layoutDown(female);\n                        }\n                        break;\n\n                    case \"right\":\n                        this.layoutRight(this.center.children);\n                        break;\n\n                    case \"left\":\n                        this.layoutLeft(this.center.children);\n                        break;\n\n                    case \"up\":\n                    case \"bottom\":\n                        this.layoutUp(this.center.children);\n                        break;\n\n                    case \"down\":\n                    case \"top\":\n                        this.layoutDown(this.center.children);\n                        break;\n\n                    case \"tipover\":\n                    case \"tipovertree\":\n                        if (this.options.tipOverTreeStartLevel < 0) {\n                            throw \"The tip-over level should be a positive integer.\";\n                        }\n                        this.tipOverTree(this.center.children, this.options.tipOverTreeStartLevel);\n                        break;\n\n                    case \"undefined\":\n                    case \"none\":\n                        break;\n                }\n            }\n        });\n\n        /**\n         * The various tree layout algorithms.\n         * @type {*}\n         */\n        var TreeLayout = LayoutBase.extend({\n            init: function(diagram) {\n                var that = this;\n                LayoutBase.fn.init.call(that);\n                if (Utils.isUndefined(diagram)) {\n                    throw \"No diagram specified.\";\n                }\n                this.diagram = diagram;\n            },\n\n            /**\n             * Arranges the diagram in a tree-layout with the specified options and tree subtype.\n             */\n            layout: function(options) {\n\n                this.transferOptions(options);\n\n                // transform the diagram into a Graph\n                var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n\n                /**\n                 * The Graph reduction from the given diagram.\n                 * @type {*}\n                 */\n                this.graph = adapter.convert();\n\n                var finalNodeSet = this.layoutComponents();\n\n                // note that the graph contains the original data and\n                // the components are another instance of nodes referring to the same set of shapes\n                return new diagram.LayoutState(this.diagram, finalNodeSet);\n            },\n\n            layoutComponents: function() {\n                if (this.graph.isEmpty()) {\n                    return;\n                }\n\n                // split into connected components\n                var components = this.graph.getConnectedComponents();\n                if (Utils.isEmpty(components)) {\n                    return;\n                }\n\n                var layout = new TreeLayoutProcessor(this.options);\n                var trees = [];\n                // find a spanning tree for each component\n                for (var i = 0; i < components.length; i++) {\n                    var component = components[i];\n\n                    var treeGraph = this.getTree(component);\n                    if (!treeGraph) {\n                        throw \"Failed to find a spanning tree for the component.\";\n                    }\n                    var root = treeGraph.root;\n                    var tree = treeGraph.tree;\n                    layout.layout(tree, root);\n\n                    trees.push(tree);\n                }\n\n                return this.gridLayoutComponents(trees);\n\n            },\n\n            /**\n             * Gets a spanning tree (and root) for the given graph.\n             * Ensure that the given graph is connected!\n             * @param graph\n             * @returns {*} A literal object consisting of the found root and the spanning tree.\n             */\n            getTree: function(graph) {\n                var root = null;\n                if (this.options.roots && this.options.roots.length > 0) {\n                    for (var i = 0, len = graph.nodes.length; i < len; i++) {\n                        var node = graph.nodes[i];\n                        for (var j = 0; j < this.options.roots.length; j++) {\n                            var givenRootShape = this.options.roots[j];\n                            if (givenRootShape === node.associatedShape) {\n                                root = node;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!root) {\n                    // finds the most probable root on the basis of the longest path in the component\n                    root = graph.root();\n                    // should not happen really\n                    if (!root) {\n                        throw \"Unable to find a root for the tree.\";\n                    }\n                }\n                return this.getTreeForRoot(graph, root);\n            },\n\n            getTreeForRoot: function(graph, root) {\n\n                var tree = graph.getSpanningTree(root);\n                if (Utils.isUndefined(tree) || tree.isEmpty()) {\n                    return null;\n                }\n                return {\n                    tree: tree,\n                    root: tree.root\n                };\n            }\n\n        });\n\n        /**\n         * The Sugiyama aka layered layout algorithm.\n         * @type {*}\n         */\n        var LayeredLayout = LayoutBase.extend({\n            init: function(diagram) {\n                var that = this;\n                LayoutBase.fn.init.call(that);\n                if (Utils.isUndefined(diagram)) {\n                    throw \"Diagram is not specified.\";\n                }\n                this.diagram = diagram;\n            },\n\n            layout: function(options) {\n\n                this.transferOptions(options);\n\n                var adapter = new DiagramToHyperTreeAdapter(this.diagram);\n                var graph = adapter.convert(options);\n                if (graph.isEmpty()) {\n                    return;\n                }\n                // split into connected components\n                var components = graph.getConnectedComponents();\n                if (Utils.isEmpty(components)) {\n                    return;\n                }\n                for (var i = 0; i < components.length; i++) {\n                    var component = components[i];\n                    this.layoutGraph(component, options);\n                }\n                var finalNodeSet = this.gridLayoutComponents(components);\n                return new diagram.LayoutState(this.diagram, finalNodeSet);\n\n            },\n\n            /**\n             * Initializes the runtime data properties of the layout.\n             * @private\n             */\n            _initRuntimeProperties: function() {\n                for (var k = 0; k < this.graph.nodes.length; k++) {\n                    var node = this.graph.nodes[k];\n                    node.layer = -1;\n                    node.downstreamLinkCount = 0;\n                    node.upstreamLinkCount = 0;\n\n                    node.isVirtual = false;\n\n                    node.uBaryCenter = 0.0;\n                    node.dBaryCenter = 0.0;\n\n                    node.upstreamPriority = 0;\n                    node.downstreamPriority = 0;\n\n                    node.gridPosition = 0;\n                }\n            },\n            _prepare: function(graph) {\n                var current = [], i, l, link;\n\n                // defines a mapping of a node to the layer index\n                var layerMap = new Dictionary();\n                var layerCount = 0;\n                var targetLayer, next, target;\n\n                Utils.forEach(graph.nodes, function(node) {\n                    if (node.incoming.length === 0) {\n                        layerMap.set(node, 0);\n                        current.push(node);\n                    }\n                });\n\n                while (current.length > 0) {\n                    next = current.shift();\n                    for (i = 0; i < next.outgoing.length; i++) {\n                        link = next.outgoing[i];\n                        target = link.target;\n\n                        if (layerMap.containsKey(target)) {\n                            targetLayer = Math.max(layerMap.get(next) + 1, layerMap.get(target));\n                        } else {\n                            targetLayer = layerMap.get(next) + 1;\n                        }\n                        layerMap.set(target, targetLayer);\n                        if (targetLayer > layerCount) {\n                            layerCount = targetLayer;\n                        }\n\n                        if (!contains(current, target)) {\n                            current.push(target);\n                        }\n                    }\n                }\n\n                var sortedNodes = layerMap.keys();\n\n                sortedNodes.sort(function(o1, o2) {\n                    var o1layer = layerMap.get(o1);\n                    var o2layer = layerMap.get(o2);\n                    return Utils.sign(o2layer - o1layer);\n                });\n\n                for (var n = 0; n < sortedNodes.length; ++n) {\n                    var node = sortedNodes[n];\n                    var minLayer = Number.MAX_VALUE;\n\n                    if (node.outgoing.length === 0) {\n                        continue;\n                    }\n\n                    for (l = 0; l < node.outgoing.length; ++l) {\n                        link = node.outgoing[l];\n                        minLayer = Math.min(minLayer, layerMap.get(link.target));\n                    }\n\n                    if (minLayer > 1) {\n                        layerMap.set(node, minLayer - 1);\n                    }\n                }\n\n                this.layers = [];\n                var layer;\n                for (i = 0; i < layerCount + 1; i++) {\n                    layer = [];\n                    layer.linksTo = {};\n                    this.layers.push(layer);\n                }\n\n                layerMap.forEach(function(node, layer) {\n                    node.layer = layer;\n                    this.layers[layer].push(node);\n                }, this);\n\n                // set initial grid positions\n                for (l = 0; l < this.layers.length; l++) {\n                    layer = this.layers[l];\n                    for (i = 0; i < layer.length; i++) {\n                        layer[i].gridPosition = i;\n                    }\n                }\n            },\n            /**\n             * Performs the layout of a single component.\n             */\n            layoutGraph: function(graph, options) {\n                if (Utils.isUndefined(graph)) {\n                    throw \"No graph given or graph analysis of the diagram failed.\";\n                }\n                if (Utils.isDefined(options)) {\n                    this.transferOptions(options);\n                }\n                this.graph = graph;\n\n                // sets unique indices on the nodes\n                graph.setItemIndices();\n\n                // ensures no cycles present for this layout\n                var reversedEdges = graph.makeAcyclic();\n\n                // define the runtime props being used by the layout algorithm\n                this._initRuntimeProperties();\n\n                this._prepare(graph, options);\n\n                this._dummify();\n\n                this._optimizeCrossings();\n\n                this._swapPairs();\n\n                this.arrangeNodes();\n\n                this._moveThingsAround();\n\n                this._dedummify();\n\n                // re-reverse the links which were switched earlier\n                Utils.forEach(reversedEdges, function(e) {\n                    if (e.points) {\n                        e.points.reverse();\n                    }\n                });\n            },\n\n            setMinDist: function(m, n, minDist) {\n                var l = m.layer;\n                var i = m.layerIndex;\n                this.minDistances[l][i] = minDist;\n            },\n\n            getMinDist: function(m, n) {\n                var dist = 0,\n                    i1 = m.layerIndex,\n                    i2 = n.layerIndex,\n                    l = m.layer,\n                    min = Math.min(i1, i2),\n                    max = Math.max(i1, i2);\n                // use Sum()?\n                for (var k = min; k < max; ++k) {\n                    dist += this.minDistances[l][k];\n                }\n                return dist;\n            },\n\n            placeLeftToRight: function(leftClasses) {\n                var leftPos = new Dictionary(), n, node;\n                for (var c = 0; c < this.layers.length; ++c) {\n                    var classNodes = leftClasses[c];\n                    if (!classNodes) {\n                        continue;\n                    }\n\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        if (!leftPos.containsKey(node)) {\n                            this.placeLeft(node, leftPos, c);\n                        }\n                    }\n\n                    // adjust class\n                    var d = Number.POSITIVE_INFINITY;\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        var rightSibling = this.rightSibling(node);\n                        if (rightSibling && this.nodeLeftClass.get(rightSibling) !== c) {\n                            d = Math.min(d, leftPos.get(rightSibling) - leftPos.get(node) - this.getMinDist(node, rightSibling));\n                        }\n                    }\n                    if (d === Number.POSITIVE_INFINITY) {\n                        var D = [];\n                        for (n = 0; n < classNodes.length; n++) {\n                            node = classNodes[n];\n                            var neighbors = [];\n                            Utils.addRange(neighbors, this.upNodes.get(node));\n                            Utils.addRange(neighbors, this.downNodes.get(node));\n\n                            for (var e = 0; e < neighbors.length; e++) {\n                                var neighbor = neighbors[e];\n                                if (this.nodeLeftClass.get(neighbor) < c) {\n                                    D.push(leftPos.get(neighbor) - leftPos.get(node));\n                                }\n                            }\n                        }\n                        D.sort();\n                        if (D.length === 0) {\n                            d = 0;\n                        }\n                        else if (D.length % 2 === 1) {\n                            d = D[this.intDiv(D.length, 2)];\n                        }\n                        else {\n                            d = (D[this.intDiv(D.length, 2) - 1] + D[this.intDiv(D.length, 2)]) / 2;\n                        }\n                    }\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        leftPos.set(node, leftPos.get(node) + d);\n                    }\n                }\n                return leftPos;\n            },\n\n            placeRightToLeft: function(rightClasses) {\n                var rightPos = new Dictionary(), n, node;\n                for (var c = 0; c < this.layers.length; ++c) {\n                    var classNodes = rightClasses[c];\n                    if (!classNodes) {\n                        continue;\n                    }\n\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        if (!rightPos.containsKey(node)) {\n                            this.placeRight(node, rightPos, c);\n                        }\n                    }\n\n                    // adjust class\n                    var d = Number.NEGATIVE_INFINITY;\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        var leftSibling = this.leftSibling(node);\n                        if (leftSibling && this.nodeRightClass.get(leftSibling) !== c) {\n                            d = Math.max(d, rightPos.get(leftSibling) - rightPos.get(node) + this.getMinDist(leftSibling, node));\n                        }\n                    }\n                    if (d === Number.NEGATIVE_INFINITY) {\n                        var D = [];\n                        for (n = 0; n < classNodes.length; n++) {\n                            node = classNodes[n];\n                            var neighbors = [];\n                            Utils.addRange(neighbors, this.upNodes.get(node));\n                            Utils.addRange(neighbors, this.downNodes.get(node));\n\n                            for (var e = 0; e < neighbors.length; e++) {\n                                var neighbor = neighbors[e];\n                                if (this.nodeRightClass.get(neighbor) < c) {\n                                    D.push(rightPos.get(node) - rightPos.get(neighbor));\n                                }\n                            }\n                        }\n                        D.sort();\n                        if (D.length === 0) {\n                            d = 0;\n                        }\n                        else if (D.length % 2 === 1) {\n                            d = D[this.intDiv(D.length, 2)];\n                        }\n                        else {\n                            d = (D[this.intDiv(D.length, 2) - 1] + D[this.intDiv(D.length, 2)]) / 2;\n                        }\n                    }\n                    for (n = 0; n < classNodes.length; n++) {\n                        node = classNodes[n];\n                        rightPos.set(node, rightPos.get(node) + d);\n                    }\n                }\n                return rightPos;\n            },\n\n            _getLeftWing: function() {\n                var leftWing = { value: null };\n                var result = this.computeClasses(leftWing, 1);\n                this.nodeLeftClass = leftWing.value;\n                return result;\n            },\n\n            _getRightWing: function() {\n                var rightWing = { value: null };\n                var result = this.computeClasses(rightWing, -1);\n                this.nodeRightClass = rightWing.value;\n                return result;\n            },\n\n            computeClasses: function(wingPair, d) {\n                var currentWing = 0,\n                    wing = wingPair.value = new Dictionary();\n\n                for (var l = 0; l < this.layers.length; ++l) {\n                    currentWing = l;\n\n                    var layer = this.layers[l];\n                    for (var n = d === 1 ? 0 : layer.length - 1; n >= 0 && n < layer.length; n += d) {\n                        var node = layer[n];\n                        if (!wing.containsKey(node)) {\n                            wing.set(node, currentWing);\n                            if (node.isVirtual) {\n                                var ndsinl = this._nodesInLink(node);\n                                for (var kk = 0; kk < ndsinl.length; kk++) {\n                                    var vnode = ndsinl[kk];\n                                    wing.set(vnode, currentWing);\n                                }\n                            }\n                        }\n                        else {\n                            currentWing = wing.get(node);\n                        }\n                    }\n                }\n\n                var wings = [];\n                for (var i = 0; i < this.layers.length; i++) {\n                    wings.push(null);\n                }\n                wing.forEach(function(node, classIndex) {\n                    if (wings[classIndex] === null) {\n                        wings[classIndex] = [];\n                    }\n                    wings[classIndex].push(node);\n                });\n\n                return wings;\n            },\n            _isVerticalLayout: function() {\n                return this.options.subtype.toLowerCase() === \"up\" || this.options.subtype.toLowerCase() === \"down\" || this.options.subtype.toLowerCase() === \"vertical\";\n            },\n\n            _isHorizontalLayout: function() {\n                return this.options.subtype.toLowerCase() === \"right\" || this.options.subtype.toLowerCase() === \"left\" || this.options.subtype.toLowerCase() === \"horizontal\";\n            },\n            _isIncreasingLayout: function() {\n                // meaning that the visiting of the layers goes in the natural order of increasing layer index\n                return this.options.subtype.toLowerCase() === \"right\" || this.options.subtype.toLowerCase() === \"down\";\n            },\n            _moveThingsAround: function() {\n                var i, l, node, layer, n, w;\n                // sort the layers by their grid position\n                for (l = 0; l < this.layers.length; ++l) {\n                    layer = this.layers[l];\n                    layer.sort(this._gridPositionComparer);\n                }\n\n                this.minDistances = [];\n                for (l = 0; l < this.layers.length; ++l) {\n                    layer = this.layers[l];\n                    this.minDistances[l] = [];\n                    for (n = 0; n < layer.length; ++n) {\n                        node = layer[n];\n                        node.layerIndex = n;\n                        this.minDistances[l][n] = this.options.nodeDistance;\n                        if (n < layer.length - 1) {\n                            if (this._isVerticalLayout()) {\n                                this.minDistances[l][n] += (node.width + layer[n + 1].width) / 2;\n                            }\n                            else {\n                                this.minDistances[l][n] += (node.height + layer[n + 1].height) / 2;\n                            }\n                        }\n                    }\n                }\n\n                this.downNodes = new Dictionary();\n                this.upNodes = new Dictionary();\n                Utils.forEach(this.graph.nodes, function(node) {\n                    this.downNodes.set(node, []);\n                    this.upNodes.set(node, []);\n                }, this);\n                Utils.forEach(this.graph.links, function(link) {\n                    var origin = link.source;\n                    var dest = link.target;\n                    var down = null, up = null;\n                    if (origin.layer > dest.layer) {\n                        down = link.source;\n                        up = link.target;\n                    }\n                    else {\n                        up = link.source;\n                        down = link.target;\n                    }\n                    this.downNodes.get(up).push(down);\n                    this.upNodes.get(down).push(up);\n                }, this);\n                this.downNodes.forEachValue(function(list) {\n                    list.sort(this._gridPositionComparer);\n                }, this);\n                this.upNodes.forEachValue(function(list) {\n                    list.sort(this._gridPositionComparer);\n                }, this);\n\n                for (l = 0; l < this.layers.length - 1; ++l) {\n                    layer = this.layers[l];\n                    for (w = 0; w < layer.length - 1; w++) {\n                        var currentNode = layer[w];\n                        if (!currentNode.isVirtual) {\n                            continue;\n                        }\n\n                        var currDown = this.downNodes.get(currentNode)[0];\n                        if (!currDown.isVirtual) {\n                            continue;\n                        }\n\n                        for (n = w + 1; n < layer.length; ++n) {\n                            node = layer[n];\n                            if (!node.isVirtual) {\n                                continue;\n                            }\n\n                            var downNode = this.downNodes.get(node)[0];\n                            if (!downNode.isVirtual) {\n                                continue;\n                            }\n\n                            if (currDown.gridPosition > downNode.gridPosition) {\n                                var pos = currDown.gridPosition;\n                                currDown.gridPosition = downNode.gridPosition;\n                                downNode.gridPosition = pos;\n                                var i1 = currDown.layerIndex;\n                                var i2 = downNode.layerIndex;\n                                this.layers[l + 1][i1] = downNode;\n                                this.layers[l + 1][i2] = currDown;\n                                currDown.layerIndex = i2;\n                                downNode.layerIndex = i1;\n                            }\n                        }\n                    }\n                }\n\n\n                var leftClasses = this._getLeftWing();\n                var rightClasses = this._getRightWing();\n\n\n                var leftPos = this.placeLeftToRight(leftClasses);\n                var rightPos = this.placeRightToLeft(rightClasses);\n                var x = new Dictionary();\n                Utils.forEach(this.graph.nodes, function(node) {\n                    x.set(node, (leftPos.get(node) + rightPos.get(node)) / 2);\n                });\n\n\n                var order = new Dictionary();\n                var placed = new Dictionary();\n                for (l = 0; l < this.layers.length; ++l) {\n                    layer = this.layers[l];\n                    var sequenceStart = -1, sequenceEnd = -1;\n                    for (n = 0; n < layer.length; ++n) {\n                        node = layer[n];\n                        order.set(node, 0);\n                        placed.set(node, false);\n                        if (node.isVirtual) {\n                            if (sequenceStart === -1) {\n                                sequenceStart = n;\n                            }\n                            else if (sequenceStart === n - 1) {\n                                sequenceStart = n;\n                            }\n                            else {\n                                sequenceEnd = n;\n                                order.set(layer[sequenceStart], 0);\n                                if (x.get(node) - x.get(layer[sequenceStart]) === this.getMinDist(layer[sequenceStart], node)) {\n                                    placed.set(layer[sequenceStart], true);\n                                }\n                                else {\n                                    placed.set(layer[sequenceStart], false);\n                                }\n                                sequenceStart = n;\n                            }\n                        }\n                    }\n                }\n                var directions = [1, -1];\n                Utils.forEach(directions, function(d) {\n                    var start = d === 1 ? 0 : this.layers.length - 1;\n                    for (var l = start; l >= 0 && l < this.layers.length; l += d) {\n                        var layer = this.layers[l];\n                        var virtualStartIndex = this._firstVirtualNode(layer);\n                        var virtualStart = null;\n                        var sequence = null;\n                        if (virtualStartIndex !== -1) {\n                            virtualStart = layer[virtualStartIndex];\n                            sequence = [];\n                            for (i = 0; i < virtualStartIndex; i++) {\n                                sequence.push(layer[i]);\n                            }\n                        }\n                        else {\n                            virtualStart = null;\n                            sequence = layer;\n                        }\n                        if (sequence.length > 0) {\n                            this._sequencer(x, null, virtualStart, d, sequence);\n                            for (i = 0; i < sequence.length - 1; ++i) {\n                                this.setMinDist(sequence[i], sequence[i + 1], x.get(sequence[i + 1]) - x.get(sequence[i]));\n                            }\n                            if (virtualStart) {\n                                this.setMinDist(sequence[sequence.length - 1], virtualStart, x.get(virtualStart) - x.get(sequence[sequence.length - 1]));\n                            }\n                        }\n\n                        while (virtualStart) {\n                            var virtualEnd = this.nextVirtualNode(layer, virtualStart);\n                            if (!virtualEnd) {\n                                virtualStartIndex = virtualStart.layerIndex;\n                                sequence = [];\n                                for (i = virtualStartIndex + 1; i < layer.length; i++) {\n                                    sequence.push(layer[i]);\n                                }\n                                if (sequence.length > 0) {\n                                    this._sequencer(x, virtualStart, null, d, sequence);\n                                    for (i = 0; i < sequence.length - 1; ++i) {\n                                        this.setMinDist(sequence[i], sequence[i + 1], x.get(sequence[i + 1]) - x.get(sequence[i]));\n                                    }\n                                    this.setMinDist(virtualStart, sequence[0], x.get(sequence[0]) - x.get(virtualStart));\n                                }\n                            }\n                            else if (order.get(virtualStart) === d) {\n                                virtualStartIndex = virtualStart.layerIndex;\n                                var virtualEndIndex = virtualEnd.layerIndex;\n                                sequence = [];\n                                for (i = virtualStartIndex + 1; i < virtualEndIndex; i++) {\n                                    sequence.push(layer[i]);\n                                }\n                                if (sequence.length > 0) {\n                                    this._sequencer(x, virtualStart, virtualEnd, d, sequence);\n                                }\n                                placed.set(virtualStart, true);\n                            }\n                            virtualStart = virtualEnd;\n                        }\n                        this.adjustDirections(l, d, order, placed);\n                    }\n                }, this);\n\n\n                var fromLayerIndex = this._isIncreasingLayout() ? 0 : this.layers.length - 1;\n                var reachedFinalLayerIndex = function(k, ctx) {\n                    if (ctx._isIncreasingLayout()) {\n                        return k < ctx.layers.length;\n                    }\n                    else {\n                        return k >= 0;\n                    }\n                };\n                var layerIncrement = this._isIncreasingLayout() ? +1 : -1, offset = 0;\n\n                /**\n                 * Calcs the max height of the given layer.\n                 */\n                function maximumHeight(layer, ctx) {\n                    var height = Number.MIN_VALUE;\n                    for (var n = 0; n < layer.length; ++n) {\n                        var node = layer[n];\n                        if (ctx._isVerticalLayout()) {\n                            height = Math.max(height, node.height);\n                        }\n                        else {\n                            height = Math.max(height, node.width);\n                        }\n                    }\n                    return height;\n                }\n\n                for (i = fromLayerIndex; reachedFinalLayerIndex(i, this); i += layerIncrement) {\n                    layer = this.layers[i];\n                    var height = maximumHeight(layer, this);\n\n                    for (n = 0; n < layer.length; ++n) {\n                        node = layer[n];\n                        if (this._isVerticalLayout()) {\n                            node.x = x.get(node);\n                            node.y = offset + height / 2;\n                        }\n                        else {\n                            node.x = offset + height / 2;\n                            node.y = x.get(node);\n                        }\n                    }\n\n                    offset += this.options.layerSeparation + height;\n                }\n            },\n\n            adjustDirections: function(l, d, order, placed) {\n                if (l + d < 0 || l + d >= this.layers.length) {\n                    return;\n                }\n\n                var prevBridge = null, prevBridgeTarget = null;\n                var layer = this.layers[l + d];\n                for (var n = 0; n < layer.length; ++n) {\n                    var nextBridge = layer[n];\n                    if (nextBridge.isVirtual) {\n                        var nextBridgeTarget = this.getNeighborOnLayer(nextBridge, l);\n                        if (nextBridgeTarget.isVirtual) {\n                            if (prevBridge) {\n                                var p = placed.get(prevBridgeTarget);\n                                var clayer = this.layers[l];\n                                var i1 = prevBridgeTarget.layerIndex;\n                                var i2 = nextBridgeTarget.layerIndex;\n                                for (var i = i1 + 1; i < i2; ++i) {\n                                    if (clayer[i].isVirtual) {\n                                        p = p && placed.get(clayer[i]);\n                                    }\n                                }\n                                if (p) {\n                                    order.set(prevBridge, d);\n                                    var j1 = prevBridge.layerIndex;\n                                    var j2 = nextBridge.layerIndex;\n                                    for (var j = j1 + 1; j < j2; ++j) {\n                                        if (layer[j].isVirtual) {\n                                            order.set(layer[j], d);\n                                        }\n                                    }\n                                }\n                            }\n                            prevBridge = nextBridge;\n                            prevBridgeTarget = nextBridgeTarget;\n                        }\n                    }\n                }\n            },\n\n            getNeighborOnLayer: function(node, l) {\n                var neighbor = this.upNodes.get(node)[0];\n                if (neighbor.layer === l) {\n                    return neighbor;\n                }\n                neighbor = this.downNodes.get(node)[0];\n                if (neighbor.layer === l) {\n                    return neighbor;\n                }\n                return null;\n            },\n\n            _sequencer: function(x, virtualStart, virtualEnd, dir, sequence) {\n                if (sequence.length === 1) {\n                    this._sequenceSingle(x, virtualStart, virtualEnd, dir, sequence[0]);\n                }\n\n                if (sequence.length > 1) {\n                    var r = sequence.length, t = this.intDiv(r, 2);\n                    this._sequencer(x, virtualStart, virtualEnd, dir, sequence.slice(0, t));\n                    this._sequencer(x, virtualStart, virtualEnd, dir, sequence.slice(t));\n                    this.combineSequences(x, virtualStart, virtualEnd, dir, sequence);\n                }\n            },\n\n            _sequenceSingle: function(x, virtualStart, virtualEnd, dir, node) {\n                var neighbors = dir === -1 ? this.downNodes.get(node) : this.upNodes.get(node);\n\n                var n = neighbors.length;\n                if (n !== 0) {\n                    if (n % 2 === 1) {\n                        x.set(node, x.get(neighbors[this.intDiv(n, 2)]));\n                    }\n                    else {\n                        x.set(node, (x.get(neighbors[this.intDiv(n, 2) - 1]) + x.get(neighbors[this.intDiv(n, 2)])) / 2);\n                    }\n\n                    if (virtualStart) {\n                        x.set(node, Math.max(x.get(node), x.get(virtualStart) + this.getMinDist(virtualStart, node)));\n                    }\n                    if (virtualEnd) {\n                        x.set(node, Math.min(x.get(node), x.get(virtualEnd) - this.getMinDist(node, virtualEnd)));\n                    }\n                }\n            },\n\n            combineSequences: function(x, virtualStart, virtualEnd, dir, sequence) {\n                var r = sequence.length, t = this.intDiv(r, 2);\n\n                // collect left changes\n                var leftHeap = [], i, c, n, neighbors, neighbor, pair;\n                for (i = 0; i < t; ++i) {\n                    c = 0;\n                    neighbors = dir === -1 ? this.downNodes.get(sequence[i]) : this.upNodes.get(sequence[i]);\n                    for (n = 0; n < neighbors.length; ++n) {\n                        neighbor = neighbors[n];\n                        if (x.get(neighbor) >= x.get(sequence[i])) {\n                            c++;\n                        }\n                        else {\n                            c--;\n                            leftHeap.push({ k: x.get(neighbor) + this.getMinDist(sequence[i], sequence[t - 1]), v: 2 });\n                        }\n                    }\n                    leftHeap.push({ k: x.get(sequence[i]) + this.getMinDist(sequence[i], sequence[t - 1]), v: c });\n                }\n                if (virtualStart) {\n                    leftHeap.push({ k: x.get(virtualStart) + this.getMinDist(virtualStart, sequence[t - 1]), v: Number.MAX_VALUE });\n                }\n                leftHeap.sort(this._positionDescendingComparer);\n\n                // collect right changes\n                var rightHeap = [];\n                for (i = t; i < r; ++i) {\n                    c = 0;\n                    neighbors = dir === -1 ? this.downNodes.get(sequence[i]) : this.upNodes.get(sequence[i]);\n                    for (n = 0; n < neighbors.length; ++n) {\n                        neighbor = neighbors[n];\n                        if (x.get(neighbor) <= x.get(sequence[i])) {\n                            c++;\n                        }\n                        else {\n                            c--;\n                            rightHeap.push({ k: x.get(neighbor) - this.getMinDist(sequence[i], sequence[t]), v: 2 });\n                        }\n                    }\n                    rightHeap.push({ k: x.get(sequence[i]) - this.getMinDist(sequence[i], sequence[t]), v: c });\n                }\n                if (virtualEnd) {\n                    rightHeap.push({ k: x.get(virtualEnd) - this.getMinDist(virtualEnd, sequence[t]), v: Number.MAX_VALUE });\n                }\n                rightHeap.sort(this._positionAscendingComparer);\n\n                var leftRes = 0, rightRes = 0;\n                var m = this.getMinDist(sequence[t - 1], sequence[t]);\n                while (x.get(sequence[t]) - x.get(sequence[t - 1]) < m) {\n                    if (leftRes < rightRes) {\n                        if (leftHeap.length === 0) {\n                            x.set(sequence[t - 1], x.get(sequence[t]) - m);\n                            break;\n                        }\n                        else {\n                            pair = leftHeap.shift();\n                            leftRes = leftRes + pair.v;\n                            x.set(sequence[t - 1], pair.k);\n                            x.set(sequence[t - 1], Math.max(x.get(sequence[t - 1]), x.get(sequence[t]) - m));\n                        }\n                    }\n                    else {\n                        if (rightHeap.length === 0) {\n                            x.set(sequence[t], x.get(sequence[t - 1]) + m);\n                            break;\n                        }\n                        else {\n                            pair = rightHeap.shift();\n                            rightRes = rightRes + pair.v;\n                            x.set(sequence[t], pair.k);\n                            x.set(sequence[t], Math.min(x.get(sequence[t]), x.get(sequence[t - 1]) + m));\n                        }\n                    }\n                }\n                for (i = t - 2; i >= 0; i--) {\n                    x.set(sequence[i], Math.min(x.get(sequence[i]), x.get(sequence[t - 1]) - this.getMinDist(sequence[i], sequence[t - 1])));\n                }\n                for (i = t + 1; i < r; i++) {\n                    x.set(sequence[i], Math.max(x.get(sequence[i]), x.get(sequence[t]) + this.getMinDist(sequence[i], sequence[t])));\n                }\n            },\n\n            placeLeft: function(node, leftPos, leftClass) {\n                var pos = Number.NEGATIVE_INFINITY;\n                Utils.forEach(this._getComposite(node), function(v) {\n                    var leftSibling = this.leftSibling(v);\n                    if (leftSibling && this.nodeLeftClass.get(leftSibling) === this.nodeLeftClass.get(v)) {\n                        if (!leftPos.containsKey(leftSibling)) {\n                            this.placeLeft(leftSibling, leftPos, leftClass);\n                        }\n                        pos = Math.max(pos, leftPos.get(leftSibling) + this.getMinDist(leftSibling, v));\n                    }\n                }, this);\n                if (pos === Number.NEGATIVE_INFINITY) {\n                    pos = 0;\n                }\n                Utils.forEach(this._getComposite(node), function(v) {\n                    leftPos.set(v, pos);\n                });\n            },\n\n            placeRight: function(node, rightPos, rightClass) {\n                var pos = Number.POSITIVE_INFINITY;\n                Utils.forEach(this._getComposite(node), function(v) {\n                    var rightSibling = this.rightSibling(v);\n                    if (rightSibling && this.nodeRightClass.get(rightSibling) === this.nodeRightClass.get(v)) {\n                        if (!rightPos.containsKey(rightSibling)) {\n                            this.placeRight(rightSibling, rightPos, rightClass);\n                        }\n                        pos = Math.min(pos, rightPos.get(rightSibling) - this.getMinDist(v, rightSibling));\n                    }\n                }, this);\n                if (pos === Number.POSITIVE_INFINITY) {\n                    pos = 0;\n                }\n                Utils.forEach(this._getComposite(node), function(v) {\n                    rightPos.set(v, pos);\n                });\n            },\n\n            leftSibling: function(node) {\n                var layer = this.layers[node.layer],\n                    layerIndex = node.layerIndex;\n                return layerIndex === 0 ? null : layer[layerIndex - 1];\n            },\n\n            rightSibling: function(node) {\n                var layer = this.layers[node.layer];\n                var layerIndex = node.layerIndex;\n                return layerIndex === layer.length - 1 ? null : layer[layerIndex + 1];\n\n            },\n\n            _getComposite: function(node) {\n                return node.isVirtual ? this._nodesInLink(node) : [node];\n            },\n\n            arrangeNodes: function() {\n                var i, l, ni, layer, node;\n                // Initialize node's base priority\n                for (l = 0; l < this.layers.length; l++) {\n                    layer = this.layers[l];\n\n                    for (ni = 0; ni < layer.length; ni++) {\n                        node = layer[ni];\n                        node.upstreamPriority = node.upstreamLinkCount;\n                        node.downstreamPriority = node.downstreamLinkCount;\n                    }\n                }\n\n                // Layout is invoked after MinimizeCrossings\n                // so we may assume node's barycenters are initially correct\n\n                var maxLayoutIterations = 2;\n                for (var it = 0; it < maxLayoutIterations; it++) {\n                    for (i = this.layers.length - 1; i >= 1; i--) {\n                        this.layoutLayer(false, i);\n                    }\n\n                    for (i = 0; i < this.layers.length - 1; i++) {\n                        this.layoutLayer(true, i);\n                    }\n                }\n\n                // Offset the whole structure so that there are no gridPositions < 0\n                var gridPos = Number.MAX_VALUE;\n                for (l = 0; l < this.layers.length; l++) {\n                    layer = this.layers[l];\n\n                    for (ni = 0; ni < layer.length; ni++) {\n                        node = layer[ni];\n                        gridPos = Math.min(gridPos, node.gridPosition);\n                    }\n                }\n\n                if (gridPos < 0) {\n                    for (l = 0; l < this.layers.length; l++) {\n                        layer = this.layers[l];\n\n                        for (ni = 0; ni < layer.length; ni++) {\n                            node = layer[ni];\n                            node.gridPosition = node.gridPosition - gridPos;\n                        }\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Layout of a single layer.\n            /// </summary>\n            /// <param name=\"layerIndex\">The layer to organize.</param>\n            /// <param name=\"movingDownwards\">If set to <c>true</c> we move down in the layer stack.</param>\n            /// <seealso cref=\"OptimizeCrossings()\"/>\n            layoutLayer: function(down, layer) {\n                var iconsidered;\n                var considered;\n\n                if (down) {\n                    considered = this.layers[iconsidered = layer + 1];\n                }\n                else {\n                    considered = this.layers[iconsidered = layer - 1];\n                }\n\n                // list containing the nodes in the considered layer sorted by priority\n                var sorted = [];\n                for (var n = 0; n < considered.length; n++) {\n                    sorted.push(considered[n]);\n                }\n                sorted.sort(function(n1, n2) {\n                    var n1Priority = (n1.upstreamPriority + n1.downstreamPriority) / 2;\n                    var n2Priority = (n2.upstreamPriority + n2.downstreamPriority) / 2;\n\n                    if (Math.abs(n1Priority - n2Priority) < 0.0001) {\n                        return 0;\n                    }\n                    if (n1Priority < n2Priority) {\n                        return 1;\n                    }\n                    return -1;\n                });\n\n                // each node strives for its barycenter; high priority nodes start first\n                Utils.forEach(sorted, function(node) {\n                    var nodeGridPos = node.gridPosition;\n                    var nodeBaryCenter = this.calcBaryCenter(node);\n                    var nodePriority = (node.upstreamPriority + node.downstreamPriority) / 2;\n\n                    if (Math.abs(nodeGridPos - nodeBaryCenter) < 0.0001) {\n                        // This node is exactly at its barycenter -> perfect\n                        return;\n                    }\n\n                    if (Math.abs(nodeGridPos - nodeBaryCenter) < 0.25 + 0.0001) {\n                        // This node is close enough to the barycenter -> should work\n                        return;\n                    }\n\n                    if (nodeGridPos < nodeBaryCenter) {\n                        // Try to move the node to the right in an\n                        // attempt to reach its barycenter\n                        while (nodeGridPos < nodeBaryCenter) {\n                            if (!this.moveRight(node, considered, nodePriority)) {\n                                break;\n                            }\n\n                            nodeGridPos = node.gridPosition;\n                        }\n                    }\n                    else {\n                        // Try to move the node to the left in an\n                        // attempt to reach its barycenter\n                        while (nodeGridPos > nodeBaryCenter) {\n                            if (!this.moveLeft(node, considered, nodePriority)) {\n                                break;\n                            }\n\n                            nodeGridPos = node.gridPosition;\n                        }\n                    }\n                }, this);\n\n                // after the layer has been rearranged we need to recalculate the barycenters\n                // of the nodes in the surrounding layers\n                if (iconsidered > 0) {\n                    this.calcDownData(iconsidered - 1);\n                }\n                if (iconsidered < this.layers.length - 1) {\n                    this.calcUpData(iconsidered + 1);\n                }\n            },\n\n            /// <summary>\n            /// Moves the node to the right and returns <c>true</c> if this was possible.\n            /// </summary>\n            /// <param name=\"node\">The node.</param>\n            /// <param name=\"layer\">The layer.</param>\n            /// <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>\n            moveRight: function(node, layer, priority) {\n                var index = Utils.indexOf(layer, node);\n                if (index === layer.length - 1) {\n                    // this is the last node in the layer, so we can move to the right without troubles\n                    node.gridPosition = node.gridPosition + 0.5;\n                    return true;\n                }\n\n                var rightNode = layer[index + 1];\n                var rightNodePriority = (rightNode.upstreamPriority + rightNode.downstreamPriority) / 2;\n\n                // check if there is space between the right and the current node\n                if (rightNode.gridPosition > node.gridPosition + 1) {\n                    node.gridPosition = node.gridPosition + 0.5;\n                    return true;\n                }\n\n                // we have reached a node with higher priority; no movement is allowed\n                if (rightNodePriority > priority ||\n                    Math.abs(rightNodePriority - priority) < 0.0001) {\n                    return false;\n                }\n\n                // the right node has lower priority - try to move it\n                if (this.moveRight(rightNode, layer, priority)) {\n                    node.gridPosition = node.gridPosition + 0.5;\n                    return true;\n                }\n\n                return false;\n            },\n\n            /// <summary>\n            /// Moves the node to the left and returns <c>true</c> if this was possible.\n            /// </summary>\n            /// <param name=\"node\">The node.</param>\n            /// <param name=\"layer\">The layer.</param>\n            /// <returns>Returns <c>true</c> if the shift was possible, otherwise <c>false</c>.</returns>\n            moveLeft: function(node, layer, priority) {\n                var index = Utils.indexOf(layer, node);\n                if (index === 0) {\n                    // this is the last node in the layer, so we can move to the left without troubles\n                    node.gridPosition = node.gridPosition - 0.5;\n                    return true;\n                }\n\n                var leftNode = layer[index - 1];\n                var leftNodePriority = (leftNode.upstreamPriority + leftNode.downstreamPriority) / 2;\n\n                // check if there is space between the left and the current node\n                if (leftNode.gridPosition < node.gridPosition - 1) {\n                    node.gridPosition = node.gridPosition - 0.5;\n                    return true;\n                }\n\n                // we have reached a node with higher priority; no movement is allowed\n                if (leftNodePriority > priority ||\n                    Math.abs(leftNodePriority - priority) < 0.0001) {\n                    return false;\n                }\n\n                // The left node has lower priority - try to move it\n                if (this.moveLeft(leftNode, layer, priority)) {\n                    node.gridPosition = node.gridPosition - 0.5;\n                    return true;\n                }\n\n                return false;\n            },\n\n            mapVirtualNode: function(node, link) {\n                this.nodeToLinkMap.set(node, link);\n                if (!this.linkToNodeMap.containsKey(link)) {\n                    this.linkToNodeMap.set(link, []);\n                }\n                this.linkToNodeMap.get(link).push(node);\n            },\n\n            _nodesInLink: function(node) {\n                return this.linkToNodeMap.get(this.nodeToLinkMap.get(node));\n            },\n\n            /// <summary>\n            /// Inserts dummy nodes to break long links.\n            /// </summary>\n            _dummify: function() {\n                this.linkToNodeMap = new Dictionary();\n                this.nodeToLinkMap = new Dictionary();\n\n                var layer, pos, newNode, node, r, newLink, i, l, links = this.graph.links.slice(0);\n                var layers = this.layers;\n\n                var addLinkBetweenLayers = function(upLayer, downLayer, link) {\n                    layers[upLayer].linksTo[downLayer] = layers[upLayer].linksTo[downLayer] || [];\n                    layers[upLayer].linksTo[downLayer].push(link);\n                };\n\n                for (l = 0; l < links.length; l++) {\n                    var link = links[l];\n                    var o = link.source;\n                    var d = link.target;\n\n                    var oLayer = o.layer;\n                    var dLayer = d.layer;\n                    var oPos = o.gridPosition;\n                    var dPos = d.gridPosition;\n\n                    var step = (dPos - oPos) / Math.abs(dLayer - oLayer);\n\n                    var p = o;\n                    if (oLayer - dLayer > 1) {\n                        for (i = oLayer - 1; i > dLayer; i--) {\n                            newNode = new Node();\n                            newNode.x = o.x;\n                            newNode.y = o.y;\n                            newNode.width = o.width / 100;\n                            newNode.height = o.height / 100;\n\n                            layer = layers[i];\n                            pos = (i - dLayer) * step + oPos;\n                            if (pos > layer.length) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and dest are both last\n                            if (oPos >= layers[oLayer].length - 1 &&\n                                dPos >= layers[dLayer].length - 1) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and destination are both first\n                            else if (oPos === 0 && dPos === 0) {\n                                pos = 0;\n                            }\n\n                            newNode.layer = i;\n                            newNode.uBaryCenter = 0.0;\n                            newNode.dBaryCenter = 0.0;\n                            newNode.upstreamLinkCount = 0;\n                            newNode.downstreamLinkCount = 0;\n                            newNode.gridPosition = pos;\n                            newNode.isVirtual = true;\n\n                            Utils.insert(layer, newNode, pos);\n\n                            // translate rightwards nodes' positions\n                            for (r = pos + 1; r < layer.length; r++) {\n                                node = layer[r];\n                                node.gridPosition = node.gridPosition + 1;\n                            }\n\n                            newLink = new Link(p, newNode);\n                            newLink.depthOfDumminess = 0;\n\n                            addLinkBetweenLayers(i - 1, i, newLink);\n\n                            p = newNode;\n\n                            // add the new node and the new link to the graph\n                            this.graph._addNode(newNode);\n                            this.graph.addLink(newLink);\n\n                            newNode.index = this.graph.nodes.length - 1;\n                            this.mapVirtualNode(newNode, link);\n                        }\n\n                        // set the origin of the real arrow to the last dummy\n                        addLinkBetweenLayers(dLayer - 1, dLayer, newLink);\n                        link.changeSource(p);\n                        link.depthOfDumminess = oLayer - dLayer - 1;\n                    } else if (oLayer - dLayer < -1) {\n                        for (i = oLayer + 1; i < dLayer; i++) {\n                            newNode = new Node();\n                            newNode.x = o.x;\n                            newNode.y = o.y;\n                            newNode.width = o.width / 100;\n                            newNode.height = o.height / 100;\n\n                            layer = layers[i];\n                            pos = (i - oLayer) * step + oPos;\n                            if (pos > layer.length) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and dest are both last\n                            if (oPos >= layers[oLayer].length - 1 &&\n                                dPos >= layers[dLayer].length - 1) {\n                                pos = layer.length;\n                            }\n\n                            // check if origin and destination are both first\n                            else if (oPos === 0 && dPos === 0) {\n                                pos = 0;\n                            }\n\n                            newNode.layer = i;\n                            newNode.uBaryCenter = 0.0;\n                            newNode.dBaryCenter = 0.0;\n                            newNode.upstreamLinkCount = 0;\n                            newNode.downstreamLinkCount = 0;\n                            newNode.gridPosition = pos;\n                            newNode.isVirtual = true;\n\n                            pos &= pos; // truncates to int\n                            Utils.insert(layer, newNode, pos);\n\n                            // translate rightwards nodes' positions\n                            for (r = pos + 1; r < layer.length; r++) {\n                                node = layer[r];\n                                node.gridPosition = node.gridPosition + 1;\n                            }\n\n                            newLink = new Link(p, newNode);\n                            newLink.depthOfDumminess = 0;\n                            addLinkBetweenLayers(i - 1, i, newLink);\n\n                            p = newNode;\n\n                            // add the new node and the new link to the graph\n                            this.graph._addNode(newNode);\n                            this.graph.addLink(newLink);\n\n                            newNode.index = this.graph.nodes.length - 1;\n                            this.mapVirtualNode(newNode, link);\n                        }\n                        addLinkBetweenLayers(dLayer - 1, dLayer, link);\n\n                        // Set the origin of the real arrow to the last dummy\n                        link.changeSource(p);\n                        link.depthOfDumminess = dLayer - oLayer - 1;\n                    } else {\n                        addLinkBetweenLayers(oLayer, dLayer, link);\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Removes the dummy nodes inserted earlier to break long links.\n            /// </summary>\n            /// <remarks>The virtual nodes are effectively turned into intermediate connection points.</remarks>\n            _dedummify: function() {\n                var dedum = true;\n                while (dedum) {\n                    dedum = false;\n\n                    for (var l = 0; l < this.graph.links.length; l++) {\n                        var link = this.graph.links[l];\n                        if (!link.depthOfDumminess) {\n                            continue;\n                        }\n\n                        var points = [];\n\n                        // add points in reverse order\n                        points.unshift({ x: link.target.x, y: link.target.y });\n                        points.unshift({ x: link.source.x, y: link.source.y });\n\n                        // _dedummify the link\n                        var temp = link;\n                        var depthOfDumminess = link.depthOfDumminess;\n                        for (var d = 0; d < depthOfDumminess; d++) {\n                            var node = temp.source;\n                            var prevLink = node.incoming[0];\n\n                            points.unshift({ x: prevLink.source.x, y: prevLink.source.y });\n\n                            temp = prevLink;\n                        }\n\n                        // restore the original link origin\n                        link.changeSource(temp.source);\n\n                        // reset dummification flag\n                        link.depthOfDumminess = 0;\n\n                        // note that we only need the intermediate points, floating links have been dropped in the analysis\n                        if (points.length > 2) {\n                            // first and last are the endpoints\n                            points.splice(0, 1);\n                            points.splice(points.length - 1);\n                            link.points = points;\n                        }\n                        else {\n                            link.points = [];\n                        }\n\n                        // we are not going to delete the dummy elements;\n                        // they won't be needed anymore anyway.\n\n                        dedum = true;\n                        break;\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Optimizes/reduces the crossings between the layers by turning the crossing problem into a (combinatorial) number ordering problem.\n            /// </summary>\n            _optimizeCrossings: function() {\n                var moves = -1, i;\n                var maxIterations = 3;\n                var iter = 0;\n\n                while (moves !== 0) {\n                    if (iter++ > maxIterations) {\n                        break;\n                    }\n\n                    moves = 0;\n\n                    for (i = this.layers.length - 1; i >= 1; i--) {\n                        moves += this.optimizeLayerCrossings(false, i);\n                    }\n\n                    for (i = 0; i < this.layers.length - 1; i++) {\n                        moves += this.optimizeLayerCrossings(true, i);\n                    }\n                }\n            },\n\n            calcUpData: function(layer) {\n                if (layer === 0) {\n                    return;\n                }\n\n                var considered = this.layers[layer], i, l, link;\n                var upLayer = new Set();\n                var temp = this.layers[layer - 1];\n                for (i = 0; i < temp.length; i++) {\n                    upLayer.add(temp[i]);\n                }\n\n                for (i = 0; i < considered.length; i++) {\n                    var node = considered[i];\n\n                    // calculate barycenter\n                    var sum = 0;\n                    var total = 0;\n\n                    for (l = 0; l < node.incoming.length; l++) {\n                        link = node.incoming[l];\n                        if (upLayer.contains(link.source)) {\n                            total++;\n                            sum += link.source.gridPosition;\n                        }\n                    }\n\n                    for (l = 0; l < node.outgoing.length; l++) {\n                        link = node.outgoing[l];\n                        if (upLayer.contains(link.target)) {\n                            total++;\n                            sum += link.target.gridPosition;\n                        }\n                    }\n\n                    if (total > 0) {\n                        node.uBaryCenter = sum / total;\n                        node.upstreamLinkCount = total;\n                    }\n                    else {\n                        node.uBaryCenter = i;\n                        node.upstreamLinkCount = 0;\n                    }\n                }\n            },\n\n            calcDownData: function(layer) {\n                if (layer === this.layers.length - 1) {\n                    return;\n                }\n\n                var considered = this.layers[layer], i , l, link;\n                var downLayer = new Set();\n                var temp = this.layers[layer + 1];\n                for (i = 0; i < temp.length; i++) {\n                    downLayer.add(temp[i]);\n                }\n\n                for (i = 0; i < considered.length; i++) {\n                    var node = considered[i];\n\n                    // calculate barycenter\n                    var sum = 0;\n                    var total = 0;\n\n                    for (l = 0; l < node.incoming.length; l++) {\n                        link = node.incoming[l];\n                        if (downLayer.contains(link.source)) {\n                            total++;\n                            sum += link.source.gridPosition;\n                        }\n                    }\n\n                    for (l = 0; l < node.outgoing.length; l++) {\n                        link = node.outgoing[l];\n                        if (downLayer.contains(link.target)) {\n                            total++;\n                            sum += link.target.gridPosition;\n                        }\n                    }\n\n                    if (total > 0) {\n                        node.dBaryCenter = sum / total;\n                        node.downstreamLinkCount = total;\n                    }\n                    else {\n                        node.dBaryCenter = i;\n                        node.downstreamLinkCount = 0;\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Optimizes the crossings.\n            /// </summary>\n            /// <remarks>The big trick here is the usage of weights or values attached to connected nodes which turn a problem of crossing links\n            /// to an a problem of ordering numbers.</remarks>\n            /// <param name=\"layerIndex\">The layer index.</param>\n            /// <param name=\"movingDownwards\">If set to <c>true</c> we move down in the layer stack.</param>\n            /// <returns>The number of nodes having moved, i.e. the number of crossings reduced.</returns>\n            optimizeLayerCrossings: function(down, layer) {\n                var iconsidered;\n                var considered;\n\n                if (down) {\n                    considered = this.layers[iconsidered = layer + 1];\n                }\n                else {\n                    considered = this.layers[iconsidered = layer - 1];\n                }\n\n                // remember what it was\n                var presorted = considered.slice(0);\n\n                // calculate barycenters for all nodes in the considered layer\n                if (down) {\n                    this.calcUpData(iconsidered);\n                }\n                else {\n                    this.calcDownData(iconsidered);\n                }\n\n                var that = this;\n                // sort nodes within this layer according to the barycenters\n                considered.sort(function(n1, n2) {\n                    var n1BaryCenter = that.calcBaryCenter(n1),\n                        n2BaryCenter = that.calcBaryCenter(n2);\n                    if (Math.abs(n1BaryCenter - n2BaryCenter) < 0.0001) {\n                        // in case of coinciding barycenters compare by the count of in/out links\n                        if (n1.degree() === n2.degree()) {\n                            return that.compareByIndex(n1, n2);\n                        }\n                        else if (n1.degree() < n2.degree()) {\n                            return 1;\n                        }\n                        return -1;\n                    }\n                    var compareValue = (n2BaryCenter - n1BaryCenter) * 1000;\n                    if (compareValue > 0) {\n                        return -1;\n                    }\n                    else if (compareValue < 0) {\n                        return 1;\n                    }\n                    return that.compareByIndex(n1, n2);\n                });\n\n                // count relocations\n                var i, moves = 0;\n                for (i = 0; i < considered.length; i++) {\n                    if (considered[i] !== presorted[i]) {\n                        moves++;\n                    }\n                }\n\n                if (moves > 0) {\n                    // now that the boxes have been arranged, update their grid positions\n                    var inode = 0;\n                    for (i = 0; i < considered.length; i++) {\n                        var node = considered[i];\n                        node.gridPosition = inode++;\n                    }\n                }\n\n                return moves;\n            },\n\n            /// <summary>\n            /// Swaps a pair of nodes in a layer.\n            /// </summary>\n            /// <param name=\"layerIndex\">Index of the layer.</param>\n            /// <param name=\"n\">The Nth node in the layer.</param>\n            _swapPairs: function() {\n                var maxIterations = this.options.layeredIterations;\n                var iter = 0;\n\n                while (true) {\n                    if (iter++ > maxIterations) {\n                        break;\n                    }\n\n                    var downwards = (iter % 4 <= 1);\n                    var secondPass = (iter % 4 === 1);\n\n                    for (var l = (downwards ? 0 : this.layers.length - 1);\n                         downwards ? l <= this.layers.length - 1 : l >= 0; l += (downwards ? 1 : -1)) {\n                        var layer = this.layers[l];\n                        var hasSwapped = false;\n\n                        // there is no need to recalculate crossings if they were calculated\n                        // on the previous step and nothing has changed\n                        var calcCrossings = true;\n                        var memCrossings = 0;\n\n                        for (var n = 0; n < layer.length - 1; n++) {\n                            // count crossings\n                            var up = 0;\n                            var down = 0;\n                            var crossBefore = 0;\n\n                            if (calcCrossings) {\n                                if (l !== 0) {\n                                    up = this.countLinksCrossingBetweenTwoLayers(l - 1, l);\n                                }\n                                if (l !== this.layers.length - 1) {\n                                    down = this.countLinksCrossingBetweenTwoLayers(l, l + 1);\n                                }\n                                if (downwards) {\n                                    up *= 2;\n                                }\n                                else {\n                                    down *= 2;\n                                }\n\n                                crossBefore = up + down;\n                            }\n                            else {\n                                crossBefore = memCrossings;\n                            }\n\n                            if (crossBefore === 0) {\n                                continue;\n                            }\n\n                            // Swap nodes\n                            var node1 = layer[n];\n                            var node2 = layer[n + 1];\n\n                            var node1GridPos = node1.gridPosition;\n                            var node2GridPos = node2.gridPosition;\n                            layer[n] = node2;\n                            layer[n + 1] = node1;\n                            node1.gridPosition = node2GridPos;\n                            node2.gridPosition = node1GridPos;\n\n                            // count crossings again and if worse than before, restore swapping\n                            up = 0;\n                            if (l !== 0) {\n                                up = this.countLinksCrossingBetweenTwoLayers(l - 1, l);\n                            }\n                            down = 0;\n                            if (l !== this.layers.length - 1) {\n                                down = this.countLinksCrossingBetweenTwoLayers(l, l + 1);\n                            }\n                            if (downwards) {\n                                up *= 2;\n                            }\n                            else {\n                                down *= 2;\n                            }\n                            var crossAfter = up + down;\n\n                            var revert = false;\n                            if (secondPass) {\n                                revert = crossAfter >= crossBefore;\n                            }\n                            else {\n                                revert = crossAfter > crossBefore;\n                            }\n\n                            if (revert) {\n                                node1 = layer[n];\n                                node2 = layer[n + 1];\n\n                                node1GridPos = node1.gridPosition;\n                                node2GridPos = node2.gridPosition;\n                                layer[n] = node2;\n                                layer[n + 1] = node1;\n                                node1.gridPosition = node2GridPos;\n                                node2.gridPosition = node1GridPos;\n\n                                // nothing has changed, remember the crossings so that\n                                // they are not calculated again on the next step\n                                memCrossings = crossBefore;\n                                calcCrossings = false;\n                            }\n                            else {\n                                hasSwapped = true;\n                                calcCrossings = true;\n                            }\n                        }\n\n                        if (hasSwapped) {\n                            if (l !== this.layers.length - 1) {\n                                this.calcUpData(l + 1);\n                            }\n                            if (l !== 0) {\n                                this.calcDownData(l - 1);\n                            }\n                        }\n                    }\n                }\n            },\n\n            /// <summary>\n            /// Counts the number of links crossing between two layers.\n            /// </summary>\n            /// <param name=\"layerIndex1\">The layer index.</param>\n            /// <param name=\"layerIndex2\">Another layer index.</param>\n            /// <returns></returns>\n            countLinksCrossingBetweenTwoLayers: function(ulayer, dlayer) {\n                var links = this.layers[ulayer].linksTo[dlayer];\n                var link1, link2, n11, n12, n21, n22, l1, l2;\n                var crossings = 0;\n                var length = links.length;\n\n                for (l1 = 0; l1 < length; l1++) {\n                    link1 = links[l1];\n                    for (l2 = l1 + 1; l2 < length; l2++) {\n\n                        link2 = links[l2];\n\n                        if (link1.target.layer === dlayer) {\n                            n11 = link1.source;\n                            n12 = link1.target;\n                        }\n                        else {\n                            n11 = link1.target;\n                            n12 = link1.source;\n                        }\n\n                        if (link2.target.layer === dlayer) {\n                            n21 = link2.source;\n                            n22 = link2.target;\n                        }\n                        else {\n                            n21 = link2.target;\n                            n22 = link2.source;\n                        }\n\n                        var n11gp = n11.gridPosition;\n                        var n12gp = n12.gridPosition;\n                        var n21gp = n21.gridPosition;\n                        var n22gp = n22.gridPosition;\n\n                        if ((n11gp - n21gp) * (n12gp - n22gp) < 0) {\n                            crossings++;\n                        }\n                    }\n                }\n\n                return crossings;\n            },\n\n            calcBaryCenter: function(node) {\n                var upstreamLinkCount = node.upstreamLinkCount;\n                var downstreamLinkCount = node.downstreamLinkCount;\n                var uBaryCenter = node.uBaryCenter;\n                var dBaryCenter = node.dBaryCenter;\n\n                if (upstreamLinkCount > 0 && downstreamLinkCount > 0) {\n                    return (uBaryCenter + dBaryCenter) / 2;\n                }\n                if (upstreamLinkCount > 0) {\n                    return uBaryCenter;\n                }\n                if (downstreamLinkCount > 0) {\n                    return dBaryCenter;\n                }\n\n                return 0;\n            },\n\n            _gridPositionComparer: function(x, y) {\n                if (x.gridPosition < y.gridPosition) {\n                    return -1;\n                }\n                if (x.gridPosition > y.gridPosition) {\n                    return 1;\n                }\n                return 0;\n            },\n\n            _positionAscendingComparer: function(x, y) {\n                return x.k < y.k ? -1 : x.k > y.k ? 1 : 0;\n            },\n\n            _positionDescendingComparer: function(x, y) {\n                return x.k < y.k ? 1 : x.k > y.k ? -1 : 0;\n            },\n\n            _firstVirtualNode: function(layer) {\n                for (var c = 0; c < layer.length; c++) {\n                    if (layer[c].isVirtual) {\n                        return c;\n                    }\n                }\n                return -1;\n            },\n\n            compareByIndex: function(o1, o2) {\n                var i1 = o1.index;\n                var i2 = o2.index;\n\n                if (i1 < i2) {\n                    return 1;\n                }\n\n                if (i1 > i2) {\n                    return -1;\n                }\n\n                return 0;\n            },\n\n            intDiv: function(numerator, denominator) {\n                return (numerator - numerator % denominator) / denominator;\n            },\n\n            nextVirtualNode: function(layer, node) {\n                var nodeIndex = node.layerIndex;\n                for (var i = nodeIndex + 1; i < layer.length; ++i) {\n                    if (layer[i].isVirtual) {\n                        return layer[i];\n                    }\n                }\n                return null;\n            }\n\n        });\n\n        /**\n         * Captures the state of a diagram; node positions, link points and so on.\n         * @type {*}\n         */\n        var LayoutState = kendo.Class.extend({\n            init: function(diagram, graphOrNodes) {\n                if (Utils.isUndefined(diagram)) {\n                    throw \"No diagram given\";\n                }\n                this.diagram = diagram;\n                this.nodeMap = new Dictionary();\n                this.linkMap = new Dictionary();\n                this.capture(graphOrNodes ? graphOrNodes : diagram);\n            },\n\n            /**\n             * Will capture either\n             * - the state of the shapes and the intermediate points of the connections in the diagram\n             * - the bounds of the nodes contained in the Graph together with the intermediate points of the links in the Graph\n             * - the bounds of the nodes in the Array<Node>\n             * - the links points and node bounds in the literal object\n             * @param diagramOrGraphOrNodes\n             */\n            capture: function(diagramOrGraphOrNodes) {\n                var node,\n                    nodes,\n                    shape,\n                    i,\n                    conn,\n                    link,\n                    links;\n\n                if (diagramOrGraphOrNodes instanceof diagram.Graph) {\n\n                    for (i = 0; i < diagramOrGraphOrNodes.nodes.length; i++) {\n                        node = diagramOrGraphOrNodes.nodes[i];\n                        shape = node.associatedShape;\n                        //shape.bounds(new Rect(node.x, node.y, node.width, node.height));\n                        this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n                    }\n                    for (i = 0; i < diagramOrGraphOrNodes.links.length; i++) {\n                        link = diagramOrGraphOrNodes.links[i];\n                        conn = link.associatedConnection;\n                        this.linkMap.set(conn.visual.id, link.points());\n                    }\n                }\n                else if (diagramOrGraphOrNodes instanceof Array) {\n                    nodes = diagramOrGraphOrNodes;\n                    for (i = 0; i < nodes.length; i++) {\n                        node = nodes[i];\n                        shape = node.associatedShape;\n                        if (shape) {\n                            this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n                        }\n                    }\n                }\n                else if (diagramOrGraphOrNodes.hasOwnProperty(\"links\") && diagramOrGraphOrNodes.hasOwnProperty(\"nodes\")) {\n                    nodes = diagramOrGraphOrNodes.nodes;\n                    links = diagramOrGraphOrNodes.links;\n                    for (i = 0; i < nodes.length; i++) {\n                        node = nodes[i];\n                        shape = node.associatedShape;\n                        if (shape) {\n                            this.nodeMap.set(shape.visual.id, new Rect(node.x, node.y, node.width, node.height));\n                        }\n                    }\n                    for (i = 0; i < links.length; i++) {\n                        link = links[i];\n                        conn = link.associatedConnection;\n                        if (conn) {\n                            this.linkMap.set(conn.visual.id, link.points);\n                        }\n                    }\n                }\n                else { // capture the diagram\n                    var shapes = this.diagram.shapes;\n                    var connections = this.diagram.connections;\n                    for (i = 0; i < shapes.length; i++) {\n                        shape = shapes[i];\n                        this.nodeMap.set(shape.visual.id, shape.bounds());\n                    }\n                    for (i = 0; i < connections.length; i++) {\n                        conn = connections[i];\n                        this.linkMap.set(conn.visual.id, conn.points());\n                    }\n                }\n            }\n        });\n\n        deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n            SpringLayout: SpringLayout,\n            TreeLayout: TreeLayout,\n            GraphAdapter: DiagramToHyperTreeAdapter,\n            LayeredLayout: LayeredLayout,\n            LayoutBase: LayoutBase,\n            LayoutState: LayoutState\n        });\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n            // Imports ================================================================\n            var dataviz = kendo.dataviz,\n                draw = kendo.drawing,\n                geom = kendo.geometry,\n                diagram = dataviz.diagram,\n                Widget = kendo.ui.Widget,\n                Class = kendo.Class,\n                deepExtend = kendo.deepExtend,\n                outerWidth = kendo._outerWidth,\n                outerHeight = kendo._outerHeight,\n                extend = $.extend,\n                HierarchicalDataSource = kendo.data.HierarchicalDataSource,\n                Canvas = diagram.Canvas,\n                Group = diagram.Group,\n                Rectangle = diagram.Rectangle,\n                Circle = diagram.Circle,\n                CompositeTransform = diagram.CompositeTransform,\n                Rect = diagram.Rect,\n                Path = diagram.Path,\n                DeleteShapeUnit = diagram.DeleteShapeUnit,\n                DeleteConnectionUnit = diagram.DeleteConnectionUnit,\n                TextBlock = diagram.TextBlock,\n                Image = diagram.Image,\n                Point = diagram.Point,\n                Intersect = diagram.Intersect,\n                ConnectionEditAdorner = diagram.ConnectionEditAdorner,\n                UndoRedoService = diagram.UndoRedoService,\n                ToolService = diagram.ToolService,\n                Selector = diagram.Selector,\n                ResizingAdorner = diagram.ResizingAdorner,\n                ConnectorsAdorner = diagram.ConnectorsAdorner,\n                Cursors = diagram.Cursors,\n                Utils = diagram.Utils,\n                Observable = kendo.Observable,\n                ToBackUnit = diagram.ToBackUnit,\n                ToFrontUnit = diagram.ToFrontUnit,\n                PolylineRouter = diagram.PolylineRouter,\n                CascadingRouter = diagram.CascadingRouter,\n                isUndefined = Utils.isUndefined,\n                isDefined = Utils.isDefined,\n                defined = draw.util.defined,\n                isArray = Array.isArray,\n                isFunction = kendo.isFunction,\n                isString = Utils.isString,\n                isPlainObject = $.isPlainObject,\n\n                math = Math;\n\n            // Constants ==============================================================\n            var NS = \".kendoDiagram\",\n                CASCADING = \"cascading\",\n                ITEMBOUNDSCHANGE = \"itemBoundsChange\",\n                CHANGE = \"change\",\n                CLICK = \"click\",\n                DRAG = \"drag\",\n                DRAG_END = \"dragEnd\",\n                DRAG_START = \"dragStart\",\n                MOUSE_ENTER = \"mouseEnter\",\n                MOUSE_LEAVE = \"mouseLeave\",\n                ERROR = \"error\",\n                AUTO = \"Auto\",\n                TOP = \"Top\",\n                RIGHT = \"Right\",\n                LEFT = \"Left\",\n                BOTTOM = \"Bottom\",\n                MAXINT = 9007199254740992,\n                SELECT = \"select\",\n                ITEMROTATE = \"itemRotate\",\n                PAN = \"pan\",\n                ZOOM_START = \"zoomStart\",\n                ZOOM_END = \"zoomEnd\",\n                NONE = \"none\",\n                DEFAULT_CANVAS_WIDTH = 600,\n                DEFAULT_CANVAS_HEIGHT = 600,\n                DEFAULT_SHAPE_TYPE = \"rectangle\",\n                DEFAULT_SHAPE_WIDTH = 100,\n                DEFAULT_SHAPE_HEIGHT = 100,\n                DEFAULT_SHAPE_MINWIDTH = 20,\n                DEFAULT_SHAPE_MINHEIGHT = 20,\n                DEFAULT_SHAPE_POSITION = 0,\n                DEFAULT_CONNECTION_BACKGROUND = \"Yellow\",\n                MAX_VALUE = Number.MAX_VALUE,\n                MIN_VALUE = -Number.MAX_VALUE,\n                ABSOLUTE = \"absolute\",\n                TRANSFORMED = \"transformed\",\n                ROTATED = \"rotated\",\n                TRANSPARENT = \"transparent\",\n                WIDTH = \"width\",\n                HEIGHT = \"height\",\n                X = \"x\",\n                Y = \"y\",\n                MOUSEWHEEL_NS = \"DOMMouseScroll\" + NS + \" mousewheel\" + NS,\n                MOBILE_ZOOM_RATE = 0.05,\n                MOBILE_PAN_DISTANCE = 5,\n                BUTTON_TEMPLATE = function (ref) {\n                        var className = ref.className;\n                        var icon = ref.icon;\n                        var themeColor = ref.themeColor;\n                        var text = ref.text;\n\n                        return kendo.html.renderButton((\"<button class=\\\"\" + className + \"\\\" href=\\\"#\\\">\" + text + \"</button>\"), {\n                        icon: icon,\n                        themeColor: themeColor\n                    });\n            },\n                CONNECTION_CONTENT_OFFSET = 5;\n\n            diagram.DefaultConnectors = [{\n                name: TOP\n            }, {\n                name: BOTTOM\n            }, {\n                name: LEFT\n            }, {\n                name: RIGHT\n            }, {\n                name: AUTO,\n                position: function(shape) {\n                    return shape.getPosition(\"center\");\n                }\n            }];\n\n            var defaultButtons = {\n                cancel: {\n                    text: \"Cancel\",\n                    icon: \"cancel-outline\",\n                    className: \"k-diagram-cancel\",\n                },\n                update: {\n                    text: \"Save\",\n                    imageClass: \"save\",\n                    icon: \"k-diagram-update\",\n                    themeColor: \"primary\"\n                }\n            };\n\n            diagram.shapeDefaults = function(extra) {\n                var defaults = {\n                    type: DEFAULT_SHAPE_TYPE,\n                    path: \"\",\n                    autoSize: true,\n                    visual: null,\n                    x: DEFAULT_SHAPE_POSITION,\n                    y: DEFAULT_SHAPE_POSITION,\n                    minWidth: DEFAULT_SHAPE_MINWIDTH,\n                    minHeight: DEFAULT_SHAPE_MINHEIGHT,\n                    width: DEFAULT_SHAPE_WIDTH,\n                    height: DEFAULT_SHAPE_HEIGHT,\n                    hover: {},\n                    editable: {\n                        connect: true,\n                        tools: []\n                    },\n                    connectors: diagram.DefaultConnectors,\n                    rotation: {\n                        angle: 0\n                    }\n                };\n\n                Utils.simpleExtend(defaults, extra);\n\n                return defaults;\n            };\n\n            function mwDelta(e) {\n                var origEvent = e.originalEvent,\n                    delta = 0;\n\n                if (origEvent.wheelDelta) {\n                    delta = -origEvent.wheelDelta / 40;\n                    delta = delta > 0 ? math.ceil(delta) : math.floor(delta);\n                } else if (origEvent.detail) {\n                    delta = origEvent.detail;\n                }\n\n                return delta;\n            }\n\n            function isAutoConnector(connector) {\n                return connector.options.name.toLowerCase() === AUTO.toLowerCase();\n            }\n\n            function closestConnector(point, connectors) {\n                var minimumDistance = MAXINT, resCtr, connector;\n                for (var i = 0; i < connectors.length; i++) {\n                    connector = connectors[i];\n                    if (!isAutoConnector(connector)) {\n                        var dist = point.distanceTo(connector.position());\n                        if (dist < minimumDistance) {\n                            minimumDistance = dist;\n                            resCtr = connector;\n                        }\n                    }\n                }\n                return resCtr;\n            }\n\n            function indicesOfItems(group, visuals) {\n                var i, indices = [], visual;\n                var children = group.drawingContainer().children;\n                var length = children.length;\n                for (i = 0; i < visuals.length; i++) {\n                    visual = visuals[i];\n                    for (var j = 0; j < length; j++) {\n                        if (children[j] == visual.drawingContainer()) {\n                            indices.push(j);\n                            break;\n                        }\n                    }\n                }\n                return indices;\n            }\n\n            var DiagramElement = Observable.extend({\n                init: function(options) {\n                    var that = this;\n                    that.dataItem = (options || {}).dataItem;\n                    Observable.fn.init.call(that);\n                    that.options = deepExtend({ id: diagram.randomId() }, that.options, options);\n                    that.isSelected = false;\n                    that.visual = new Group({\n                        id: that.options.id,\n                        autoSize: that.options.autoSize\n                    });\n                    that.id = that.options.id;\n                    that._template();\n                },\n\n                options: {\n                    hover: {},\n                    cursor: Cursors.grip,\n                    content: {\n                        align: \"center middle\"\n                    },\n                    selectable: true,\n                    serializable: true,\n                    enable: true\n                },\n\n                _getCursor: function(point) {\n                    if (this.adorner) {\n                        return this.adorner._getCursor(point);\n                    }\n                    return this.options.cursor;\n                },\n\n                visible: function(value) {\n                    if (isUndefined(value)) {\n                        return this.visual.visible();\n                    } else {\n                        this.visual.visible(value);\n                    }\n                },\n\n                bounds: function() {\n                },\n\n                refresh: function() {\n                    this.visual.redraw();\n                },\n\n                position: function(point) {\n                    this.options.x = point.x;\n                    this.options.y = point.y;\n                    this.visual.position(point);\n                },\n\n                toString: function() {\n                    return this.options.id;\n                },\n\n                serialize: function() {\n                    // the options json object describes the shape perfectly. So this object can serve as shape serialization.\n                    var json = deepExtend({}, { options: this.options });\n                    if (this.dataItem) {\n                        json.dataItem = this.dataItem.toString();\n                    }\n                    return json;\n                },\n\n                _content: function(content) {\n                    if (content !== undefined$1) {\n                        var options = this.options;\n\n                        if (diagram.Utils.isString(content)) {\n                            options.content.text = content;\n                        } else {\n                            deepExtend(options.content, content);\n                        }\n\n                        var contentOptions = options.content;\n                        var contentVisual = this._contentVisual;\n\n                        if (!contentVisual) {\n                            this._createContentVisual(contentOptions);\n                        } else {\n                            this._updateContentVisual(contentOptions);\n                        }\n                    }\n\n                    return this.options.content.text;\n                },\n\n                _createContentVisual: function(options) {\n                    if (options.text) {\n                        this._contentVisual = new TextBlock(options);\n                        this._contentVisual._includeInBBox = false;\n                        this.visual.append(this._contentVisual);\n                    }\n                },\n\n                _updateContentVisual: function(options) {\n                    this._contentVisual.redraw(options);\n                },\n\n                _hitTest: function(point) {\n                    var bounds = this.bounds();\n                    return this.visible() && bounds.contains(point) && this.options.enable;\n                },\n\n                _template: function() {\n                    var that = this;\n                    if (that.options.content.template) {\n                        var data = that.dataItem || {},\n                            elementTemplate = kendo.template(that.options.content.template, {\n                                paramName: \"dataItem\"\n                            });\n\n                        that.options.content.text = elementTemplate(data);\n                    }\n                },\n\n                _canSelect: function() {\n                    return this.options.selectable !== false;\n                },\n\n                toJSON: function() {\n                    return {\n                        id: this.options.id\n                    };\n                }\n            });\n\n            var Connector = Class.extend({\n                init: function(shape, options) {\n                    this.options = deepExtend({}, this.options, options);\n                    this.connections = [];\n                    this.shape = shape;\n                },\n                options: {\n                    width: 7,\n                    height: 7,\n                    fill: {\n                        color: DEFAULT_CONNECTION_BACKGROUND\n                    },\n                    hover: {}\n                },\n                position: function() {\n                    if (this.options.position) {\n                        return this.options.position(this.shape);\n                    } else {\n                        return this.shape.getPosition(this.options.name);\n                    }\n                },\n                toJSON: function() {\n                    return {\n                        shapeId: this.shape.toString(),\n                        connector: this.options.name\n                    };\n                }\n            });\n\n            Connector.parse = function(diagram, str) {\n                var tempStr = str.split(\":\"),\n                    id = tempStr[0],\n                    name = tempStr[1] || AUTO;\n\n                for (var i = 0; i < diagram.shapes.length; i++) {\n                    var shape = diagram.shapes[i];\n                    if (shape.options.id == id) {\n                        return shape.getConnector(name.trim());\n                    }\n                }\n            };\n\n            var Shape = DiagramElement.extend({\n                init: function(options, diagram) {\n                    var that = this;\n                    DiagramElement.fn.init.call(that, options);\n                    this.diagram = diagram;\n                    this.updateOptionsFromModel();\n                    options = that.options;\n                    that.connectors = [];\n                    that.type = options.type;\n                    that.createShapeVisual();\n                    that.updateBounds();\n                    that.content(that.content());\n\n                    that._createConnectors();\n                },\n\n                options: diagram.shapeDefaults(),\n\n                _setOptionsFromModel: function(model) {\n                    var modelOptions = filterShapeDataItem(model || this.dataItem);\n                    this.options = deepExtend({}, this.options, modelOptions);\n\n                    this.redrawVisual();\n                },\n\n                updateOptionsFromModel: function(model, field) {\n                    if (this.diagram && this.diagram._isEditable) {\n                        var modelOptions = filterShapeDataItem(model || this.dataItem);\n\n                        if (model && field) {\n                            if (!dataviz.inArray(field, [\"x\", \"y\", \"width\", \"height\"])) {\n                                if (this.options.visual) {\n                                    this._redrawVisual();\n                                } else if (modelOptions.type) {\n                                    this.options = deepExtend({}, this.options, modelOptions);\n                                    this._redrawVisual();\n                                }\n\n                                if (this.options.content) {\n                                    this._template();\n                                    this.content(this.options.content);\n                                }\n                            } else {\n                                var bounds = this.bounds();\n                                bounds[field] = model[field];\n                                this.bounds(bounds);\n                            }\n                        } else {\n                            this.options = deepExtend({}, this.options, modelOptions);\n                        }\n                    }\n                },\n\n                _redrawVisual: function() {\n                    this.visual.clear();\n                    this._contentVisual = null;\n                    this.options.dataItem = this.dataItem;\n                    this.createShapeVisual();\n                    this.updateBounds();\n                },\n\n                redrawVisual: function() {\n                    this._redrawVisual();\n                    if (this.options.content) {\n                        this._template();\n                        this.content(this.options.content);\n                    }\n                },\n\n                updateModel: function(syncChanges) {\n                    var diagram = this.diagram;\n                    if (diagram && diagram._isEditable) {\n                        var bounds = this._bounds;\n                        var model = this.dataItem;\n\n                        if (model) {\n                            diagram._suspendModelRefresh();\n                            if (defined(model.x) && bounds.x !== model.x) {\n                                model.set(\"x\", bounds.x);\n                            }\n\n                            if (defined(model.y) && bounds.y !== model.y) {\n                                model.set(\"y\", bounds.y);\n                            }\n\n                            if (defined(model.width) && bounds.width !== model.width) {\n                                model.set(\"width\", bounds.width);\n                            }\n\n                            if (defined(model.height) && bounds.height !== model.height) {\n                                model.set(\"height\", bounds.height);\n                            }\n\n                            this.dataItem = model;\n                            diagram._resumeModelRefresh();\n\n                            if (syncChanges) {\n                                diagram._syncShapeChanges();\n                            }\n                        }\n                    }\n                },\n\n                updateBounds: function() {\n                    var bounds = this.visual._measure(true);\n                    var options = this.options;\n                    this.bounds(new Rect(options.x, options.y, bounds.width, bounds.height));\n                    this._rotate();\n                    this._alignContent();\n                },\n\n                content: function(content) {\n                    var result = this._content(content);\n\n                    this._alignContent();\n\n                    return result;\n                },\n\n                _alignContent: function() {\n                    var contentOptions = this.options.content || {};\n                    var contentVisual = this._contentVisual;\n                    if (contentVisual && contentOptions.align) {\n                        var containerRect = this.visual._measure();\n                        var aligner = new diagram.RectAlign(containerRect);\n                        var contentBounds = contentVisual.drawingElement.bbox(null);\n\n                        var contentRect = new Rect(0, 0, contentBounds.width(), contentBounds.height());\n                        var alignedBounds = aligner.align(contentRect, contentOptions.align);\n\n                        contentVisual.position(alignedBounds.topLeft());\n                    }\n                },\n\n                _createConnectors: function() {\n                    var options = this.options,\n                        length = options.connectors.length,\n                        connectorDefaults = options.connectorDefaults,\n                        connector, i;\n\n                    for (i = 0; i < length; i++) {\n                        connector = new Connector(\n                            this, deepExtend({},\n                                connectorDefaults,\n                                options.connectors[i]\n                            )\n                        );\n                        this.connectors.push(connector);\n                    }\n                },\n\n                bounds: function(value) {\n                    var bounds;\n\n                    if (value) {\n                        if (isString(value)) {\n                            switch (value) {\n                                case TRANSFORMED :\n                                    bounds = this._transformedBounds();\n                                    break;\n                                case ABSOLUTE :\n                                    bounds = this._transformedBounds();\n                                    var pan = this.diagram._pan;\n                                    bounds.x += pan.x;\n                                    bounds.y += pan.y;\n                                    break;\n                                case ROTATED :\n                                    bounds = this._rotatedBounds();\n                                    break;\n                                default:\n                                    bounds = this._bounds;\n                            }\n                        } else {\n                            this._setBounds(value);\n                            this._triggerBoundsChange();\n                            if (!(this.diagram && this.diagram._layouting)) {\n                                this.refreshConnections();\n                            }\n                        }\n                    } else {\n                        bounds = this._bounds;\n                    }\n\n                    return bounds;\n                },\n\n                _setBounds: function(rect) {\n                    var options = this.options;\n                    var topLeft = rect.topLeft();\n                    var x = options.x = topLeft.x;\n                    var y = options.y = topLeft.y;\n                    var width = options.width = math.max(rect.width, options.minWidth);\n                    var height = options.height = math.max(rect.height, options.minHeight);\n\n                    this._bounds = new Rect(x, y, width, height);\n\n                    this.visual.redraw({\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    });\n                },\n\n                position: function(point) {\n                    if (point) {\n                        this.bounds(new Rect(point.x, point.y, this._bounds.width, this._bounds.height));\n                    } else {\n                        return this._bounds.topLeft();\n                    }\n                },\n                /**\n                 * Returns a clone of this shape.\n                 * @returns {Shape}\n                 */\n                clone: function() {\n                    var json = this.serialize();\n\n                    json.options.id = diagram.randomId();\n\n                    if (this.diagram && this.diagram._isEditable && defined(this.dataItem)) {\n                        json.options.dataItem = cloneDataItem(this.dataItem);\n                    }\n\n                    return new Shape(json.options);\n                },\n\n                select: function(value) {\n                    var diagram = this.diagram, selected, deselected;\n                    if (isUndefined(value)) {\n                        value = true;\n                    }\n\n                    if (this._canSelect()) {\n                        if (this.isSelected != value) {\n                            selected = [];\n                            deselected = [];\n                            this.isSelected = value;\n                            if (this.isSelected) {\n                                diagram._selectedItems.push(this);\n                                selected.push(this);\n                            } else {\n                                Utils.remove(diagram._selectedItems, this);\n                                deselected.push(this);\n                            }\n\n                            if (!diagram._internalSelection) {\n                                diagram._selectionChanged(selected, deselected);\n                            }\n\n                            return true;\n                        }\n                    }\n                },\n\n                rotate: function(angle, center, undoable) { // we assume the center is always the center of the shape.\n                    var rotate = this.visual.rotate();\n                    if (angle !== undefined$1) {\n                        if (undoable !== false && this.diagram && this.diagram.undoRedoService && angle !== rotate.angle) {\n                            this.diagram.undoRedoService.add(\n                                new diagram.RotateUnit(this.diagram._resizingAdorner, [this], [rotate.angle]), false);\n                        }\n\n                        var b = this.bounds(),\n                            sc = new Point(b.width / 2, b.height / 2),\n                            deltaAngle,\n                            newPosition;\n\n                        if (center) {\n                            deltaAngle = angle - rotate.angle;\n                            newPosition = b.center().rotate(center, 360 - deltaAngle).minus(sc);\n                            this._rotationOffset = this._rotationOffset.plus(newPosition.minus(b.topLeft()));\n                            this.position(newPosition);\n                        }\n\n                        this.visual.rotate(angle, sc);\n                        this.options.rotation.angle = angle;\n\n                        if (this.diagram && this.diagram._connectorsAdorner) {\n                            this.diagram._connectorsAdorner.refresh();\n                        }\n\n                        this.refreshConnections();\n\n                        if (this.diagram) {\n                            this.diagram.trigger(ITEMROTATE, { item: this });\n                        }\n                    }\n\n                    return rotate;\n                },\n\n                connections: function(type) { // in, out, undefined = both\n                    var result = [], i, j, con, cons, ctr;\n\n                    for (i = 0; i < this.connectors.length; i++) {\n                        ctr = this.connectors[i];\n                        cons = ctr.connections;\n                        for (j = 0, cons; j < cons.length; j++) {\n                            con = cons[j];\n                            if (type == \"out\") {\n                                var source = con.source();\n                                if (source.shape && source.shape == this) {\n                                    result.push(con);\n                                }\n                            } else if (type == \"in\") {\n                                var target = con.target();\n                                if (target.shape && target.shape == this) {\n                                    result.push(con);\n                                }\n                            } else {\n                                result.push(con);\n                            }\n                        }\n                    }\n\n                    return result;\n                },\n\n                refreshConnections: function() {\n                    $.each(this.connections(), function() {\n                        this.refresh();\n                    });\n                },\n                /**\n                 * Gets a connector of this shape either by the connector's supposed name or\n                 * via a Point in which case the closest connector will be returned.\n                 * @param nameOrPoint The name of a Connector or a Point.\n                 * @returns {Connector}\n                 */\n                getConnector: function(nameOrPoint) {\n                    var i, ctr;\n                    if (isString(nameOrPoint)) {\n                        nameOrPoint = nameOrPoint.toLocaleLowerCase();\n                        for (i = 0; i < this.connectors.length; i++) {\n                            ctr = this.connectors[i];\n                            if (ctr.options.name.toLocaleLowerCase() == nameOrPoint) {\n                                return ctr;\n                            }\n                        }\n                    } else if (nameOrPoint instanceof Point) {\n                        return closestConnector(nameOrPoint, this.connectors);\n                    } else {\n                        return this.connectors.length ? this.connectors[0] : null;\n                    }\n                },\n\n                getPosition: function(side) {\n                    var b = this.bounds(),\n                        fnName = side.charAt(0).toLowerCase() + side.slice(1);\n\n                    if (isFunction(b[fnName])) {\n                        return this._transformPoint(b[fnName]());\n                    }\n\n                    return b.center();\n                },\n\n                redraw: function(options) {\n                    if (options) {\n                        var shapeOptions = this.options;\n                        var boundsChange;\n\n                        this.shapeVisual.redraw(this._visualOptions(options));\n\n                        if (this._diffNumericOptions(options, [WIDTH, HEIGHT, X, Y])) {\n                            this.bounds(new Rect(shapeOptions.x, shapeOptions.y, shapeOptions.width, shapeOptions.height));\n                            boundsChange = true;\n                        }\n\n                        if (options.connectors) {\n                            shapeOptions.connectors = options.connectors;\n                            this._updateConnectors();\n                        }\n\n                        shapeOptions = deepExtend(shapeOptions, options);\n\n                        if (options.rotation || boundsChange) {\n                            this._rotate();\n                        }\n\n                        if (shapeOptions.content) {\n                            this.content(shapeOptions.content);\n                        }\n                    }\n                },\n\n                _updateConnectors: function() {\n                    var connections = this.connections();\n                    this.connectors = [];\n                    this._createConnectors();\n                    var connection;\n                    var source;\n                    var target;\n\n                    for (var idx = 0; idx < connections.length; idx++) {\n                        connection = connections[idx];\n                        source = connection.source();\n                        target = connection.target();\n                        if (source.shape && source.shape === this) {\n                            connection.source(this.getConnector(source.options.name) || null);\n                        } else if (target.shape && target.shape === this) {\n                            connection.target(this.getConnector(target.options.name) || null);\n                        }\n                        connection.updateModel();\n                    }\n                },\n\n                _diffNumericOptions: diagram.diffNumericOptions,\n\n                _visualOptions: function(options) {\n                    return {\n                        data: options.path,\n                        source: options.source,\n                        hover: options.hover,\n                        fill: options.fill,\n                        stroke: options.stroke\n                    };\n                },\n\n                _triggerBoundsChange: function() {\n                    if (this.diagram) {\n                        this.diagram.trigger(ITEMBOUNDSCHANGE, { item: this, bounds: this._bounds.clone() }); // the trigger modifies the arguments internally.\n                    }\n                },\n\n                _transformPoint: function(point) {\n                    var rotate = this.rotate(),\n                        bounds = this.bounds(),\n                        tl = bounds.topLeft();\n\n                    if (rotate.angle) {\n                        point.rotate(rotate.center().plus(tl), 360 - rotate.angle);\n                    }\n\n                    return point;\n                },\n\n                _transformedBounds: function() {\n                    var bounds = this.bounds(),\n                        tl = bounds.topLeft(),\n                        br = bounds.bottomRight();\n\n                    return Rect.fromPoints(this.diagram.modelToView(tl), this.diagram.modelToView(br));\n                },\n\n                _rotatedBounds: function() {\n                    var bounds = this.bounds().rotatedBounds(this.rotate().angle),\n                        tl = bounds.topLeft(),\n                        br = bounds.bottomRight();\n\n                    return Rect.fromPoints(tl, br);\n                },\n\n                _rotate: function() {\n                    var rotation = this.options.rotation;\n\n                    if (rotation && rotation.angle) {\n                        this.rotate(rotation.angle);\n                    }\n\n                    this._rotationOffset = new Point();\n                },\n\n                _hover: function(value) {\n                    var options = this.options,\n                        hover = options.hover,\n                        stroke = options.stroke,\n                        fill = options.fill;\n\n                    if (value && isDefined(hover.stroke)) {\n                        stroke = deepExtend({}, stroke, hover.stroke);\n                    }\n\n                    if (value && isDefined(hover.fill)) {\n                        fill = hover.fill;\n                    }\n\n                    this.shapeVisual.redraw({\n                        stroke: stroke,\n                        fill: fill\n                    });\n\n                    if (options.editable && options.editable.connect) {\n                        this.diagram._showConnectors(this, value);\n                    }\n                },\n\n                _hitTest: function(value) {\n                    if (this.visible()) {\n                        var bounds = this.bounds(), rotatedPoint,\n                            angle = this.rotate().angle;\n\n                        if (value.isEmpty && !value.isEmpty()) { // rect selection\n                            return Intersect.rects(value, bounds, angle ? angle : 0);\n                        } else { // point\n                            rotatedPoint = value.clone().rotate(bounds.center(), angle); // cloning is important because rotate modifies the point inline.\n                            if (bounds.contains(rotatedPoint)) {\n                                return this;\n                            }\n                        }\n                    }\n                },\n\n                toJSON: function() {\n                    return {\n                        shapeId: this.options.id\n                    };\n                },\n\n                createShapeVisual: function() {\n                    var options = this.options;\n                    var visualOptions = this._visualOptions(options);\n                    var visualTemplate = options.visual;\n                    var type = (options.type + \"\").toLocaleLowerCase();\n                    var shapeVisual;\n\n                    visualOptions.width = options.width;\n                    visualOptions.height = options.height;\n\n                    if (isFunction(visualTemplate)) { // custom template\n                        shapeVisual = visualTemplate.call(this, options);\n                    } else if (visualOptions.data) {\n                        shapeVisual = new Path(visualOptions);\n                        translateToOrigin(shapeVisual);\n                    } else if (type == \"rectangle\") {\n                        shapeVisual = new Rectangle(visualOptions);\n                    } else if (type == \"circle\") {\n                        shapeVisual = new Circle(visualOptions);\n                    } else if (type == \"text\") {\n                        shapeVisual = new TextBlock(visualOptions);\n                    } else if (type == \"image\") {\n                        shapeVisual = new Image(visualOptions);\n                    } else {\n                        shapeVisual = new Path(visualOptions);\n                    }\n\n                    this.shapeVisual = shapeVisual;\n                    this.visual.append(this.shapeVisual);\n                }\n            });\n\n            /**\n             * The visual link between two Shapes through the intermediate of Connectors.\n             */\n            var Connection = DiagramElement.extend({\n                init: function(from, to, options) {\n                    var that = this;\n                    DiagramElement.fn.init.call(that, options);\n                    this.updateOptionsFromModel();\n                    this._initRouter();\n                    that.path = new diagram.Polyline(that.options);\n                    that.path.fill(TRANSPARENT);\n                    that.visual.append(that.path);\n                    that._sourcePoint = that._targetPoint = new Point();\n                    that._setSource(from);\n                    that._setTarget(to);\n                    that.content(that.options.content);\n                    that.definers = [];\n                    if (defined(options) && options.points) {\n                        that.points(options.points);\n                    }\n                },\n\n                options: {\n                    hover: {\n                        stroke: {}\n                    },\n                    startCap: NONE,\n                    endCap: NONE,\n                    points: [],\n                    selectable: true,\n                    fromConnector: AUTO,\n                    toConnector: AUTO\n                },\n\n                _setOptionsFromModel: function(model) {\n                    this.updateOptionsFromModel(model || this.dataItem);\n                },\n\n                updateOptionsFromModel: function(model) {\n                    if (this.diagram && this.diagram._isEditable) {\n                        var dataMap = this.diagram._dataMap;\n                        var options = filterConnectionDataItem(model || this.dataItem);\n\n                        if (model) {\n                            if (defined(options.from)) {\n                                var from = dataMap[options.from];\n                                if (from && defined(options.fromConnector)) {\n                                   from = from.getConnector(options.fromConnector);\n                                }\n                                this.source(from);\n                            } else if (defined(options.fromX) && defined(options.fromY)) {\n                                this.source(new Point(options.fromX, options.fromY));\n                            }\n\n                            if (defined(options.to)) {\n                                var to = dataMap[options.to];\n                                if (to && defined(options.toConnector)) {\n                                    to = to.getConnector(options.toConnector);\n                                }\n                                this.target(to);\n                            } else if (defined(options.toX) && defined(options.toY)) {\n                                this.target(new Point(options.toX, options.toY));\n                            }\n\n                            if (defined(options.type) && this.type() !== options.type) {\n                                this.points([]);\n                                this.type(options.type);\n                            }\n\n                            this.dataItem = model;\n\n                            this._template();\n                            this.redraw(this.options);\n                        } else {\n                            this.options = deepExtend({}, options, this.options);\n                        }\n                    }\n                },\n\n                updateModel: function(syncChanges) {\n                    if (this.diagram && this.diagram._isEditable) {\n                        if (this.diagram.connectionsDataSource) {\n                            var model = this.diagram.connectionsDataSource.getByUid(this.dataItem.uid);\n\n                            if (model) {\n                                this.diagram._suspendModelRefresh();\n                                if (defined(this.options.fromX) && this.options.fromX !== null) {\n                                    clearField(\"from\", model);\n                                    clearField(\"fromConnector\", model);\n                                    model.set(\"fromX\", this.options.fromX);\n                                    model.set(\"fromY\", this.options.fromY);\n                                } else {\n                                    model.set(\"from\", this.options.from);\n                                    if (defined(model.fromConnector)) {\n                                        model.set(\"fromConnector\", this.sourceConnector ? this.sourceConnector.options.name : null);\n                                    }\n                                    clearField(\"fromX\", model);\n                                    clearField(\"fromY\", model);\n                                }\n\n                                if (defined(this.options.toX) && this.options.toX !== null) {\n                                    clearField(\"to\", model);\n                                    clearField(\"toConnector\", model);\n                                    model.set(\"toX\", this.options.toX);\n                                    model.set(\"toY\", this.options.toY);\n                                } else {\n                                    model.set(\"to\", this.options.to);\n                                    if (defined(model.toConnector)) {\n                                        model.set(\"toConnector\", this.targetConnector ? this.targetConnector.options.name : null);\n                                    }\n                                    clearField(\"toX\", model);\n                                    clearField(\"toY\", model);\n                                }\n\n                                if (defined(this.options.type) && defined(model.type)) {\n                                    model.set(\"type\", this.options.type);\n                                }\n\n                                this.dataItem = model;\n                                this.diagram._resumeModelRefresh();\n\n                                if (syncChanges) {\n                                    this.diagram._syncConnectionChanges();\n                                }\n                            }\n                        }\n                    }\n                },\n\n                /**\n                 * Gets the Point where the source of the connection resides.\n                 * If the endpoint in Auto-connector the location of the resolved connector will be returned.\n                 * If the endpoint is floating the location of the endpoint is returned.\n                 */\n                sourcePoint: function() {\n                    return this._resolvedSourceConnector ? this._resolvedSourceConnector.position() : this._sourcePoint;\n                },\n\n                _setSource: function(source) {\n                    var shapeSource = source instanceof Shape;\n                    var defaultConnector = this.options.fromConnector || AUTO;\n                    var dataItem;\n                    if (shapeSource && !source.getConnector(defaultConnector)) {\n                        return;\n                    }\n\n                    if (source !== undefined$1) {\n                        this.from = source;\n                    }\n\n                    this._removeFromSourceConnector();\n\n                    if (source === null) { // detach\n                        if (this.sourceConnector) {\n                            this._sourcePoint = (this._resolvedSourceConnector || this.sourceConnector).position();\n                            this._clearSourceConnector();\n                            this._setFromOptions(null, this._sourcePoint);\n                        }\n                    } else if (source instanceof Connector) {\n                        dataItem = source.shape.dataItem;\n                        if (dataItem) {\n                            this._setFromOptions(dataItem.id);\n                        }\n                        this.sourceConnector = source;\n                        this.sourceConnector.connections.push(this);\n                    } else if (source instanceof Point) {\n                        this._setFromOptions(null, source);\n                        this._sourcePoint = source;\n                        if (this.sourceConnector) {\n                            this._clearSourceConnector();\n                        }\n\n                    } else if (shapeSource) {\n                        dataItem = source.dataItem;\n                        if (dataItem) {\n                            this._setFromOptions(dataItem.id);\n                        }\n\n                        this.sourceConnector = source.getConnector(defaultConnector);\n                        this.sourceConnector.connections.push(this);\n                    }\n                },\n\n                source: function(source, undoable) {\n                    if (isDefined(source)) {\n                        if (undoable && this.diagram) {\n                            this.diagram.undoRedoService.addCompositeItem(new diagram.ConnectionEditUnit(this, source));\n                        }\n                        this._setSource(source);\n                        this.refresh();\n                    }\n                    return this.sourceConnector ? this.sourceConnector : this._sourcePoint;\n                },\n\n                _setFromOptions: function(from, fromPoint) {\n                    this.options.from = from;\n                    if (fromPoint) {\n                        this.options.fromX = fromPoint.x;\n                        this.options.fromY = fromPoint.y;\n                    } else {\n                        this.options.fromX = null;\n                        this.options.fromY = null;\n                    }\n                },\n\n                /**\n                 * Gets or sets the PathDefiner of the sourcePoint.\n                 * The left part of this definer is always null since it defines the source tangent.\n                 * @param value\n                 * @returns {*}\n                 */\n                sourceDefiner: function(value) {\n                    if (value) {\n                        if (value instanceof diagram.PathDefiner) {\n                            value.left = null;\n                            this._sourceDefiner = value;\n                            this.source(value.point); // refresh implicit here\n                        } else {\n                            throw \"The sourceDefiner needs to be a PathDefiner.\";\n                        }\n                    } else {\n                        if (!this._sourceDefiner) {\n                            this._sourceDefiner = new diagram.PathDefiner(this.sourcePoint(), null, null);\n                        }\n                        return this._sourceDefiner;\n                    }\n                },\n\n                /**\n                 * Gets  the Point where the target of the connection resides.\n                 */\n                targetPoint: function() {\n                    return this._resolvedTargetConnector ? this._resolvedTargetConnector.position() : this._targetPoint;\n                },\n\n                _setTarget: function(target) {\n                    var shapeTarget = target instanceof Shape;\n                    var defaultConnector = this.options.toConnector || AUTO;\n                    var dataItem;\n\n                    if (shapeTarget && !target.getConnector(defaultConnector)) {\n                        return;\n                    }\n\n                    if (target !== undefined$1) {\n                        this.to = target;\n                    }\n\n                    this._removeFromTargetConnector();\n\n                    if (target === null) { // detach\n                        if (this.targetConnector) {\n                            this._targetPoint = (this._resolvedTargetConnector || this.targetConnector).position();\n                            this._clearTargetConnector();\n                            this._setToOptions(null, this._targetPoint);\n                        }\n                    } else if (target instanceof Connector) {\n                        dataItem = target.shape.dataItem;\n                        if (dataItem) {\n                            this._setToOptions(dataItem.id);\n                        }\n                        this.targetConnector = target;\n                        this.targetConnector.connections.push(this);\n                    } else if (target instanceof Point) {\n                        this._setToOptions(null, target);\n                        this._targetPoint = target;\n                        if (this.targetConnector) {\n                            this._clearTargetConnector();\n                        }\n                    } else if (shapeTarget) {\n                        dataItem = target.dataItem;\n                        if (dataItem) {\n                            this._setToOptions(dataItem.id);\n                        }\n                        this.targetConnector = target.getConnector(defaultConnector);\n                        this.targetConnector.connections.push(this);\n                    }\n                },\n\n                target: function(target, undoable) {\n                    if (isDefined(target)) {\n                        if (undoable && this.diagram) {\n                            this.diagram.undoRedoService.addCompositeItem(new diagram.ConnectionEditUnit(this, undefined$1, target));\n                        }\n                        this._setTarget(target);\n\n                        this.refresh();\n                    }\n                    return this.targetConnector ? this.targetConnector : this._targetPoint;\n                },\n\n                _setToOptions: function(to, toPoint) {\n                    this.options.to = to;\n                    if (toPoint) {\n                        this.options.toX = toPoint.x;\n                        this.options.toY = toPoint.y;\n                    } else {\n                        this.options.toX = null;\n                        this.options.toY = null;\n                    }\n                },\n\n                /**\n                 * Gets or sets the PathDefiner of the targetPoint.\n                 * The right part of this definer is always null since it defines the target tangent.\n                 * @param value\n                 * @returns {*}\n                 */\n                targetDefiner: function(value) {\n                    if (value) {\n                        if (value instanceof diagram.PathDefiner) {\n                            value.right = null;\n                            this._targetDefiner = value;\n                            this.target(value.point); // refresh implicit here\n                        } else {\n                            throw \"The sourceDefiner needs to be a PathDefiner.\";\n                        }\n                    } else {\n                        if (!this._targetDefiner) {\n                            this._targetDefiner = new diagram.PathDefiner(this.targetPoint(), null, null);\n                        }\n                        return this._targetDefiner;\n                    }\n                },\n\n                _updateConnectors: function() {\n                    this._updateConnector(this.source(), \"source\");\n                    this._updateConnector(this.target(), \"target\");\n                },\n\n                _updateConnector: function(instance, name) {\n                    var that = this;\n                    var diagram = that.diagram;\n                    if (instance instanceof Connector && !diagram.getShapeById(instance.shape.id)) {\n                        var dataItem = instance.shape.dataItem;\n                        var connectorName = instance.options.name;\n                        var setNewTarget = function() {\n                            var shape = diagram._dataMap[dataItem.id];\n                            instance = shape.getConnector(connectorName);\n                            that[name](instance, false);\n                            that.updateModel();\n                        };\n                        if (diagram._dataMap[dataItem.id]) {\n                           setNewTarget();\n                        } else {\n                            var inactiveItem = diagram._inactiveShapeItems.getByUid(dataItem.uid);\n                            if (inactiveItem) {\n                                diagram._deferredConnectionUpdates.push(inactiveItem.onActivate(setNewTarget));\n                            }\n                        }\n                    } else {\n                        that[name](instance, false);\n                    }\n                },\n\n                content: function(content) {\n                    var result = this._content(content);\n                    if (defined(content)) {\n                        this._alignContent();\n                    }\n                    return result;\n                },\n\n                _createContentVisual: function(options) {\n                    var visual;\n                    if (isFunction(options.visual)) {\n                        visual = options.visual.call(this, options);\n                    } else if (options.text) {\n                        visual = new TextBlock(options);\n                    }\n\n                    if (visual) {\n                        this._contentVisual = visual;\n                        visual._includeInBBox = false;\n                        this.visual.append(visual);\n                    }\n\n                    return visual;\n                },\n\n                _updateContentVisual: function(options) {\n                    if (isFunction(options.visual)) {\n                        this.visual.remove(this._contentVisual);\n                        this._createContentVisual(options);\n                    } else {\n                        this._contentVisual.redraw(options);\n                    }\n                },\n\n                _alignContent: function() {\n                    if (this._contentVisual) {\n                        var offset = CONNECTION_CONTENT_OFFSET;\n                        var points = this.allPoints();\n                        var endIdx = math.floor(points.length / 2);\n                        var startIdx = endIdx - 1;\n\n                        while (startIdx > 0 && points[startIdx].equals(points[endIdx])) {\n                            startIdx--;\n                            endIdx++;\n                        }\n\n                        var endPoint = points[endIdx];\n                        var startPoint = points[startIdx];\n\n                        var boundingBox = this._contentVisual._measure();\n                        var width = boundingBox.width;\n                        var height = boundingBox.height;\n                        var alignToPath = points.length % 2 === 0;\n                        var distance = startPoint.distanceTo(endPoint);\n\n                        if (alignToPath && points.length > 2 && distance > 0 &&\n                            ((startPoint.y === endPoint.y && distance < width) || (startPoint.x === endPoint.x && distance < height))) {\n                            alignToPath = false;\n                            offset = 0;\n                        }\n\n                        var point;\n\n                        if (alignToPath) {\n                            var angle = draw.util.deg(math.atan2(endPoint.y - startPoint.y, endPoint.x - startPoint.x));\n                            point = new Point((endPoint.x - startPoint.x) / 2 + startPoint.x, (endPoint.y - startPoint.y) / 2 + startPoint.y);\n\n                            if (math.abs(angle) === 90) {\n                                point.x += offset;\n                                point.y -= height / 2;\n                            } else if (angle % 180 === 0) {\n                                point.x -= width / 2;\n                                point.y -= height + offset;\n                            } else if (angle < -90 || (0 < angle && angle < 90)) {\n                                point.y -= height;\n                            } else if (angle < 0 || angle > 90) {\n                                point.x -= width;\n                                point.y -= height;\n                            }\n                        } else {\n                            var midIdx = math.floor(points.length / 2);\n                            point = points[midIdx].clone();\n                            startPoint = points[midIdx - 1];\n                            endPoint = points[midIdx + 1];\n\n                            var offsetX = startPoint.x <= point.x && endPoint.x <= point.x ? offset : -boundingBox.width - offset;\n                            var offsetY = startPoint.y <= point.y && endPoint.y <= point.y ? offset : -boundingBox.height - offset;\n\n                            point.x += offsetX;\n                            point.y += offsetY;\n                        }\n\n                        this._contentVisual.position(point);\n                    }\n                },\n\n                /**\n                 * Selects or unselects this connections.\n                 * @param value True to select, false to unselect.\n                 */\n                select: function(value) {\n                    var diagram = this.diagram, selected, deselected;\n                    if (this._canSelect()) {\n                        if (this.isSelected !== value) {\n                            this.isSelected = value;\n                            selected = [];\n                            deselected = [];\n                            if (this.isSelected) {\n                                this.adorner = new ConnectionEditAdorner(this, this.options.selection);\n                                diagram._adorn(this.adorner, true);\n                                diagram._selectedItems.push(this);\n                                selected.push(this);\n                            } else {\n                                if (this.adorner) {\n                                    diagram._adorn(this.adorner, false);\n                                    Utils.remove(diagram._selectedItems, this);\n                                    this.adorner = undefined$1;\n                                    deselected.push(this);\n                                }\n                            }\n\n                            if (this.adorner) {\n                                this.adorner.refresh();\n                            }\n\n                            if (!diagram._internalSelection) {\n                                diagram._selectionChanged(selected, deselected);\n                            }\n                            return true;\n                        }\n                    }\n                },\n                /**\n                 * Gets or sets the bounds of this connection.\n                 * @param value A Rect object.\n                 * @remark This is automatically set in the refresh().\n                 * @returns {Rect}\n                 */\n                bounds: function(value) {\n                    if (value && !isString(value)) {\n                        this._bounds = value;\n                    } else {\n                        return this._bounds;\n                    }\n                },\n                /**\n                 * Gets or sets the connection type (see ConnectionType enumeration).\n                 * @param value A ConnectionType value.\n                 * @returns {ConnectionType}\n                 */\n                type: function(value) {\n                    var options = this.options;\n                    if (value) {\n                        if (value !== options.type) {\n                            options.type = value;\n                            this._initRouter();\n                            this.refresh();\n                        }\n                    } else {\n                        return options.type;\n                    }\n                },\n\n                _initRouter: function() {\n                    var type = (this.options.type || \"\").toLowerCase();\n                    if (type == CASCADING) {\n                        this._router = new CascadingRouter(this);\n                    } else {\n                        this._router = new PolylineRouter(this);\n                    }\n                },\n                /**\n                 * Gets or sets the collection of *intermediate* points.\n                 * The 'allPoints()' property will return all the points.\n                 * The 'definers' property returns the definers of the intermediate points.\n                 * The 'sourceDefiner' and 'targetDefiner' return the definers of the endpoints.\n                 * @param value\n                 */\n                points: function(value) {\n                    if (value) {\n                        this.definers = [];\n                        for (var i = 0; i < value.length; i++) {\n                            var definition = value[i];\n                            if (definition instanceof diagram.Point) {\n                                this.definers.push(new diagram.PathDefiner(definition));\n                            } else if (definition.hasOwnProperty(\"x\") && definition.hasOwnProperty(\"y\")) { // e.g. Clipboard does not preserve the Point definition and tunred into an Object\n                                this.definers.push(new diagram.PathDefiner(new Point(definition.x, definition.y)));\n                            } else {\n                                throw \"A Connection point needs to be a Point or an object with x and y properties.\";\n                            }\n                        }\n\n                    } else {\n                        var pts = [];\n                        if (isDefined(this.definers)) {\n                            for (var k = 0; k < this.definers.length; k++) {\n                                pts.push(this.definers[k].point);\n                            }\n                        }\n                        return pts;\n                    }\n                },\n                /**\n                 * Gets all the points of this connection. This is the combination of the sourcePoint, the points and the targetPoint.\n                 * @returns {Array}\n                 */\n                allPoints: function() {\n                    var pts = [this.sourcePoint()];\n                    if (this.definers) {\n                        for (var k = 0; k < this.definers.length; k++) {\n                            pts.push(this.definers[k].point);\n                        }\n                    }\n                    pts.push(this.targetPoint());\n                    return pts;\n                },\n\n                refresh: function() {\n                    this._resolveConnectors();\n                    this._refreshPath();\n                    this._alignContent();\n\n                    if (this.adorner) {\n                        this.adorner.refresh();\n                    }\n                },\n\n                _resolveConnectors: function() {\n                    var connection = this,\n                        sourcePoint, targetPoint,\n                        sourceConnectors, targetConnectors,\n                        source = connection.source(),\n                        target = connection.target();\n\n                    if (source instanceof Point) {\n                        sourcePoint = source;\n                    } else if (source instanceof Connector) {\n                        if (isAutoConnector(source)) {\n                            sourceConnectors = source.shape.connectors;\n                        } else {\n                            sourceConnectors = [source];\n                        }\n                    }\n\n                    if (target instanceof Point) {\n                        targetPoint = target;\n                    } else if (target instanceof Connector) {\n                        if (isAutoConnector(target)) {\n                            targetConnectors = target.shape.connectors;\n                        } else {\n                            targetConnectors = [target];\n                        }\n                    }\n\n                    if (sourcePoint) {\n                        if (targetConnectors) {\n                            connection._resolvedTargetConnector = closestConnector(sourcePoint, targetConnectors);\n                        }\n                    } else if (sourceConnectors) {\n                        if (targetPoint) {\n                            connection._resolvedSourceConnector = closestConnector(targetPoint, sourceConnectors);\n                        } else if (targetConnectors) {\n                            this._resolveAutoConnectors(sourceConnectors, targetConnectors);\n                        }\n                    }\n                },\n\n                _resolveAutoConnectors: function(sourceConnectors, targetConnectors) {\n                    var minNonConflict = MAXINT;\n                    var minDist = MAXINT;\n                    var minNonConflictSource, minNonConflictTarget;\n                    var sourcePoint, targetPoint;\n                    var minSource, minTarget;\n                    var sourceConnector, targetConnector;\n                    var sourceIdx, targetIdx;\n                    var dist;\n\n                    for (sourceIdx = 0; sourceIdx < sourceConnectors.length; sourceIdx++) {\n                        sourceConnector = sourceConnectors[sourceIdx];\n                        if (!isAutoConnector(sourceConnector)) {\n                            sourcePoint = sourceConnector.position();\n\n                            for (targetIdx = 0; targetIdx < targetConnectors.length; targetIdx++) {\n                                targetConnector = targetConnectors[targetIdx];\n                                if (!isAutoConnector(targetConnector)) {\n                                    targetPoint = targetConnector.position();\n                                    dist = math.round(sourcePoint.distanceTo(targetPoint));\n\n                                    if (dist < minNonConflict && this.diagram && this._testRoutePoints(sourcePoint, targetPoint, sourceConnector, targetConnector)) {\n                                        minNonConflict = dist;\n                                        minNonConflictSource = sourceConnector;\n                                        minNonConflictTarget = targetConnector;\n                                    }\n\n                                    if (dist < minDist) {\n                                        minSource = sourceConnector;\n                                        minTarget = targetConnector;\n                                        minDist = dist;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    if (minNonConflictSource) {\n                        minSource = minNonConflictSource;\n                        minTarget = minNonConflictTarget;\n                    }\n\n                    this._resolvedSourceConnector = minSource;\n                    this._resolvedTargetConnector = minTarget;\n                },\n\n                _testRoutePoints: function(sourcePoint, targetPoint, sourceConnector, targetConnector) {\n                    var router = this._router;\n                    var passRoute = true;\n                    if (router instanceof CascadingRouter) {\n                        var points = router.routePoints(sourcePoint, targetPoint, sourceConnector, targetConnector),\n                            start, end,\n                             rect, exclude;\n\n                        exclude = this._getRouteExclude(sourcePoint, targetPoint, sourceConnector.shape, targetConnector.shape);\n                        points.unshift(sourcePoint);\n                        points.push(targetPoint);\n\n\n                        for (var idx = 1; idx < points.length; idx++) {\n                            start = points[idx - 1];\n                            end = points[idx];\n                            rect = new Rect(math.min(start.x, end.x), math.min(start.y, end.y),\n                                            math.abs(start.x - end.x), math.abs(start.y - end.y));\n                            if (rect.width > 0) {\n                                rect.x++;\n                                rect.width -= 2;\n                            }\n                            if (rect.height > 0) {\n                                rect.y++;\n                                rect.height -= 2;\n                            }\n\n                            if (!rect.isEmpty() && this.diagram._shapesQuadTree.hitTestRect(rect, exclude)) {\n                                passRoute = false;\n                                break;\n                            }\n                        }\n                    }\n                    return passRoute;\n                },\n\n                _getRouteExclude: function(sourcePoint, targetPoint, sourceShape, targetShape) {\n                    var exclude = [];\n                    if (this._isPointInsideShape(sourcePoint, sourceShape)) {\n                        exclude.push(sourceShape);\n                    }\n                    if (this._isPointInsideShape(targetPoint, targetShape)) {\n                        exclude.push(targetShape);\n                    }\n                    return exclude;\n                },\n\n                _isPointInsideShape: function(point, shape) {\n                    var bounds = shape.bounds(), rotatedPoint,\n                        angle = shape.rotate().angle,\n                        pointX, pointY,\n                        boundsX = bounds.x,\n                        boundsY = bounds.y;\n\n                    rotatedPoint = point.clone().rotate(bounds.center(), angle);\n                    pointX = rotatedPoint.x;\n                    pointY = rotatedPoint.y;\n                    return pointX > boundsX && pointX < (boundsX + bounds.width) && pointY > boundsY && pointY < (boundsY + bounds.height);\n                },\n\n                redraw: function(options) {\n                    if (options) {\n                        this.options = deepExtend({}, this.options, options);\n\n                        var points = this.options.points;\n\n                        if (defined(points) && points.length > 0) {\n                            this.points(points);\n                            this._refreshPath();\n                        }\n\n                        if ((options && options.content) || options.text) {\n                            this.content(options.content);\n                        }\n\n                        this.path.redraw({\n                            fill: options.fill,\n                            stroke: options.stroke,\n                            startCap: options.startCap,\n                            endCap: options.endCap\n                        });\n                    }\n                },\n                /**\n                 * Returns a clone of this connection.\n                 * @returns {Connection}\n                 */\n                clone: function() {\n                    var json = this.serialize();\n\n                    if (this.diagram && this.diagram._isEditable && defined(this.dataItem)) {\n                        json.options.dataItem = cloneDataItem(this.dataItem);\n                    }\n\n                    return new Connection(this.from, this.to, json.options);\n                },\n                /**\n                 * Returns a serialized connection in json format. Consist of the options and the dataItem.\n                 * @returns {Connection}\n                 */\n                serialize: function() {\n                    var from = this.from.toJSON ? this.from.toJSON : this.from.toString(),\n                        to = this.to.toJSON ? this.to.toJSON : this.to.toString();\n\n                    var json = deepExtend({}, {\n                        options: this.options,\n                        from: from,\n                        to: to\n                    });\n\n                    if (defined(this.dataItem)) {\n                        json.dataItem = this.dataItem.toString();\n                    }\n\n                    json.options.points = this.points();\n                    return json;\n                },\n\n                /**\n                 * Returns whether the given Point or Rect hits this connection.\n                 * @param value\n                 * @returns {Connection}\n                 * @private\n                 */\n                _hitTest: function(value) {\n                    if (this.visible()) {\n                        var p = new Point(value.x, value.y), from = this.sourcePoint(), to = this.targetPoint();\n                        if (value.isEmpty && !value.isEmpty() && value.contains(from) && value.contains(to)) {\n                            return this;\n                        }\n                        if (this._router.hitTest(p)) {\n                            return this;\n                        }\n                    }\n                },\n\n                _hover: function(value) {\n                    var color = (this.options.stroke || {}).color;\n\n                    if (value && isDefined(this.options.hover.stroke.color)) {\n                        color = this.options.hover.stroke.color;\n                    }\n\n                    this.path.redraw({\n                        stroke: {\n                            color: color\n                        }\n                    });\n                },\n\n                _refreshPath: function() {\n                    if (!defined(this.path)) {\n                        return;\n                    }\n                    this._drawPath();\n                    this.bounds(this._router.getBounds());\n                },\n\n                _drawPath: function() {\n                    if (this._router) {\n                        this._router.route(); // sets the intermediate points\n                    }\n                    var source = this.sourcePoint();\n                    var target = this.targetPoint();\n                    var points = this.points();\n\n                    this.path.redraw({\n                        points: [source].concat(points, [target])\n                    });\n                },\n\n                _clearSourceConnector: function() {\n                    this.sourceConnector = undefined$1;\n                    this._resolvedSourceConnector = undefined$1;\n                },\n\n                _clearTargetConnector: function() {\n                    this.targetConnector = undefined$1;\n                    this._resolvedTargetConnector = undefined$1;\n                },\n\n                _removeFromSourceConnector: function() {\n                    if (this.sourceConnector) {\n                        Utils.remove(this.sourceConnector.connections, this);\n                    }\n                },\n\n                _removeFromTargetConnector: function() {\n                    if (this.targetConnector) {\n                        Utils.remove(this.targetConnector.connections, this);\n                    }\n                },\n\n                toJSON: function() {\n                    var connection = this;\n                    var from, to, point;\n                    if (connection.from && connection.from.toJSON) {\n                        from = connection.from.toJSON();\n                    } else {\n                        point = connection._sourcePoint;\n                        from = {\n                            x: point.x,\n                            y: point.y\n                        };\n                    }\n\n                    if (connection.to && connection.to.toJSON) {\n                        to = connection.to.toJSON();\n                    } else {\n                        point = connection._targetPoint;\n                        to = {\n                            x: point.x,\n                            y: point.y\n                        };\n                    }\n\n                    return {\n                        from: from,\n                        to: to\n                    };\n                }\n            });\n\n            var Diagram = Widget.extend({\n                init: function(element, userOptions) {\n                    var that = this;\n\n                    kendo.destroy(element);\n                    Widget.fn.init.call(that, element, userOptions);\n\n                    that._initTheme();\n\n                    that._initElements();\n                    that._extendLayoutOptions(that.options);\n                    that._initDefaults(userOptions);\n                    that._interactionDefaults();\n\n                    that._initCanvas();\n\n                    that.mainLayer = new Group({\n                        id: \"main-layer\"\n                    });\n                    that.canvas.append(that.mainLayer);\n\n                    that._shapesQuadTree = new ShapesQuadTree(that);\n\n                    that._pan = new Point();\n                    that._adorners = [];\n                    that.adornerLayer = new Group({\n                        id: \"adorner-layer\"\n                    });\n                    that.canvas.append(that.adornerLayer);\n\n                    that._createHandlers();\n\n                    that._initialize();\n\n                    that._resizingAdorner = new ResizingAdorner(that, { editable: that.options.editable });\n                    that._connectorsAdorner = new ConnectorsAdorner(that);\n\n                    that._adorn(that._resizingAdorner, true);\n                    that._adorn(that._connectorsAdorner, true);\n\n                    that.selector = new Selector(that);\n                    // TODO: We may consider using real Clipboard API once is supported by the standard.\n                    that._clipboard = [];\n\n                    that.pauseMouseHandlers = false;\n\n                    that._fetchFreshData();\n\n                    that._createGlobalToolBar();\n\n                    that._createOptionElements();\n\n                    that.zoom(that.options.zoom);\n\n                    that.canvas.draw();\n                },\n\n                options: {\n                    name: \"Diagram\",\n                    theme: \"default\",\n                    layout: \"\",\n                    zoomRate: 0.1,\n                    zoom: 1,\n                    zoomMin: 0,\n                    zoomMax: 2,\n                    dataSource: {},\n                    draggable: true,\n                    template: \"\",\n                    autoBind: true,\n                    editable: {\n                        rotate: {},\n                        resize: {},\n                        text: true,\n                        tools: [],\n                        drag: {\n                            snap: {\n                                size: 10,\n                                angle: 10\n                            }\n                        },\n                        remove: true\n                    },\n                    pannable: {},\n                    selectable: {\n                        key: \"none\"\n                    },\n                    tooltip: { enabled: true, format: \"{0}\" },\n                    copy: {\n                        enabled: true,\n                        offsetX: 20,\n                        offsetY: 20\n                    },\n                    shapeDefaults: diagram.shapeDefaults({ undoable: true }),\n                    connectionDefaults: {\n                        editable: {\n                            tools: []\n                        },\n                        type: CASCADING\n                    },\n                    shapes: [],\n                    connections: []\n                },\n\n                events: [\n                    ZOOM_END,\n                    ZOOM_START,\n                    PAN, SELECT,\n                    ITEMROTATE,\n                    ITEMBOUNDSCHANGE,\n                    CHANGE,\n                    CLICK,\n                    MOUSE_ENTER,\n                    MOUSE_LEAVE,\n                    \"toolBarClick\",\n                    \"save\",\n                    \"cancel\",\n                    \"edit\",\n                    \"remove\",\n                    \"add\",\n                    \"dataBound\",\n                    DRAG_START,\n                    DRAG,\n                    DRAG_END\n                ],\n\n                items: function() {\n                    return $();\n                },\n\n                _createGlobalToolBar: function() {\n                    var editable = this.options.editable;\n                    if (editable) {\n                        var tools = editable.tools;\n                        if (this._isEditable && tools !== false && (!tools || tools.length === 0)) {\n                            tools = [\"createShape\", \"undo\", \"redo\", \"rotateClockwise\", \"rotateAnticlockwise\"];\n                        }\n\n                        if (tools && tools.length) {\n                            this.toolBar = new DiagramToolBar(this, {\n                                tools: tools || {},\n                                click: this._toolBarClick.bind(this),\n                                modal: false\n                            });\n\n                            this.toolBar.element.css({\n                                textAlign: \"left\"\n                            });\n\n                            this.element.prepend(this.toolBar.element);\n                            this._resize();\n                        }\n                    }\n                },\n\n                createShape: function() {\n                    if ((this.editor && this.editor.end()) || !this.editor) {\n                        var dataSource = this.dataSource;\n                        var view = dataSource.view() || [];\n                        var index = view.length;\n                        var model = createModel(dataSource, {});\n                        var shape = this._createShape(model, {});\n\n                        if (!this.trigger(\"add\", { shape: shape })) {\n                            dataSource.insert(index, model);\n                            var inactiveItem = this._inactiveShapeItems.getByUid(model.uid);\n                            inactiveItem.element = shape;\n                            this.edit(shape);\n                        }\n                    }\n                },\n\n                _createShape: function(dataItem, options) {\n                    options = deepExtend({}, this.options.shapeDefaults, options);\n                    options.dataItem = dataItem;\n                    var shape = new Shape(options, this);\n                    return shape;\n                },\n\n                createConnection: function() {\n                    if (((this.editor && this.editor.end()) || !this.editor)) {\n                        var connectionsDataSource = this.connectionsDataSource;\n                        var view = connectionsDataSource.view() || [];\n                        var index = view.length;\n                        var model = createModel(connectionsDataSource, {});\n                        var connection = this._createConnection(model);\n                        if (!this.trigger(\"add\", { connection: connection })) {\n                            this._connectionsDataMap[model.uid] = connection;\n                            connectionsDataSource.insert(index, model);\n                            this.addConnection(connection, false);\n                            this.edit(connection);\n                        }\n                    }\n                },\n\n                _createConnection: function(dataItem, source, target) {\n                    var options = deepExtend({}, this.options.connectionDefaults);\n                    options.dataItem = dataItem;\n\n                    var connection = new Connection(source || new Point(), target || new Point(), options);\n\n                    return connection;\n                },\n\n                editModel: function(dataItem, editorType) {\n                    this.cancelEdit();\n                    var editors, template;\n                    var editable = this.options.editable;\n\n                    if (editorType == \"shape\") {\n                        editors = editable.shapeEditors;\n                        template = editable.shapeTemplate;\n                    } else if (editorType == \"connection\") {\n                        var connectionSelectorHandler = connectionSelector.bind(this);\n                        editors = deepExtend({}, { from: connectionSelectorHandler, to: connectionSelectorHandler }, editable.connectionEditors);\n                        template = editable.connectionTemplate;\n                    } else {\n                        return;\n                    }\n\n                    this.editor = new PopupEditor(this.element, {\n                        update: this._update.bind(this),\n                        cancel: this._cancel.bind(this),\n                        model: dataItem,\n                        type: editorType,\n                        target: this,\n                        editors: editors,\n                        template: template\n                    });\n\n                    this.trigger(\"edit\", this._editArgs());\n                },\n\n                edit: function(item) {\n                    if (item.dataItem) {\n                        var editorType = item instanceof Shape ? \"shape\" : \"connection\";\n                        this.editModel(item.dataItem, editorType);\n                    }\n                },\n\n                cancelEdit: function() {\n                    if (this.editor) {\n                        this._getEditDataSource().cancelChanges(this.editor.model);\n\n                        this._destroyEditor();\n                    }\n                },\n\n                saveEdit: function() {\n                    if (this.editor && this.editor.end() &&\n                        !this.trigger(\"save\", this._editArgs())) {\n                        this._getEditDataSource().sync();\n                    }\n                },\n\n                _update: function() {\n                    if (this.editor && this.editor.end() &&\n                        !this.trigger(\"save\", this._editArgs())) {\n                        this._getEditDataSource().sync();\n                        this._destroyEditor();\n                    }\n                },\n\n                _cancel: function() {\n                    if (this.editor && !this.trigger(\"cancel\", this._editArgs())) {\n                        var model = this.editor.model;\n                        this._getEditDataSource().cancelChanges(model);\n                        var element = this._connectionsDataMap[model.uid] || this._dataMap[model.id];\n                        if (element) {\n                            element._setOptionsFromModel(model);\n                        }\n                        this._destroyEditor();\n                    }\n                },\n\n                _getEditDataSource: function() {\n                    return this.editor.options.type === \"shape\" ? this.dataSource : this.connectionsDataSource;\n                },\n\n                _editArgs: function() {\n                    var result = { container: this.editor.wrapper };\n                    result[this.editor.options.type] = this.editor.model;\n                    return result;\n                },\n\n                _destroyEditor: function() {\n                    if (this.editor) {\n                        this.editor.close();\n                        this.editor = null;\n                    }\n                },\n\n                _initElements: function() {\n                    this.wrapper = this.element.empty()\n                        .css(\"position\", \"relative\")\n                        .attr(\"tabindex\", 0)\n                        .addClass(\"k-widget k-diagram\");\n\n                    this.scrollable = $(\"<div />\").appendTo(this.element);\n                },\n\n                _initDefaults: function(userOptions) {\n                    var options = this.options;\n                    var editable = options.editable;\n                    var shapeDefaults = options.shapeDefaults;\n                    var connectionDefaults = options.connectionDefaults;\n                    var userShapeDefaults = (userOptions || {}).shapeDefaults;\n                    if (editable === false) {\n                        shapeDefaults.editable = false;\n                        connectionDefaults.editable = false;\n                    } else {\n                        copyDefaultOptions(editable, shapeDefaults.editable, [\"drag\", \"remove\", \"connect\"]);\n                        copyDefaultOptions(editable, connectionDefaults.editable, [\"drag\", \"remove\"]);\n                    }\n\n                    if (userShapeDefaults && userShapeDefaults.connectors) {\n                        options.shapeDefaults.connectors = userShapeDefaults.connectors;\n                    }\n                },\n\n                _interactionDefaults: function() {\n                    var options = this.options;\n                    var selectable = options.selectable;\n                    var pannable = options.pannable;\n                    var mobile = kendo.support.mobileOS;\n\n                    if (selectable && !defined(selectable.multiple)) {\n                        options.selectable = deepExtend({\n                            multiple: mobile ? false : true\n                        }, options.selectable);\n                    }\n\n                    if (pannable && !defined(pannable.key)) {\n                        options.pannable = deepExtend({\n                            key: mobile ? \"none\" : \"ctrl\"\n                        }, options.pannable);\n                    }\n                },\n\n                _initCanvas: function() {\n                    var canvasContainer = $(\"<div class='k-layer'></div>\").appendTo(this.scrollable)[0];\n                    var viewPort = this.viewport();\n                    this.canvas = new Canvas(canvasContainer, {\n                        width: viewPort.width || DEFAULT_CANVAS_WIDTH,\n                        height: viewPort.height || DEFAULT_CANVAS_HEIGHT\n                    });\n                },\n\n                _createHandlers: function() {\n                    var that = this;\n                    var element = that.element;\n\n                    element.on(MOUSEWHEEL_NS, that._wheel.bind(that))\n                    .on(\"keydown\" + NS, that._keydown.bind(that));\n\n                    that._userEvents = new kendo.UserEvents(this.scrollable, {\n                        multiTouch: true,\n                        fastTap: true,\n                        tap: that._tap.bind(that),\n                        start: that._dragStart.bind(that),\n                        move: that._drag.bind(that),\n                        end: that._dragEnd.bind(that),\n                        gesturestart: that._gestureStart.bind(that),\n                        gesturechange: that._gestureChange.bind(that),\n                        gestureend: that._gestureEnd.bind(that),\n                        doubleTap: that._doubleTap.bind(that),\n                        supportDoubleTap: true\n                    });\n\n                    that.toolService = new ToolService(that);\n\n                    this.scrollable\n                        .on(\"mouseover\" + NS, that._mouseover.bind(that))\n                        .on(\"mouseout\" + NS, that._mouseout.bind(that))\n                        .on(\"mousemove\" + NS, that._mouseMove.bind(that))\n                        .on(\"mousedown\" + NS, that._mouseDown.bind(that))\n                        .on(\"mouseup\" + NS, that._mouseUp.bind(that));\n\n                    this._syncHandler = that._syncChanges.bind(that);\n\n                    that._resizeHandler = that.resize.bind(that, false);\n                    kendo.onResize(that._resizeHandler);\n\n                    this.bind(ZOOM_START, that._destroyToolBar.bind(that));\n                    this.bind(PAN, that._destroyToolBar.bind(that));\n                },\n\n                _dragStart: function(e) {\n                    this._pauseMouseHandlers = true;\n                    var point = this._eventPositions(e, true);\n\n                    var event = e.event;\n                    if (this.toolService.start(point, this._meta(event))) {\n                        this._destroyToolBar();\n                        event.preventDefault();\n                    }\n                },\n\n                _drag: function(e) {\n                    var p = this._eventPositions(e);\n                    var event = e.event;\n                    if (this.toolService.move(p, this._meta(event))) {\n                        event.preventDefault();\n                    }\n                },\n\n                _dragEnd: function(e) {\n                    this._pauseMouseHandlers = false;\n                    var p = this._eventPositions(e);\n                    var event = e.event;\n                    if (this.toolService.end(p, this._meta(event))) {\n                        this._createToolBar();\n                        event.preventDefault();\n                    }\n                },\n\n                _mouseMove: function(e) {\n                    if (!this._pauseMouseHandlers) {\n                        var p = this._eventPositions(e);\n                        this.toolService._updateHoveredItem(p);\n                        this.toolService._updateCursor(p);\n                    }\n                },\n\n                _mouseDown: function() {\n                    this._pauseMouseHandlers = true;\n                },\n\n                _mouseUp: function() {\n                    this._pauseMouseHandlers = false;\n                },\n\n                _tap: function(e) {\n                    var toolService = this.toolService;\n                    var selectable = this.options.selectable;\n                    var point = this._eventPositions(e);\n                    var focused = this.focus();\n\n                    toolService._updateHoveredItem(point);\n\n                    if (toolService.hoveredItem) {\n                        var item = toolService.hoveredItem;\n\n                        this.trigger(\"click\", {\n                            item: item,\n                            point: point,\n                            meta: this._meta(e.event)\n                        });\n\n                        if (selectable && item.options.selectable !== false) {\n                            var multiple = selectable.multiple !== false;\n                            var ctrlPressed = kendo.support.mobileOS || this._meta(e.event).ctrlKey;\n\n                            if (item.isSelected) {\n                                if (ctrlPressed) {\n                                    this._destroyToolBar();\n                                    item.select(false);\n                                } else {\n                                    this._createToolBar(focused);\n                                }\n                            } else {\n                                this._destroyToolBar();\n                                this.select(item, {\n                                    addToSelection: multiple && ctrlPressed\n                                });\n                                this._createToolBar(focused);\n                            }\n                        }\n                    } else if (selectable) {\n                        this._destroyToolBar();\n                        this.deselect();\n                    }\n                },\n\n                _keydown: function(e) {\n                    if (this.toolService.keyDown(e.keyCode, this._meta(e))) {\n                        e.preventDefault();\n                    }\n                },\n\n                _wheel: function(e) {\n                    var delta = mwDelta(e),\n                        p = this._eventPositions(e),\n                        meta = deepExtend(this._meta(e), { delta: delta });\n\n                    if (this.toolService.wheel(p, meta)) {\n                        e.preventDefault();\n                    }\n                },\n\n                _meta: function(e) {\n                    return { ctrlKey: e.ctrlKey, metaKey: e.metaKey, altKey: e.altKey, shiftKey: e.shiftKey, type: e.type };\n                },\n\n                _eventPositions: function(e, start) {\n                    var point;\n                    if (e.touch) {\n                        var field = start ? \"startLocation\" : \"location\";\n                        point = new Point(e.x[field], e.y[field]);\n                    } else {\n                        var event = e.originalEvent;\n                        point = new Point(event.pageX, event.pageY);\n                    }\n\n                    return this.documentToModel(point);\n                },\n\n                _gestureStart: function(e) {\n                    this._destroyToolBar();\n                    this.scroller.disable();\n                    var initialCenter = this.documentToModel(new Point(e.center.x, e.center.y));\n                    var eventArgs = {\n                        point: initialCenter,\n                        zoom: this.zoom()\n                    };\n\n                    if (this.trigger(ZOOM_START, eventArgs)) {\n                        return;\n                    }\n\n                    this._gesture = e;\n                    this._initialCenter = initialCenter;\n                },\n\n                _gestureChange: function(e) {\n                    var previousGesture = this._gesture;\n                    var initialCenter = this._initialCenter;\n                    var center = this.documentToView(new Point(e.center.x, e.center.y));\n                    var scaleDelta = e.distance / previousGesture.distance;\n                    var zoom = this._zoom;\n                    var updateZoom = false;\n\n                    if (math.abs(scaleDelta - 1) >= MOBILE_ZOOM_RATE) {\n                        this._zoom = zoom = this._getValidZoom(zoom * scaleDelta);\n                        this.options.zoom = zoom;\n                        this._gesture = e;\n                        updateZoom = true;\n                    }\n\n                    var zoomedPoint = initialCenter.times(zoom);\n                    var pan = center.minus(zoomedPoint);\n                    if (updateZoom || this._pan.distanceTo(pan) >= MOBILE_PAN_DISTANCE) {\n                        this._panTransform(pan);\n                        this._updateAdorners();\n                    }\n\n                    e.preventDefault();\n                },\n\n                _doubleTap: function(e) {\n                    var diagram = this;\n                    var pointPosition = this._eventPositions(e);\n                    var options = diagram.options;\n                    var zoomRate = options.zoomRate;\n                    var zoom = diagram.zoom() + zoomRate;\n                    var meta = this._meta(e);\n                    var zoomOptions = { point: pointPosition, meta: meta, zoom: zoom };\n\n\n                    if (diagram.trigger(ZOOM_START, zoomOptions)) {\n                        return;\n                    }\n\n                    zoom = kendo.dataviz.round(Math.max(options.zoomMin, Math.min(options.zoomMax, zoom)), 2);\n                    zoomOptions.zoom = zoom;\n\n                    diagram.zoom(zoom, zoomOptions);\n                    diagram.trigger(ZOOM_END, zoomOptions);\n                },\n\n                _gestureEnd: function() {\n                    if (this.options.pannable !== false) {\n                        this.scroller.enable();\n                    }\n                    this.trigger(ZOOM_END, {\n                        point: this._initialCenter,\n                        zoom: this.zoom()\n                    });\n                },\n\n                _resize: function() {\n                    var viewport = this.viewport();\n                    if (this.canvas) {\n                        this.canvas.size(viewport);\n                    }\n\n                    if (this.scrollable && this.toolBar) {\n                        this.scrollable.height(viewport.height);\n                    }\n                },\n\n                _mouseover: function(e) {\n                    var node = e.target._kendoNode;\n                    if (node && node.srcElement._hover) {\n                        node.srcElement._hover(true, node.srcElement);\n                    }\n                },\n\n                _mouseout: function(e) {\n                    var node = e.target._kendoNode;\n                    if (node && node.srcElement._hover) {\n                        node.srcElement._hover(false, node.srcElement);\n                    }\n                },\n\n                _initTheme: function() {\n                    var that = this;\n                    var themeName = ((that.options || {}).theme || \"\").toLowerCase();\n                    var themes = dataviz.ui.themes || {};\n                    var themeOptions;\n\n                    if (dataviz.SASS_THEMES.indexOf(themeName) != -1) {\n                        themeOptions = dataviz.autoTheme().diagram;\n                    }\n                    else {\n                        themeOptions = (themes[themeName] || {}).diagram;\n                    }\n\n                    that.options = deepExtend({}, themeOptions, that.options);\n                    if (that.options.editable === true) {\n                        deepExtend(that.options, {\n                            editable: (themeOptions || {}).editable\n                        });\n                    }\n                },\n\n                _createOptionElements: function() {\n                    var options = this.options;\n                    var shapesLength = options.shapes.length;\n\n                    if (shapesLength) {\n                        this._createShapes();\n                    }\n\n                    if (options.connections.length) {\n                        this._createConnections();\n                    }\n\n                    if (shapesLength && options.layout) {\n                        this.layout(options.layout);\n                    }\n                },\n\n                _createShapes: function() {\n                    var that = this,\n                        options = that.options,\n                        shapes = options.shapes,\n                        shape, i;\n\n                    for (i = 0; i < shapes.length; i++) {\n                        shape = shapes[i];\n                        that.addShape(shape);\n                    }\n                },\n\n                _createConnections: function() {\n                    var diagram = this,\n                        options = diagram.options,\n                        defaults = options.connectionDefaults,\n                        connections = options.connections,\n                        conn, source, target, i;\n\n                    for (i = 0; i < connections.length; i++) {\n                        conn = connections[i];\n                        source = diagram._findConnectionTarget(conn.from);\n                        target = diagram._findConnectionTarget(conn.to);\n\n                        diagram.connect(source, target, deepExtend({}, defaults, conn));\n                    }\n                },\n\n                _findConnectionTarget: function(options) {\n                    options = options || {};\n                    var diagram = this;\n                    var shapeId = isString(options) ? options : options.shapeId || options.id;\n                    var target;\n                    if (shapeId) {\n                        target = diagram.getShapeById(shapeId);\n                        if (options.connector) {\n                            target = target.getConnector(options.connector);\n                        }\n                    } else {\n                        target = new Point(options.x || 0, options.y || 0);\n                    }\n\n                    return target;\n                },\n\n                destroy: function() {\n                    var that = this;\n                    Widget.fn.destroy.call(that);\n\n                    if (this._userEvents) {\n                        this._userEvents.destroy();\n                    }\n\n                    kendo.unbindResize(that._resizeHandler);\n\n                    that.clear();\n                    that.element.off(NS);\n                    that.scroller.wrapper.off(NS);\n                    that.canvas.destroy(true);\n                    that.canvas = undefined$1;\n\n                    that._destroyEditor();\n                    that.destroyScroller();\n                    that._destroyGlobalToolBar();\n                    that._destroyToolBar();\n                },\n\n                destroyScroller: function() {\n                    var scroller = this.scroller;\n\n                    if (!scroller) {\n                        return;\n                    }\n\n                    scroller.destroy();\n                    scroller.element.remove();\n                    this.scroller = null;\n                },\n\n                save: function() {\n                    var json = {\n                        shapes: [],\n                        connections: []\n                    };\n                    var i, connection, shape;\n\n                    for (i = 0; i < this.shapes.length; i++) {\n                        shape = this.shapes[i];\n                        if (shape.options.serializable) {\n                            json.shapes.push(shape.options);\n                        }\n                    }\n\n                    for (i = 0; i < this.connections.length; i++) {\n                        connection = this.connections[i];\n\n                        json.connections.push(deepExtend({}, connection.options, connection.toJSON()));\n                    }\n\n                    return json;\n                },\n\n                focus: function() {\n                    if (!this.element.is(kendo._activeElement())) {\n                        var element = this.element,\n                            scrollContainer = element[0],\n                            containers = [],\n                            offsets = [],\n                            documentElement = document.documentElement,\n                            i;\n\n                        do {\n                            scrollContainer = scrollContainer.parentNode;\n\n                            if (scrollContainer.scrollHeight > scrollContainer.clientHeight) {\n                                containers.push(scrollContainer);\n                                offsets.push(scrollContainer.scrollTop);\n                            }\n                        } while (scrollContainer != documentElement);\n\n                        element.trigger(\"focus\");\n\n                        for (i = 0; i < containers.length; i++) {\n                            containers[i].scrollTop = offsets[i];\n                        }\n                        return true;\n                    }\n                },\n\n                load: function(options) {\n                    this.clear();\n\n                    this.setOptions(options);\n                    this._createShapes();\n                    this._createConnections();\n                },\n\n                setOptions: function(options) {\n                    deepExtend(this.options, options);\n                },\n\n                clear: function() {\n                    var that = this;\n\n                    that.select(false);\n                    that.mainLayer.clear();\n                    that._shapesQuadTree.clear();\n                    that._initialize();\n                },\n                /**\n                 * Connects two items.\n                 * @param source Shape, Connector, Point.\n                 * @param target Shape, Connector, Point.\n                 * @param options Connection options that will be passed to the newly created connection.\n                 * @returns The newly created connection.\n                 */\n                connect: function(source, target, options) {\n                    var connection;\n                    if (this.connectionsDataSource && this._isEditable) {\n                        var dataItem = this.connectionsDataSource.add({});\n                        connection = this._connectionsDataMap[dataItem.uid];\n                        connection.source(source);\n                        connection.target(target);\n                        connection.redraw(options);\n                        connection.updateModel();\n                    } else {\n                        connection = new Connection(source, target,\n                            deepExtend({ }, this.options.connectionDefaults, options));\n\n                        this.addConnection(connection);\n                    }\n\n                    return connection;\n                },\n                /**\n                 * Determines whether the the two items are connected.\n                 * @param source Shape, Connector, Point.\n                 * @param target Shape, Connector, Point.\n                 * @returns true if the two items are connected.\n                 */\n                connected: function(source, target) {\n                    for (var i = 0; i < this.connections.length; i++) {\n                        var c = this.connections[i];\n                        if (c.from == source && c.to == target) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                },\n                /**\n                 * Adds connection to the diagram.\n                 * @param connection Connection.\n                 * @param undoable Boolean.\n                 * @returns The newly created connection.\n                 */\n                addConnection: function(connection, undoable) {\n                    if (undoable !== false) {\n                        this.undoRedoService.add(\n                            new diagram.AddConnectionUnit(connection, this), false);\n                    }\n\n                    connection.diagram = this;\n                    connection._setOptionsFromModel();\n                    connection.refresh();\n                    this.mainLayer.append(connection.visual);\n                    this.connections.push(connection);\n\n                    this.trigger(CHANGE, {\n                        added: [connection],\n                        removed: []\n                    });\n\n                    return connection;\n                },\n\n                _addConnection: function(connection, undoable) {\n                    var connectionsDataSource = this.connectionsDataSource;\n                    var dataItem;\n                    if (connectionsDataSource && this._isEditable) {\n                        dataItem = createModel(connectionsDataSource, cloneDataItem(connection.dataItem));\n                        connection.dataItem = dataItem;\n                        connection.updateModel();\n\n                        if (!this.trigger(\"add\", { connection: connection })) {\n                            this._connectionsDataMap[dataItem.uid] = connection;\n\n                            connectionsDataSource.add(dataItem);\n                            this.addConnection(connection, undoable);\n                            connection._updateConnectors();\n\n                            return connection;\n                        }\n                    } else if (!this.trigger(\"add\", { connection: connection })) {\n                        this.addConnection(connection, undoable);\n                        connection._updateConnectors();\n                        return connection;\n                    }\n                },\n\n                /**\n                 * Adds shape to the diagram.\n                 * @param item Shape, Point. If point is passed it will be created new Shape and positioned at that point.\n                 * @param options. The options to be passed to the newly created Shape.\n                 * @returns The newly created shape.\n                 */\n                addShape: function(item, undoable) {\n                    var shape,\n                        shapeDefaults = this.options.shapeDefaults;\n\n                    if (item instanceof Shape) {\n                        shape = item;\n                        this._parseBounds(shape.bounds());\n                    } else if (!(item instanceof kendo.Class)) {\n                        shapeDefaults = deepExtend({}, shapeDefaults, item || {});\n                        shape = new Shape(shapeDefaults, this);\n                        this._parseBounds(shape.bounds());\n                    } else {\n                        return;\n                    }\n\n                    if (undoable !== false) {\n                        this.undoRedoService.add(new diagram.AddShapeUnit(shape, this), false);\n                    }\n\n                    this.shapes.push(shape);\n                    if (shape.diagram !== this) {\n                        this._shapesQuadTree.insert(shape);\n                        shape.diagram = this;\n                    }\n                    this.mainLayer.append(shape.visual);\n\n                    this.trigger(CHANGE, {\n                        added: [shape],\n                        removed: []\n                    });\n\n                    return shape;\n                },\n\n                _addShape: function(shape, undoable) {\n                    var that = this;\n                    var dataSource = that.dataSource;\n                    var dataItem;\n                    if (dataSource && this._isEditable) {\n                        dataItem = createModel(dataSource, cloneDataItem(shape.dataItem));\n                        shape.dataItem = dataItem;\n                        shape.updateModel();\n\n                        if (!this.trigger(\"add\", { shape: shape })) {\n                            this.dataSource.add(dataItem);\n                            var inactiveItem = this._inactiveShapeItems.getByUid(dataItem.uid);\n                            inactiveItem.element = shape;\n                            inactiveItem.undoable = undoable;\n                            return shape;\n                        }\n                    } else if (!this.trigger(\"add\", { shape: shape })) {\n                        return this.addShape(shape, undoable);\n                    }\n                },\n\n                _parseBounds: function(bounds) {\n                    bounds.x = typeof(bounds.x) == \"string\" ? parseFloat(bounds.x) : bounds.x;\n                    bounds.y = typeof(bounds.y) == \"string\" ? parseFloat(bounds.y) : bounds.y;\n                },\n                /**\n                 * Removes items (or single item) from the diagram.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable.\n                 */\n\n               remove: function(items, undoable) {\n                    items = isArray(items) ? items.slice(0) : [items];\n                    var elements = splitDiagramElements(items);\n                    var shapes = elements.shapes;\n                    var connections = elements.connections;\n                    var i;\n\n                    if (!defined(undoable)) {\n                        undoable = true;\n                    }\n\n                    if (undoable) {\n                        this.undoRedoService.begin();\n                    }\n\n                    this._suspendModelRefresh();\n                    for (i = shapes.length - 1; i >= 0; i--) {\n                       this._removeItem(shapes[i], undoable, connections);\n                    }\n\n                    for (i = connections.length - 1; i >= 0; i--) {\n                        this._removeItem(connections[i], undoable);\n                    }\n\n                    this._resumeModelRefresh();\n\n                    if (undoable) {\n                        this.undoRedoService.commit(false);\n                    }\n\n                    this.trigger(CHANGE, {\n                        added: [],\n                        removed: items\n                    });\n                },\n\n                _removeShapeDataItem: function(item) {\n                    if (this._isEditable) {\n                        this.dataSource.remove(item.dataItem);\n                        delete this._dataMap[item.dataItem.id];\n                    }\n                },\n\n                _removeConnectionDataItem: function(item) {\n                    if (this._isEditable) {\n                        this.connectionsDataSource.remove(item.dataItem);\n                        delete this._connectionsDataMap[item.dataItem.uid];\n                    }\n                },\n\n                _triggerRemove: function(items) {\n                    var toRemove = [];\n                    var item, args, editable;\n\n                    for (var idx = 0; idx < items.length; idx++) {\n                        item = items[idx];\n                        editable = item.options.editable;\n                        if (item instanceof Shape) {\n                            args = { shape: item };\n                        } else {\n                            args = { connection: item };\n                        }\n                        if (editable && editable.remove !== false && !this.trigger(\"remove\", args)) {\n                            toRemove.push(item);\n                        }\n                    }\n                    return toRemove;\n                },\n\n                /**\n                 * Executes the next undoable action on top of the undo stack if any.\n                 */\n                undo: function() {\n                    this.undoRedoService.undo();\n                },\n                /**\n                 * Executes the previous undoable action on top of the redo stack if any.\n                 */\n                redo: function() {\n                    this.undoRedoService.redo();\n                },\n                /**\n                 * Selects items on the basis of the given input or returns the current selection if none.\n                 * @param itemsOrRect DiagramElement, Array of elements, \"All\", false or Rect. A value 'false' will deselect everything.\n                 * @param options\n                 * @returns {Array}\n                 */\n                select: function(item, options) {\n                    if (isDefined(item)) {\n                        options = deepExtend({ addToSelection: false }, options);\n\n                        var addToSelection = options.addToSelection,\n                            items = [],\n                            selected = [],\n                            i, element;\n\n                        if (!addToSelection) {\n                            this.deselect();\n                        }\n\n                        this._internalSelection = true;\n\n                        if (item instanceof Array) {\n                            items = item;\n                        } else if (item instanceof DiagramElement) {\n                            items = [ item ];\n                        }\n\n                        for (i = 0; i < items.length; i++) {\n                            element = items[i];\n                            if (element.select(true)) {\n                                selected.push(element);\n                            }\n                        }\n\n                        this._selectionChanged(selected, []);\n\n                        this._internalSelection = false;\n                    } else {\n                        return this._selectedItems;\n                    }\n                },\n\n                selectAll: function() {\n                    this.select(this.shapes.concat(this.connections));\n                },\n\n                selectArea: function(rect) {\n                    var i, items, item;\n                    this._internalSelection = true;\n                    var selected = [];\n                    if (rect instanceof Rect) {\n                        items = this.shapes.concat(this.connections);\n                        for (i = 0; i < items.length; i++) {\n                            item = items[i];\n                            if ((!rect || item._hitTest(rect)) && item.options.enable) {\n                                if (item.select(true)) {\n                                    selected.push(item);\n                                }\n                            }\n                        }\n                    }\n\n                    this._selectionChanged(selected, []);\n                    this._internalSelection = false;\n                },\n\n                deselect: function(item) {\n                    this._internalSelection = true;\n                    var deselected = [],\n                        items = [],\n                        element, i;\n\n                    if (item instanceof Array) {\n                        items = item;\n                    } else if (item instanceof DiagramElement) {\n                        items.push(item);\n                    } else if (!isDefined(item)) {\n                        items = this._selectedItems.slice(0);\n                    }\n\n                    for (i = 0; i < items.length; i++) {\n                        element = items[i];\n                        if (element.select(false)) {\n                            deselected.push(element);\n                        }\n                    }\n\n                    this._selectionChanged([], deselected);\n                    this._internalSelection = false;\n                },\n                /**\n                 * Brings to front the passed items.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable. By default the action is undoable.\n                 */\n                toFront: function(items, undoable) {\n                    if (!items) {\n                        items = this._selectedItems.slice();\n                    }\n\n                    var result = this._getDiagramItems(items), indices;\n                    if (!defined(undoable) || undoable) {\n                        indices = indicesOfItems(this.mainLayer, result.visuals);\n                        var unit = new ToFrontUnit(this, items, indices);\n                        this.undoRedoService.add(unit);\n                    } else {\n                        this.mainLayer.toFront(result.visuals);\n                        this._fixOrdering(result, true);\n                    }\n                },\n                /**\n                 * Sends to back the passed items.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable. By default the action is undoable.\n                 */\n                toBack: function(items, undoable) {\n                    if (!items) {\n                        items = this._selectedItems.slice();\n                    }\n\n                    var result = this._getDiagramItems(items), indices;\n                    if (!defined(undoable) || undoable) {\n                        indices = indicesOfItems(this.mainLayer, result.visuals);\n                        var unit = new ToBackUnit(this, items, indices);\n                        this.undoRedoService.add(unit);\n                    } else {\n                        this.mainLayer.toBack(result.visuals);\n                        this._fixOrdering(result, false);\n                    }\n                },\n                /**\n                 * Bring into view the passed item(s) or rectangle.\n                 * @param items DiagramElement, Array of Items, Rect.\n                 * @param options. align - controls the position of the calculated rectangle relative to the viewport.\n                 * \"Center middle\" will position the items in the center. animate - controls if the pan should be animated.\n                 */\n                bringIntoView: function(item, options) { // jQuery|Item|Array|Rect\n                    var viewport = this.viewport();\n                    var aligner = new diagram.RectAlign(viewport);\n                    var current, rect, original, newPan;\n\n                    if (viewport.width === 0 || viewport.height === 0) {\n                        return;\n                    }\n\n                    options = deepExtend({ animate: false, align: \"center middle\" }, options);\n                    if (options.align == \"none\") {\n                        options.align = \"center middle\";\n                    }\n\n                    if (item instanceof DiagramElement) {\n                        rect = item.bounds(TRANSFORMED);\n                    } else if (isArray(item)) {\n                        rect = this.boundingBox(item);\n                    } else if (item instanceof Rect) {\n                        rect = item.clone();\n                    }\n\n                    original = rect.clone();\n\n                    rect.zoom(this._zoom);\n\n                    if (rect.width > viewport.width || rect.height > viewport.height) {\n                        this._zoom = this._getValidZoom(math.min(viewport.width / original.width, viewport.height / original.height));\n                        rect = original.clone().zoom(this._zoom);\n                    }\n\n                    this._zoomMainLayer();\n\n                    current = rect.clone();\n                    aligner.align(rect, options.align);\n\n                    newPan = rect.topLeft().minus(current.topLeft());\n                    this.pan(newPan.times(-1), options.animate);\n                },\n\n                alignShapes: function(direction) {\n                    if (isUndefined(direction)) {\n                        direction = \"Left\";\n                    }\n                    var items = this.select(),\n                        val,\n                        item,\n                        i;\n\n                    if (items.length === 0) {\n                        return;\n                    }\n\n                    switch (direction.toLowerCase()) {\n                        case \"left\":\n                        case \"top\":\n                            val = MAX_VALUE;\n                            break;\n                        case \"right\":\n                        case \"bottom\":\n                            val = MIN_VALUE;\n                            break;\n                    }\n\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (item instanceof Shape) {\n                            switch (direction.toLowerCase()) {\n                                case \"left\":\n                                    val = math.min(val, item.options.x);\n                                    break;\n                                case \"top\":\n                                    val = math.min(val, item.options.y);\n                                    break;\n                                case \"right\":\n                                    val = math.max(val, item.options.x);\n                                    break;\n                                case \"bottom\":\n                                    val = math.max(val, item.options.y);\n                                    break;\n                            }\n                        }\n                    }\n                    var undoStates = [];\n                    var shapes = [];\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (item instanceof Shape) {\n                            shapes.push(item);\n                            undoStates.push(item.bounds());\n                            switch (direction.toLowerCase()) {\n                                case \"left\":\n                                case \"right\":\n                                    item.position(new Point(val, item.options.y));\n                                    break;\n                                case \"top\":\n                                case \"bottom\":\n                                    item.position(new Point(item.options.x, val));\n                                    break;\n                            }\n                        }\n                    }\n                    var unit = new diagram.TransformUnit(shapes, undoStates);\n                    this.undoRedoService.add(unit, false);\n                },\n\n                zoom: function(zoom, options) {\n                    if (zoom) {\n                        var staticPoint = options ? options.point : new diagram.Point(0, 0);\n                        // var meta = options ? options.meta : 0;\n                        zoom = this._zoom = this._getValidZoom(zoom);\n\n                        if (!isUndefined(staticPoint)) {//Viewpoint vector is constant\n                            staticPoint = new diagram.Point(math.round(staticPoint.x), math.round(staticPoint.y));\n                            var zoomedPoint = staticPoint.times(zoom);\n                            var viewportVector = this.modelToView(staticPoint);\n                            var raw = viewportVector.minus(zoomedPoint);//pan + zoomed point = viewpoint vector\n                            this._storePan(new diagram.Point(math.round(raw.x), math.round(raw.y)));\n                        }\n\n                        if (options) {\n                            options.zoom = zoom;\n                        }\n\n                        this._panTransform();\n\n                        this.canvas.surface.hideTooltip();\n\n                        this._updateAdorners();\n                    }\n\n                    return this._zoom;\n                },\n\n                _getPan: function(pan) {\n                    var canvas = this.canvas;\n                    if (!canvas.translate) {\n                        pan = pan.plus(this._pan);\n                    }\n                    return pan;\n                },\n\n                pan: function(pan, animate) {\n                    if (pan instanceof Point) {\n                        var that = this;\n                        var scroller = that.scroller;\n                        pan = that._getPan(pan);\n                        pan = pan.times(-1);\n\n                        if (animate) {\n                            scroller.animatedScrollTo(pan.x, pan.y, function() {\n                                that._updateAdorners();\n                            });\n                        } else {\n                            scroller.scrollTo(pan.x, pan.y);\n                            that._updateAdorners();\n                        }\n                    } else {\n                        return this._pan.times(-1);\n                    }\n                },\n\n                viewport: function() {\n                    var element = this.element;\n                    var width = element.width();\n                    var height = element.height();\n\n                    if (this.toolBar) {\n                        height -= outerHeight(this.toolBar.element);\n                    }\n\n                    return new Rect(0, 0, width, height);\n                },\n                copy: function() {\n                    if (this.options.copy.enabled) {\n                        this._clipboard = [];\n                        this._copyOffset = 1;\n                        for (var i = 0; i < this._selectedItems.length; i++) {\n                            var item = this._selectedItems[i];\n                            this._clipboard.push(item);\n                        }\n                    }\n                },\n                cut: function() {\n                    if (this.options.copy.enabled) {\n                        this._clipboard = [];\n                        this._copyOffset = 0;\n                        for (var i = 0; i < this._selectedItems.length; i++) {\n                            var item = this._selectedItems[i];\n                            this._clipboard.push(item);\n                        }\n                        this.remove(this._clipboard, true);\n                    }\n                },\n\n                paste: function() {\n                    if (this._clipboard.length > 0) {\n                        var item, copied, i;\n                        var mapping = {};\n                        var elements = splitDiagramElements(this._clipboard);\n                        var connections = elements.connections;\n                        var shapes = elements.shapes;\n                        var offset = {\n                            x: this._copyOffset * this.options.copy.offsetX,\n                            y: this._copyOffset * this.options.copy.offsetY\n                        };\n                        this.deselect();\n                        // first the shapes\n                        for (i = 0; i < shapes.length; i++) {\n                            item = shapes[i];\n                            copied = item.clone();\n                            mapping[item.id] = copied;\n                            copied.position(new Point(item.options.x + offset.x, item.options.y + offset.y));\n                            copied.diagram = this;\n                            copied = this._addShape(copied);\n                            if (copied) {\n                                copied.select();\n                            }\n                        }\n                        // then the connections\n                        for (i = 0; i < connections.length; i++) {\n                            item = connections[i];\n                            copied = this._addConnection(item.clone());\n                            if (copied) {\n                                this._updateCopiedConnection(copied, item, \"source\", mapping, offset);\n                                this._updateCopiedConnection(copied, item, \"target\", mapping, offset);\n\n                                copied.select(true);\n                                copied.updateModel();\n                            }\n                        }\n\n                        this._syncChanges();\n\n                        this._copyOffset += 1;\n                    }\n                },\n\n                _updateCopiedConnection: function(connection, sourceConnection, connectorName, mapping, offset) {\n                    var onActivate, inactiveItem, targetShape;\n                    var target = sourceConnection[connectorName]();\n                    var diagram = this;\n                    if (target instanceof Connector && mapping[target.shape.id]) {\n                        targetShape = mapping[target.shape.id];\n                        if (diagram.getShapeById(targetShape.id)) {\n                            connection[connectorName](targetShape.getConnector(target.options.name));\n                        } else {\n                            inactiveItem = diagram._inactiveShapeItems.getByUid(targetShape.dataItem.uid);\n                            if (inactiveItem) {\n                                onActivate = function(item) {\n                                    targetShape = diagram._dataMap[item.id];\n                                    connection[connectorName](targetShape.getConnector(target.options.name));\n                                    connection.updateModel();\n                                };\n                                diagram._deferredConnectionUpdates.push(inactiveItem.onActivate(onActivate));\n                            }\n                        }\n                    } else {\n                        connection[connectorName](new Point(sourceConnection[connectorName + \"Point\"]().x + offset.x, sourceConnection[connectorName + \"Point\"]().y + offset.y));\n                    }\n                },\n                /**\n                 * Gets the bounding rectangle of the given items.\n                 * @param items DiagramElement, Array of elements.\n                 * @param origin Boolean. Pass 'true' if you need to get the bounding box of the shapes without their rotation offset.\n                 * @returns {Rect}\n                 */\n                boundingBox: function(items, origin) {\n                    var rect = Rect.empty(), temp,\n                        di = isDefined(items) ? this._getDiagramItems(items) : { shapes: this.shapes };\n                    if (di.shapes.length > 0) {\n                        var item = di.shapes[0];\n                        rect = item.bounds(ROTATED);\n                        for (var i = 1; i < di.shapes.length; i++) {\n                            item = di.shapes[i];\n                            temp = item.bounds(ROTATED);\n                            if (origin === true) {\n                                temp.x -= item._rotationOffset.x;\n                                temp.y -= item._rotationOffset.y;\n                            }\n                            rect = rect.union(temp);\n                        }\n                    }\n                    return rect;\n                },\n\n                _containerOffset: function() {\n                    var containerOffset = this.element.offset();\n                    if (this.toolBar) {\n                        containerOffset.top += outerHeight(this.toolBar.element);\n                    }\n                    return containerOffset;\n                },\n\n                documentToView: function(point) {\n                    var containerOffset = this._containerOffset();\n\n                    return new Point(point.x - containerOffset.left, point.y - containerOffset.top);\n                },\n                viewToDocument: function(point) {\n                    var containerOffset = this._containerOffset();\n\n                    return new Point(point.x + containerOffset.left, point.y + containerOffset.top);\n                },\n                viewToModel: function(point) {\n                    return this._transformWithMatrix(point, this._matrixInvert);\n                },\n                modelToView: function(point) {\n                    return this._transformWithMatrix(point, this._matrix);\n                },\n                modelToLayer: function(point) {\n                    return this._transformWithMatrix(point, this._layerMatrix);\n                },\n                layerToModel: function(point) {\n                    return this._transformWithMatrix(point, this._layerMatrixInvert);\n                },\n                documentToModel: function(point) {\n                    var viewPoint = this.documentToView(point);\n                    if (!this.canvas.translate) {\n                        viewPoint.x = viewPoint.x + this.scroller.scrollLeft;\n                        viewPoint.y = viewPoint.y + this.scroller.scrollTop;\n                    }\n                    return this.viewToModel(viewPoint);\n                },\n                modelToDocument: function(point) {\n                    return this.viewToDocument(this.modelToView(point));\n                },\n                _transformWithMatrix: function(point, matrix) {\n                    var result = point;\n                    if (point instanceof Point) {\n                        if (matrix) {\n                            result = matrix.apply(point);\n                        }\n                    }\n                    else {\n                        var tl = this._transformWithMatrix(point.topLeft(), matrix),\n                            br = this._transformWithMatrix(point.bottomRight(), matrix);\n                        result = Rect.fromPoints(tl, br);\n                    }\n                    return result;\n                },\n\n                setDataSource: function(dataSource) {\n                    this.options.dataSource = dataSource;\n                    this._dataSource();\n                    if (this.options.autoBind) {\n                        this.dataSource.fetch();\n                    }\n                },\n\n                setConnectionsDataSource: function(dataSource) {\n                    this.options.connectionsDataSource = dataSource;\n                    this._connectionDataSource();\n                    if (this.options.autoBind) {\n                        this.connectionsDataSource.fetch();\n                    }\n                },\n\n                /**\n                 * Performs a diagram layout of the given type.\n                 * @param layoutType The layout algorithm to be applied (TreeLayout, LayeredLayout, SpringLayout).\n                 * @param options Layout-specific options.\n                 */\n                layout: function(options) {\n                    this._layouting = true;\n                    // TODO: raise layout event?\n                    var type;\n                    if (isUndefined(options)) {\n                        options = this.options.layout;\n                    }\n                    if (isUndefined(options) || isUndefined(options.type)) {\n                        type = \"Tree\";\n                    }\n                    else {\n                        type = options.type;\n                    }\n                    var l;\n                    switch (type.toLowerCase()) {\n                        case \"tree\":\n                            l = new diagram.TreeLayout(this);\n                            break;\n\n                        case \"layered\":\n                            l = new diagram.LayeredLayout(this);\n                            break;\n\n                        case \"forcedirected\":\n                        case \"force\":\n                        case \"spring\":\n                        case \"springembedder\":\n                            l = new diagram.SpringLayout(this);\n                            break;\n                        default:\n                            throw \"Layout algorithm '\" + type + \"' is not supported.\";\n                    }\n                    var initialState = new diagram.LayoutState(this);\n                    var finalState = l.layout(options);\n                    if (finalState) {\n                        var unit = new diagram.LayoutUndoUnit(initialState, finalState, options ? options.animate : null);\n                        this.undoRedoService.add(unit);\n                    }\n                    this._layouting = false;\n                    this._redrawConnections();\n                },\n                /**\n                 * Gets a shape on the basis of its identifier.\n                 * @param id (string) the identifier of a shape.\n                 * @returns {Shape}\n                 */\n                getShapeById: function(id) {\n                    var found;\n                    found = Utils.first(this.shapes, function(s) {\n                        return s.visual.id === id;\n                    });\n                    if (found) {\n                        return found;\n                    }\n                    found = Utils.first(this.connections, function(c) {\n                        return c.visual.id === id;\n                    });\n                    return found;\n                },\n\n                getShapeByModelId: function(id) {\n                    var shape;\n                    if (this._isEditable) {\n                        shape = this._dataMap[id];\n                    } else {\n                        shape = Utils.first(this.shapes, function(shape) {\n                            return (shape.dataItem || {}).id === id;\n                        });\n                    }\n                    return shape;\n                },\n\n                getShapeByModelUid: function(uid) {\n                    var shape;\n                    if (this._isEditable) {\n                        shape = Utils.first(this.shapes, function(shape) {\n                            return (shape.dataItem || {}).uid === uid;\n                        });\n                    } else {\n                        shape = this._dataMap[uid];\n                    }\n                    return shape;\n                },\n\n                getConnectionByModelId: function(id) {\n                    var connection;\n                    if (this.connectionsDataSource) {\n                        connection = Utils.first(this.connections, function(connection) {\n                            return (connection.dataItem || {}).id === id;\n                        });\n                    }\n                    return connection;\n                },\n\n                getConnectionByModelUid: function(uid) {\n                    var connection;\n                    if (this.connectionsDataSource) {\n                        connection = this._connectionsDataMap[uid];\n                    }\n                    return connection;\n                },\n\n                _extendLayoutOptions: function(options) {\n                    if (options.layout) {\n                        options.layout = deepExtend({}, diagram.LayoutBase.fn.defaultOptions || {}, options.layout);\n                    }\n                },\n\n                _selectionChanged: function(selected, deselected) {\n                    if (selected.length || deselected.length) {\n                        this.trigger(SELECT, { selected: selected, deselected: deselected });\n                    }\n                },\n                _getValidZoom: function(zoom) {\n                    return math.min(math.max(zoom, this.options.zoomMin), this.options.zoomMax);\n                },\n                _panTransform: function(pos) {\n                    var diagram = this,\n                        pan = pos || diagram._pan;\n\n                    if (diagram.canvas.translate) {\n                        diagram.scroller.scrollTo(pan.x, pan.y);\n                        diagram._zoomMainLayer();\n                    } else {\n                        diagram._storePan(pan);\n                        diagram._transformMainLayer();\n                    }\n                },\n\n                _finishPan: function() {\n                    this.trigger(PAN, { total: this._pan, delta: Number.NaN });\n                },\n                _storePan: function(pan) {\n                    this._pan = pan;\n                    this._storeViewMatrix();\n                },\n                _zoomMainLayer: function() {\n                    var zoom = this._zoom;\n\n                    var transform = new CompositeTransform(0, 0, zoom, zoom);\n                    transform.render(this.mainLayer);\n                    this._storeLayerMatrix(transform);\n                    this._storeViewMatrix();\n                },\n                _transformMainLayer: function() {\n                    var pan = this._pan,\n                        zoom = this._zoom;\n\n                    var transform = new CompositeTransform(pan.x, pan.y, zoom, zoom);\n                    transform.render(this.mainLayer);\n                    this._storeLayerMatrix(transform);\n                    this._storeViewMatrix();\n                },\n                _storeLayerMatrix: function(canvasTransform) {\n                    this._layerMatrix = canvasTransform.toMatrix();\n                    this._layerMatrixInvert = canvasTransform.invert().toMatrix();\n                },\n                _storeViewMatrix: function() {\n                    var pan = this._pan,\n                        zoom = this._zoom;\n\n                    var transform = new CompositeTransform(pan.x, pan.y, zoom, zoom);\n                    this._matrix = transform.toMatrix();\n                    this._matrixInvert = transform.invert().toMatrix();\n                },\n                _toIndex: function(items, indices) {\n                    var result = this._getDiagramItems(items);\n                    this.mainLayer.toIndex(result.visuals, indices);\n                    this._fixOrdering(result, false);\n                },\n                _fixOrdering: function(result, toFront) {\n                    var shapePos = toFront ? this.shapes.length - 1 : 0,\n                        conPos = toFront ? this.connections.length - 1 : 0,\n                        i, item;\n                    for (i = 0; i < result.shapes.length; i++) {\n                        item = result.shapes[i];\n                        Utils.remove(this.shapes, item);\n                        Utils.insert(this.shapes, item, shapePos);\n                    }\n                    for (i = 0; i < result.cons.length; i++) {\n                        item = result.cons[i];\n                        Utils.remove(this.connections, item);\n                        Utils.insert(this.connections, item, conPos);\n                    }\n                },\n                _getDiagramItems: function(items) {\n                    var i, result = {}, args = items;\n                    result.visuals = [];\n                    result.shapes = [];\n                    result.cons = [];\n\n                    if (!items) {\n                        args = this._selectedItems.slice();\n                    } else if (!isArray(items)) {\n                        args = [items];\n                    }\n\n                    for (i = 0; i < args.length; i++) {\n                        var item = args[i];\n                        if (item instanceof Shape) {\n                            result.shapes.push(item);\n                            result.visuals.push(item.visual);\n                        } else if (item instanceof Connection) {\n                            result.cons.push(item);\n                            result.visuals.push(item.visual);\n                        }\n                    }\n\n                    return result;\n                },\n\n                _removeItem: function(item, undoable, removedConnections) {\n                    item.select(false);\n                    if (item instanceof Shape) {\n                        this._removeShapeDataItem(item);\n                        this._removeShape(item, undoable, removedConnections);\n                    } else if (item instanceof Connection) {\n                        this._removeConnectionDataItem(item);\n                        this._removeConnection(item, undoable);\n                    }\n\n                    this.mainLayer.remove(item.visual);\n                },\n\n                _removeShape: function(shape, undoable, removedConnections) {\n                    var i, connection, connector,\n                        sources = [], targets = [];\n                    this.toolService._removeHover();\n\n                    if (undoable) {\n                        this.undoRedoService.addCompositeItem(new DeleteShapeUnit(shape));\n                    }\n                    Utils.remove(this.shapes, shape);\n                    this._shapesQuadTree.remove(shape);\n\n                    for (i = 0; i < shape.connectors.length; i++) {\n                        connector = shape.connectors[i];\n                        for (var j = 0; j < connector.connections.length; j++) {\n                            connection = connector.connections[j];\n                            if (!removedConnections || !dataviz.inArray(connection, removedConnections)) {\n                                if (connection.sourceConnector == connector) {\n                                    sources.push(connection);\n                                } else if (connection.targetConnector == connector) {\n                                    targets.push(connection);\n                                }\n                            }\n                        }\n                    }\n\n                    for (i = 0; i < sources.length; i++) {\n                        sources[i].source(null, undoable);\n                        sources[i].updateModel();\n                    }\n                    for (i = 0; i < targets.length; i++) {\n                        targets[i].target(null, undoable);\n                        targets[i].updateModel();\n                    }\n                },\n\n                _removeConnection: function(connection, undoable) {\n                    if (connection.sourceConnector) {\n                        Utils.remove(connection.sourceConnector.connections, connection);\n                    }\n                    if (connection.targetConnector) {\n                        Utils.remove(connection.targetConnector.connections, connection);\n                    }\n                    if (undoable) {\n                        this.undoRedoService.addCompositeItem(new DeleteConnectionUnit(connection));\n                    }\n\n                    Utils.remove(this.connections, connection);\n                },\n\n                _removeDataItems: function(items, recursive) {\n                    var item, children, shape, idx;\n                    items = isArray(items) ? items : [items];\n\n                    while (items.length) {\n                        item = items.shift();\n                        shape = this._dataMap[item.uid];\n                        if (shape) {\n                            this._removeShapeConnections(shape);\n                            this._removeItem(shape, false);\n                            delete this._dataMap[item.uid];\n                            if (recursive && item.hasChildren && item.loaded()) {\n                                children = item.children.data();\n                                for (idx = 0; idx < children.length; idx++) {\n                                    items.push(children[idx]);\n                                }\n                            }\n                        }\n                    }\n                },\n\n                _removeShapeConnections: function(shape) {\n                    var connections = shape.connections();\n                    var idx;\n\n                    if (connections) {\n                        for (idx = 0; idx < connections.length; idx++) {\n                            this._removeItem(connections[idx], false);\n                        }\n                    }\n                },\n\n                _addDataItem: function(dataItem, undoable) {\n                    if (!defined(dataItem)) {\n                        return;\n                    }\n\n                    var shape = this._dataMap[dataItem.id];\n                    if (shape) {\n                        return shape;\n                    }\n\n                    var options = deepExtend({}, this.options.shapeDefaults);\n                    options.dataItem = dataItem;\n                    shape = new Shape(options, this);\n                    this.addShape(shape, undoable !== false);\n                    this._dataMap[dataItem.id] = shape;\n                    return shape;\n                },\n\n                _addDataItemByUid: function(dataItem) {\n                    if (!defined(dataItem)) {\n                        return;\n                    }\n\n                    var shape = this._dataMap[dataItem.uid];\n                    if (shape) {\n                        return shape;\n                    }\n\n                    var options = deepExtend({}, this.options.shapeDefaults);\n                    options.dataItem = dataItem;\n                    shape = new Shape(options, this);\n                    this.addShape(shape);\n                    this._dataMap[dataItem.uid] = shape;\n                    return shape;\n                },\n\n                _addDataItems: function(items, parent) {\n                    var item, idx, shape, parentShape, connection;\n                    for (idx = 0; idx < items.length; idx++) {\n                        item = items[idx];\n                        shape = this._addDataItemByUid(item);\n                        parentShape = this._addDataItemByUid(parent);\n                        if (parentShape && !this.connected(parentShape, shape)) { // check if connected to not duplicate connections.\n                            connection = this.connect(parentShape, shape);\n                        }\n                    }\n                },\n\n                _refreshSource: function(e) {\n                    var that = this,\n                        node = e.node,\n                        action = e.action,\n                        items = e.items,\n                        options = that.options,\n                        idx,\n                        dataBound;\n\n                    if (e.field) {\n                        for (idx = 0; idx < items.length; idx++) {\n                            if (this._dataMap[items[idx].uid]) {\n                                this._dataMap[items[idx].uid].redrawVisual();\n                            }\n                        }\n                        return;\n                    }\n\n                    if (action == \"remove\") {\n                        this._removeDataItems(e.items, true);\n                    } else {\n\n                        if ((!action || action === \"itemloaded\") && !this._bindingRoots) {\n                            this._bindingRoots = true;\n                            dataBound = true;\n                        }\n\n                        if (!action && !node) {\n                            that.clear();\n                        }\n\n                        this._addDataItems(items, node);\n\n                        for (idx = 0; idx < items.length; idx++) {\n                            items[idx].load();\n                        }\n                    }\n\n                    if (options.layout && (dataBound || action == \"remove\" || action == \"add\")) {\n                        that.layout(options.layout);\n                    }\n\n                    if (dataBound) {\n                        this.trigger(\"dataBound\");\n                        this._bindingRoots = false;\n                    }\n                },\n\n                _addItem: function(item) {\n                    if (item instanceof Shape) {\n                        this.addShape(item);\n                    } else if (item instanceof Connection) {\n                        this.addConnection(item);\n                    }\n                },\n\n                _createToolBar: function(preventClosing) {\n                    var diagram = this.toolService.diagram;\n\n                    if (!this.singleToolBar && diagram.select().length === 1) {\n                        var element = diagram.select()[0];\n                        if (element && element.options.editable !== false) {\n                            var editable = element.options.editable;\n                            var tools = editable.tools;\n                            if (this._isEditable && tools.length === 0) {\n                                if (element instanceof Shape) {\n                                    tools = [\"edit\", \"rotateClockwise\", \"rotateAnticlockwise\"];\n                                } else if (element instanceof Connection) {\n                                    tools = [\"edit\"];\n                                }\n\n                                if (editable && editable.remove !== false) {\n                                    tools.push(\"delete\");\n                                }\n                            }\n\n                            if (tools && tools.length) {\n                                var padding = 20;\n                                var point;\n                                this.singleToolBar = new DiagramToolBar(diagram, {\n                                    tools: tools,\n                                    click: this._toolBarClick.bind(this),\n                                    modal: true,\n                                    popupZIndex: parseInt(diagram.element.closest(\".k-window\").css(\"zIndex\"), 10) + 10\n                                });\n                                var popupWidth = outerWidth(this.singleToolBar._popup.element);\n                                var popupHeight = outerHeight(this.singleToolBar._popup.element);\n                                if (element instanceof Shape) {\n                                    var shapeBounds = this.modelToView(element.bounds(ROTATED));\n                                    point = new Point(shapeBounds.x, shapeBounds.y).minus(new Point(\n                                        (popupWidth - shapeBounds.width) / 2,\n                                        popupHeight + padding));\n                                } else if (element instanceof Connection) {\n                                    var connectionBounds = this.modelToView(element.bounds());\n\n                                    point = new Point(connectionBounds.x, connectionBounds.y)\n                                        .minus(new Point(\n                                            (popupWidth - connectionBounds.width - 20) / 2,\n                                            popupHeight + padding\n                                        ));\n                                }\n\n                                if (point) {\n                                    if (!this.canvas.translate) {\n                                        point = point.minus(new Point(this.scroller.scrollLeft, this.scroller.scrollTop));\n                                    }\n                                    point = this.viewToDocument(point);\n                                    point = new Point(math.max(point.x, 0), math.max(point.y, 0));\n                                    this.singleToolBar.showAt(point);\n                                    if (preventClosing) {\n                                        this.singleToolBar._popup.one(\"close\", preventDefault);\n                                    }\n                                } else {\n                                    this._destroyToolBar();\n                                }\n                            }\n                        }\n                    }\n                },\n\n                _toolBarClick: function(e) {\n                    this.trigger(\"toolBarClick\", e);\n                    this._destroyToolBar();\n                },\n\n                _normalizePointZoom: function(point) {\n                    return point.times(1 / this.zoom());\n                },\n\n                _initialize: function() {\n                    this.shapes = [];\n                    this._selectedItems = [];\n                    this.connections = [];\n                    this._dataMap = {};\n                    this._connectionsDataMap = {};\n                    this._inactiveShapeItems = new InactiveItemsCollection();\n                    this._deferredConnectionUpdates = [];\n                    this.undoRedoService = new UndoRedoService({\n                        undone: this._syncHandler,\n                        redone: this._syncHandler\n                    });\n                    this.id = diagram.randomId();\n                },\n\n                _fetchFreshData: function() {\n                    var that = this;\n                    that._dataSource();\n\n                    if (that._isEditable) {\n                        that._connectionDataSource();\n                    }\n\n                    if (that.options.autoBind) {\n                        if (that._isEditable) {\n                            this._loadingShapes = true;\n                            this._loadingConnections = true;\n                            that.dataSource.fetch();\n                            that.connectionsDataSource.fetch();\n                        } else {\n                            that.dataSource.fetch();\n                        }\n                    }\n                },\n\n                _dataSource: function() {\n                    if (defined(this.options.connectionsDataSource)) {\n                        this._isEditable = true;\n                        var dsOptions = this.options.dataSource || {};\n                        var ds = isArray(dsOptions) ? { data: dsOptions } : dsOptions;\n\n                        if (this.dataSource && this._shapesRefreshHandler) {\n                            this.dataSource\n                                .unbind(\"change\", this._shapesRefreshHandler)\n                                .unbind(\"requestStart\", this._shapesRequestStartHandler)\n                                .unbind(\"error\", this._shapesErrorHandler);\n                        } else {\n                            this._shapesRefreshHandler = this._refreshShapes.bind(this);\n                            this._shapesRequestStartHandler = this._shapesRequestStart.bind(this);\n                            this._shapesErrorHandler = this._error.bind(this);\n                        }\n\n                        this.dataSource = kendo.data.DataSource.create(ds)\n                            .bind(\"change\", this._shapesRefreshHandler)\n                            .bind(\"requestStart\", this._shapesRequestStartHandler)\n                            .bind(\"error\", this._shapesErrorHandler);\n                    } else {\n                        this._treeDataSource();\n                        this._isEditable = false;\n                    }\n                },\n\n                _connectionDataSource: function() {\n                    var dsOptions = this.options.connectionsDataSource;\n                    if (dsOptions) {\n                        var ds = isArray(dsOptions) ? { data: dsOptions } : dsOptions;\n\n                        if (this.connectionsDataSource && this._connectionsRefreshHandler) {\n                            this.connectionsDataSource\n                                .unbind(\"change\", this._connectionsRefreshHandler)\n                                .unbind(\"requestStart\", this._connectionsRequestStartHandler)\n                                .unbind(\"error\", this._connectionsErrorHandler);\n                        } else {\n                            this._connectionsRefreshHandler = this._refreshConnections.bind(this);\n                            this._connectionsRequestStartHandler = this._connectionsRequestStart.bind(this);\n                            this._connectionsErrorHandler = this._connectionsError.bind(this);\n                        }\n\n                        this.connectionsDataSource = kendo.data.DataSource.create(ds)\n                            .bind(\"change\", this._connectionsRefreshHandler)\n                            .bind(\"requestStart\", this._connectionsRequestStartHandler)\n                            .bind(\"error\", this._connectionsErrorHandler);\n                    }\n                },\n\n                _shapesRequestStart: function(e) {\n                    if (e.type == \"read\") {\n                        this._loadingShapes = true;\n                    }\n                },\n\n                _connectionsRequestStart: function(e) {\n                    if (e.type == \"read\") {\n                        this._loadingConnections = true;\n                    }\n                },\n\n                _error: function() {\n                    this._loadingShapes = false;\n                },\n\n                _connectionsError: function() {\n                    this._loadingConnections = false;\n                },\n\n                _refreshShapes: function(e) {\n                    if (e.action === \"remove\") {\n                        if (this._shouldRefresh()) {\n                            this._removeShapes(e.items);\n                        }\n                    } else if (e.action === \"itemchange\") {\n                        if (this._shouldRefresh()) {\n                            this._updateShapes(e.items, e.field);\n                        }\n                    } else if (e.action === \"add\") {\n                        this._inactiveShapeItems.add(e.items);\n                    } else if (e.action === \"sync\") {\n                        this._syncShapes(e.items);\n                    } else {\n                        this.refresh();\n                    }\n                },\n\n                _shouldRefresh: function() {\n                    return !this._suspended;\n                },\n\n                _suspendModelRefresh: function() {\n                    this._suspended = (this._suspended || 0) + 1;\n                },\n\n                _resumeModelRefresh: function() {\n                    this._suspended = math.max((this._suspended || 0) - 1, 0);\n                },\n\n                refresh: function() {\n                    this._loadingShapes = false;\n                    if (!this._loadingConnections) {\n                        this._rebindShapesAndConnections();\n                    }\n                },\n\n                _rebindShapesAndConnections: function() {\n                    this.clear();\n                    this._addShapes(this.dataSource.view());\n                    if (this.connectionsDataSource) {\n                        this._addConnections(this.connectionsDataSource.view(), false);\n                    }\n\n                    if (this.options.layout) {\n                        this.layout(this.options.layout);\n                    } else {\n                        this._redrawConnections();\n                    }\n                    this.trigger(\"dataBound\");\n                },\n\n                refreshConnections: function() {\n                    this._loadingConnections = false;\n                    if (!this._loadingShapes) {\n                        this._rebindShapesAndConnections();\n                    }\n                },\n\n                _redrawConnections: function() {\n                    var connections = this.connections;\n                    for (var idx = 0; idx < connections.length; idx++) {\n                        connections[idx].refresh();\n                    }\n                },\n\n                _removeShapes: function(items) {\n                    var dataMap = this._dataMap;\n                    var item, i;\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (dataMap[item.id]) {\n                            this.remove(dataMap[item.id], false);\n                            dataMap[item.id] = null;\n                        }\n                    }\n                },\n\n                _syncShapes: function() {\n                    var diagram = this;\n                    var inactiveItems = diagram._inactiveShapeItems;\n                    inactiveItems.forEach(function(inactiveItem) {\n                        var dataItem = inactiveItem.dataItem;\n                        var shape = inactiveItem.element;\n                        if (!dataItem.isNew()) {\n                            if (shape) {\n                                shape._setOptionsFromModel();\n                                diagram.addShape(shape, inactiveItem.undoable);\n                                diagram._dataMap[dataItem.id] = shape;\n                            } else {\n                                diagram._addDataItem(dataItem);\n                            }\n                            inactiveItem.activate();\n                            inactiveItems.remove(dataItem);\n                        }\n                    });\n                },\n\n                _updateShapes: function(items, field) {\n                    for (var i = 0; i < items.length; i++) {\n                        var dataItem = items[i];\n\n                        var shape = this._dataMap[dataItem.id];\n                        if (shape) {\n                            shape.updateOptionsFromModel(dataItem, field);\n                        }\n                    }\n                },\n\n                _addShapes: function(dataItems) {\n                    for (var i = 0; i < dataItems.length; i++) {\n                        this._addDataItem(dataItems[i], false);\n                    }\n                },\n\n                _refreshConnections: function(e) {\n                    if (e.action === \"remove\") {\n                        if (this._shouldRefresh()) {\n                            this._removeConnections(e.items);\n                        }\n                    } else if (e.action === \"add\") {\n                        this._addConnections(e.items);\n                    } else if (e.action === \"sync\") {\n                        //TO DO: include logic to update the connections with different values returned from the server.\n                    } else if (e.action === \"itemchange\") {\n                        if (this._shouldRefresh()) {\n                            this._updateConnections(e.items);\n                        }\n                    } else {\n                        this.refreshConnections();\n                    }\n                },\n\n                _removeConnections: function(items) {\n                    for (var i = 0; i < items.length; i++) {\n                        this.remove(this._connectionsDataMap[items[i].uid], false);\n                        this._connectionsDataMap[items[i].uid] = null;\n                    }\n                },\n\n                _updateConnections: function(items) {\n                    for (var i = 0; i < items.length; i++) {\n                        var dataItem = items[i];\n\n                        var connection = this._connectionsDataMap[dataItem.uid];\n                        connection.updateOptionsFromModel(dataItem);\n                    }\n                },\n\n                _addConnections: function(connections, undoable) {\n                    var length = connections.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var dataItem = connections[i];\n                        this._addConnectionDataItem(dataItem, undoable);\n                    }\n                },\n\n                _addConnectionDataItem: function(dataItem, undoable) {\n                    if (!this._connectionsDataMap[dataItem.uid]) {\n                        var from = this._validateConnector(dataItem.from);\n                        if (!defined(from) || from === null) {\n                            from = new Point(dataItem.fromX, dataItem.fromY);\n                        }\n\n                        var to = this._validateConnector(dataItem.to);\n                        if (!defined(to) || to === null) {\n                            to = new Point(dataItem.toX, dataItem.toY);\n                        }\n\n                        if (defined(from) && defined(to)) {\n                            var options = deepExtend({}, this.options.connectionDefaults);\n                            options.dataItem = dataItem;\n                            var connection = new Connection(from, to, options);\n\n                            this._connectionsDataMap[dataItem.uid] = connection;\n                            this.addConnection(connection, undoable);\n                        }\n                    }\n                },\n\n                _validateConnector: function(value) {\n                    var connector;\n\n                    if (defined(value) && value !== null) {\n                        connector = this._dataMap[value];\n                    }\n\n                    return connector;\n                },\n\n                _treeDataSource: function() {\n                    var that = this,\n                        options = that.options,\n                        dataSource = options.dataSource;\n\n                    dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                    if (dataSource instanceof kendo.data.DataSource && !(dataSource instanceof kendo.data.HierarchicalDataSource)) {\n                        throw new Error(\"Incorrect DataSource type. If a single dataSource instance is set to the diagram then it should be a HierarchicalDataSource. You should set only the options instead of an instance or a HierarchicalDataSource instance or supply connectionsDataSource as well.\");\n                    }\n\n                    if (!dataSource.fields) {\n                        dataSource.fields = [\n                            { field: \"text\" },\n                            { field: \"url\" },\n                            { field: \"spriteCssClass\" },\n                            { field: \"imageUrl\" }\n                        ];\n                    }\n                    if (that.dataSource && that._refreshHandler) {\n                        that._unbindDataSource();\n                    }\n\n                    that._refreshHandler = that._refreshSource.bind(that);\n                    that._errorHandler = that._error.bind(that);\n\n                    that.dataSource = HierarchicalDataSource.create(dataSource)\n                        .bind(CHANGE, that._refreshHandler)\n                        .bind(ERROR, that._errorHandler);\n                },\n\n                _unbindDataSource: function() {\n                    var that = this;\n\n                    that.dataSource.unbind(CHANGE, that._refreshHandler).unbind(ERROR, that._errorHandler);\n                },\n\n                _adorn: function(adorner, isActive) {\n                    if (isActive !== undefined$1 && adorner) {\n                        if (isActive) {\n                            this._adorners.push(adorner);\n                            this.adornerLayer.append(adorner.visual);\n                        }\n                        else {\n                            Utils.remove(this._adorners, adorner);\n                            this.adornerLayer.remove(adorner.visual);\n                        }\n                    }\n                },\n\n                _showConnectors: function(shape, value) {\n                    if (value) {\n                        this._connectorsAdorner.show(shape);\n                    } else {\n                        this._connectorsAdorner.destroy();\n                    }\n                },\n\n                _updateAdorners: function() {\n                    var adorners = this._adorners;\n\n                    for (var i = 0; i < adorners.length; i++) {\n                        var adorner = adorners[i];\n\n                        if (adorner.refreshBounds) {\n                            adorner.refreshBounds();\n                        }\n                        adorner.refresh();\n                    }\n                },\n\n                _refresh: function() {\n                    for (var i = 0; i < this.connections.length; i++) {\n                        this.connections[i].refresh();\n                    }\n                },\n\n                _destroyToolBar: function() {\n                    if (this.singleToolBar) {\n                        this.singleToolBar.hide();\n                        this.singleToolBar.destroy();\n                        this.singleToolBar = null;\n                    }\n                },\n\n                _destroyGlobalToolBar: function() {\n                    if (this.toolBar) {\n                        this.toolBar.hide();\n                        this.toolBar.destroy();\n                        this.toolBar = null;\n                    }\n                },\n\n                exportDOMVisual: function() {\n                    var viewBox = this.canvas._viewBox;\n                    var scrollOffset = geom.transform()\n                                           .translate(-viewBox.x, -viewBox.y);\n\n                    var viewRect = new geom.Rect([0, 0], [viewBox.width, viewBox.height]);\n                    var clipPath = draw.Path.fromRect(viewRect);\n                    var wrap = new draw.Group({ transform: scrollOffset });\n                    var clipWrap = new draw.Group({ clip: clipPath });\n                    var root = this.canvas.drawingElement.children[0];\n\n                    clipWrap.append(wrap);\n\n                    // Don't reparent the root\n                    wrap.children.push(root);\n\n                    return clipWrap;\n                },\n\n                exportVisual: function() {\n                    var scale = geom.transform().scale(1 / this._zoom);\n                    var wrap = new draw.Group({\n                        transform: scale\n                    });\n\n                    var root = this.mainLayer.drawingElement;\n                    wrap.children.push(root);\n\n                    return wrap;\n                },\n\n                _syncChanges: function() {\n                    this._syncShapeChanges();\n                    this._syncConnectionChanges();\n                },\n\n                _syncShapeChanges: function() {\n                    if (this.dataSource && this._isEditable) {\n                        this.dataSource.sync();\n                    }\n                },\n\n                _syncConnectionChanges: function() {\n                    var that = this;\n                    if (that.connectionsDataSource && that._isEditable) {\n                        $.when.apply($, that._deferredConnectionUpdates).then(function() {\n                            that.connectionsDataSource.sync();\n                        });\n                        that.deferredConnectionUpdates = [];\n                    }\n                }\n            });\n\n            dataviz.ExportMixin.extend(Diagram.fn, true);\n\n            if (kendo.PDFMixin) {\n                kendo.PDFMixin.extend(Diagram.fn);\n            }\n\n            function filterShapeDataItem(dataItem) {\n                var result = {};\n\n                dataItem = dataItem || {};\n\n                if (defined(dataItem.text) && dataItem.text !== null) {\n                    result.text = dataItem.text;\n                }\n\n                if (defined(dataItem.x) && dataItem.x !== null) {\n                    result.x = dataItem.x;\n                }\n\n                if (defined(dataItem.y) && dataItem.y !== null) {\n                    result.y = dataItem.y;\n                }\n\n                if (defined(dataItem.width) && dataItem.width !== null) {\n                    result.width = dataItem.width;\n                }\n\n                if (defined(dataItem.height) && dataItem.height !== null) {\n                    result.height = dataItem.height;\n                }\n\n                if (defined(dataItem.type) && dataItem.type !== null) {\n                    result.type = dataItem.type;\n                }\n\n                return result;\n            }\n\n            function filterConnectionDataItem(dataItem) {\n                var result = {};\n\n                dataItem = dataItem || {};\n\n                if (defined(dataItem.text) && dataItem.text !== null) {\n                    result.content = dataItem.text;\n                }\n\n                if (defined(dataItem.type) && dataItem.type !== null) {\n                    result.type = dataItem.type;\n                }\n\n                if (defined(dataItem.from) && dataItem.from !== null) {\n                    result.from = dataItem.from;\n                }\n\n                if (defined(dataItem.fromConnector) && dataItem.fromConnector !== null) {\n                    result.fromConnector = dataItem.fromConnector;\n                }\n\n                if (defined(dataItem.fromX) && dataItem.fromX !== null) {\n                    result.fromX = dataItem.fromX;\n                }\n\n                if (defined(dataItem.fromY) && dataItem.fromY !== null) {\n                    result.fromY = dataItem.fromY;\n                }\n\n                if (defined(dataItem.to) && dataItem.to !== null) {\n                    result.to = dataItem.to;\n                }\n\n                if (defined(dataItem.toConnector) && dataItem.toConnector !== null) {\n                    result.toConnector = dataItem.toConnector;\n                }\n\n                if (defined(dataItem.toX) && dataItem.toX !== null) {\n                    result.toX = dataItem.toX;\n                }\n\n                if (defined(dataItem.toY) && dataItem.toY !== null) {\n                    result.toY = dataItem.toY;\n                }\n\n                return result;\n            }\n\n\n            var DiagramToolBar = kendo.Observable.extend({\n                init: function(diagram, options) {\n                    kendo.Observable.fn.init.call(this);\n                    this.diagram = diagram;\n                    this.options = deepExtend({}, this.options, options);\n                    this._tools = [];\n                    this.createToolBar();\n                    this.createTools();\n                    this.appendTools();\n\n                    if (this.options.modal) {\n                        this.createPopup();\n                    }\n\n                    this.bind(this.events, options);\n                },\n\n                events: [\"click\"],\n\n                createPopup: function() {\n                    this.container = $(\"<div/>\").append(this.element);\n                    this._popup = this.container.kendoPopup({}).getKendoPopup();\n                },\n\n                appendTools: function() {\n                    for (var i = 0; i < this._tools.length; i++) {\n                        var tool = this._tools[i];\n                        if (tool.buttons && tool.buttons.length || !defined(tool.buttons)) {\n                            this._toolBar.add(tool);\n                        }\n                    }\n                },\n\n                createToolBar: function() {\n                    this.element = $(\"<div/>\");\n                    this._toolBar = this.element\n                        .kendoToolBar({\n                            click: this.click.bind(this),\n                            resizable: false\n                        }).getKendoToolBar();\n\n                    this.element.css(\"border\", \"none\");\n                },\n\n                createTools: function() {\n                    for (var i = 0; i < this.options.tools.length; i++) {\n                        this.createTool(this.options.tools[i]);\n                    }\n                },\n\n                createTool: function(tool) {\n                    if (!isPlainObject(tool)) {\n                        tool = {\n                            name: tool\n                        };\n                    }\n                    var toolName = tool.name + \"Tool\";\n                    if (this[toolName]) {\n                        this[toolName](tool);\n                    } else {\n                        this._tools.push(deepExtend({}, tool, {\n                            attributes: this._setAttributes({ action: tool.name })\n                        }));\n                    }\n                },\n\n                showAt: function(point) {\n                    var popupZIndex = parseInt(this.options.popupZIndex, 10);\n\n                    if (this._popup) {\n                        this._popup.open(point.x, point.y);\n\n                        if (popupZIndex) {\n                            this._popup.wrapper.css(\"zIndex\", popupZIndex);\n                        }\n                    }\n                },\n\n                hide: function() {\n                    if (this._popup) {\n                        this._popup.close();\n                    }\n                },\n\n                newGroup: function() {\n                    return {\n                        type: \"buttonGroup\",\n                        buttons: []\n                    };\n                },\n\n                editTool: function() {\n                    this._tools.push({\n                        icon: \"pencil\",\n                        showText: \"overflow\",\n                        type: \"button\",\n                        text: \"Edit\",\n                        attributes: this._setAttributes({ action: \"edit\" })\n                    });\n                },\n\n                deleteTool: function() {\n                    this._tools.push({\n                        icon: \"x\",\n                        showText: \"overflow\",\n                        type: \"button\",\n                        text: \"Delete\",\n                        attributes: this._setAttributes({ action: \"delete\" })\n                    });\n                },\n\n                rotateAnticlockwiseTool: function(options) {\n                    this._appendGroup(\"rotate\");\n                    this._rotateGroup.buttons.push({\n                        icon: \"rotate-left\",\n                        showText: \"overflow\",\n                        text: \"RotateAnticlockwise\",\n                        group: \"rotate\",\n                        attributes: this._setAttributes({ action: \"rotateAnticlockwise\", step: options.step })\n                    });\n                },\n\n                rotateClockwiseTool: function(options) {\n                    this._appendGroup(\"rotate\");\n                    this._rotateGroup.buttons.push({\n                        icon: \"rotate-right\",\n                        attributes: this._setAttributes({ action: \"rotateClockwise\", step: options.step }),\n                        showText: \"overflow\",\n                        text: \"RotateClockwise\",\n                        group: \"rotate\"\n                    });\n                },\n\n                createShapeTool: function() {\n                    this._appendGroup(\"create\");\n                    this._createGroup.buttons.push({\n                        icon: \"shapes\",\n                        showText: \"overflow\",\n                        text: \"CreateShape\",\n                        group: \"create\",\n                        attributes: this._setAttributes({ action: \"createShape\" })\n                    });\n                },\n\n                createConnectionTool: function() {\n                    this._appendGroup(\"create\");\n                    this._createGroup.buttons.push({\n                        icon: \"connector\",\n                        showText: \"overflow\",\n                        text: \"CreateConnection\",\n                        group: \"create\",\n                        attributes: this._setAttributes({ action: \"createConnection\" })\n                    });\n                },\n\n                undoTool: function() {\n                    this._appendGroup(\"history\");\n                    this._historyGroup.buttons.push({\n                        icon: \"undo\",\n                        showText: \"overflow\",\n                        text: \"Undo\",\n                        group: \"history\",\n                        attributes: this._setAttributes({ action: \"undo\" })\n                    });\n                },\n\n                redoTool: function() {\n                    this._appendGroup(\"history\");\n                    this._historyGroup.buttons.push({\n                        icon: \"redo\",\n                        showText: \"overflow\",\n                        text: \"Redo\",\n                        group: \"history\",\n                        attributes: this._setAttributes({ action: \"redo\" })\n                    });\n                },\n\n                _appendGroup: function(name) {\n                    var prop = \"_\" + name + \"Group\";\n                    if (!this[prop]) {\n                        this[prop] = this.newGroup();\n                        this._tools.push(this[prop]);\n                    }\n                },\n\n                _setAttributes: function(attributes) {\n                    var attr = {};\n\n                    if (attributes.action) {\n                        attr[kendo.attr(\"action\")] = attributes.action;\n                    }\n\n                    if (attributes.step) {\n                        attr[kendo.attr(\"step\")] = attributes.step;\n                    }\n\n                    return attr;\n                },\n\n                _getAttributes: function(element) {\n                    var attr = {};\n\n                    var action = element.attr(kendo.attr(\"action\"));\n                    if (action) {\n                        attr.action = action;\n                    }\n\n                    var step = element.attr(kendo.attr(\"step\"));\n                    if (step) {\n                        attr.step = step;\n                    }\n\n                    return attr;\n                },\n\n                click: function(e) {\n                    var attributes = this._getAttributes($(e.target));\n                    var action = attributes.action;\n\n                    if (action && this[action]) {\n                        this[action](attributes);\n                    }\n\n                    this.trigger(\"click\", this.eventData(action, e.target));\n                },\n\n                eventData: function(action, target) {\n                    var elements = this.selectedElements(),\n                        length = elements.length,\n                        shapes = [], connections = [], element;\n\n                    for (var idx = 0; idx < length; idx++) {\n                        element = elements[idx];\n                        if (element instanceof Shape) {\n                            shapes.push(element);\n                        } else {\n                            connections.push(element);\n                        }\n                    }\n\n                    return {\n                        shapes: shapes,\n                        connections: connections,\n                        action: action,\n                        target: target\n                    };\n                },\n\n                \"delete\": function() {\n                    var diagram = this.diagram;\n                    var toRemove = diagram._triggerRemove(this.selectedElements());\n                    if (toRemove.length) {\n                        this.diagram.remove(toRemove, true);\n                        this.diagram._syncChanges();\n                    }\n                },\n\n                edit: function() {\n                    var selectedElemens = this.selectedElements();\n                    if (selectedElemens.length === 1) {\n                        this.diagram.edit(selectedElemens[0]);\n                    }\n                },\n\n                rotateClockwise: function(options) {\n                    var angle = parseFloat(options.step || 90);\n                    this._rotate(angle);\n                },\n\n                rotateAnticlockwise: function(options) {\n                    var angle = parseFloat(options.step || 90);\n                    this._rotate(-angle);\n                },\n\n                _rotate: function(angle) {\n                    var adorner = this.diagram._resizingAdorner;\n                    adorner.angle(adorner.angle() + angle);\n                    adorner.rotate();\n                },\n\n                selectedElements: function() {\n                    return this.diagram.select();\n                },\n\n                createShape: function() {\n                    this.diagram.createShape();\n                },\n\n                createConnection: function() {\n                    this.diagram.createConnection();\n                },\n\n                undo: function() {\n                    this.diagram.undo();\n                },\n\n                redo: function() {\n                    this.diagram.redo();\n                },\n\n                destroy: function() {\n                    this.diagram = null;\n                    this.element = null;\n                    this.options = null;\n\n                    if (this._toolBar) {\n                        this._toolBar.destroy();\n                    }\n\n                    if (this._popup) {\n                        this._popup.destroy();\n                    }\n                }\n            });\n\n            var Editor = kendo.Observable.extend({\n                init: function(element, options) {\n                    kendo.Observable.fn.init.call(this);\n\n                    this.options = extend(true, {}, this.options, options);\n                    this.element = element;\n                    this.model = this.options.model;\n                    this.fields = this._getFields();\n                    this._initContainer();\n                    this.createEditable();\n                },\n\n                options: {\n                    editors: {}\n                },\n\n                _initContainer: function() {\n                    this.wrapper = this.element;\n                },\n\n                createEditable: function() {\n                    var options = this.options;\n\n                    this.editable = new kendo.ui.Editable(this.wrapper, {\n                        fields: this.fields,\n                        target: options.target,\n                        clearContainer: false,\n                        model: this.model\n                    });\n                },\n\n                _isEditable: function(field) {\n                    return this.model.editable && this.model.editable(field);\n                },\n\n                _getFields: function() {\n                    var fields = [];\n                    var modelFields = this.model.fields;\n\n                    for (var field in modelFields) {\n                        var result = {};\n                        if (this._isEditable(field)) {\n                            var editor = this.options.editors[field];\n                            if (editor) {\n                                result.editor = editor;\n                            }\n                            result.field = field;\n                            fields.push(result);\n                        }\n                    }\n\n                    return fields;\n                },\n\n                end: function() {\n                    return this.editable.end();\n                },\n\n                destroy: function() {\n                    this.editable.destroy();\n                    this.editable.element.find(\"[\" + kendo.attr(\"container-for\") + \"]\").empty();\n                    this.model = this.wrapper = this.element = this.columns = this.editable = null;\n                }\n            });\n\n            var PopupEditor = Editor.extend({\n                init: function(element, options) {\n                    Editor.fn.init.call(this, element, options);\n                    this.bind(this.events, this.options);\n\n                    this.open();\n                },\n\n                events: [ \"update\", \"cancel\" ],\n\n                options: {\n                    window: {\n                        modal: true,\n                        resizable: false,\n                        draggable: true,\n                        title: \"Edit\",\n                        visible: false\n                    }\n                },\n\n                _initContainer: function() {\n                    var that = this;\n                    this.wrapper = $('<div class=\"k-popup-edit-form\"/>')\n                        .attr(kendo.attr(\"uid\"), this.model.uid);\n\n                    var formContent = \"\";\n\n                    if (this.options.template) {\n                        formContent += this._renderTemplate();\n                        this.fields = [];\n                    } else {\n                        formContent += this._renderFields();\n                    }\n\n                    formContent += this._renderButtons();\n\n                    this.wrapper.append(\n                        $('<div class=\"k-edit-form-container\"/>').append(formContent));\n\n                    this.window = new kendo.ui.Window(this.wrapper.appendTo(this.element), this.options.window);\n                    this.window.bind(\"close\", function(e) {\n                        //The bellow line is required due to: draggable window in IE, change event will be triggered while the window is closing\n                        if (e.userTriggered) {\n                            e.sender.element.trigger(\"focus\");\n                            that._cancelClick(e);\n                        }\n                    });\n\n                    this._attachButtonEvents();\n                },\n\n                _renderTemplate: function() {\n                    var template = this.options.template;\n\n                    if (typeof template === \"string\") {\n                        template = kendo.unescape(template);\n                    }\n\n                    template = kendo.template(template)(this.model);\n\n                    return template;\n                },\n\n                _renderFields: function() {\n                    var form = \"\";\n                    for (var i = 0; i < this.fields.length; i++) {\n                        var field = this.fields[i];\n\n                        form += '<div class=\"k-edit-label\"><label for=\"' + field.field + '\">' + (field.field || \"\") + '</label></div>';\n\n                        if (this._isEditable(field.field)) {\n                            form += '<div ' + kendo.attr(\"container-for\") + '=\"' + field.field +\n                            '\" class=\"k-edit-field\"></div>';\n                        }\n                    }\n\n                    return form;\n                },\n\n                _renderButtons: function() {\n                    var form = '<div class=\"k-edit-buttons\">';\n                    form += this._createButton(\"update\");\n                    form += this._createButton(\"cancel\");\n                    form += '</div>';\n                    return form;\n                },\n\n                _createButton: function(name) {\n                    return kendo.template(BUTTON_TEMPLATE)(defaultButtons[name]);\n                },\n\n                _attachButtonEvents: function() {\n                    this._cancelClickHandler = this._cancelClick.bind(this);\n                    this.window.element.on(CLICK + NS, \"button.k-diagram-cancel\", this._cancelClickHandler);\n\n                    this._updateClickHandler = this._updateClick.bind(this);\n                    this.window.element.on(CLICK + NS, \"button.k-diagram-update\", this._updateClickHandler);\n                },\n\n                _updateClick: function(e) {\n                    e.preventDefault();\n                    this.trigger(\"update\");\n                },\n\n                _cancelClick: function(e) {\n                    e.preventDefault();\n                    this.trigger(\"cancel\");\n                },\n\n                open: function() {\n                    this.window.center().open();\n                },\n\n                close: function() {\n                    this.window.bind(\"deactivate\", this.destroy.bind(this)).close();\n                },\n\n                destroy: function() {\n                    this.window.close().destroy();\n                    this.window.element.off(CLICK + NS, \"a.k-diagram-cancel\", this._cancelClickHandler);\n                    this.window.element.off(CLICK + NS, \"a.k-diagram-update\", this._updateClickHandler);\n                    this._cancelClickHandler = null;\n                    this._editUpdateClickHandler = null;\n                    this.window = null;\n                    Editor.fn.destroy.call(this);\n                }\n            });\n\n            function connectionSelector(container, options) {\n                var model = this.dataSource.reader.model;\n                if (model) {\n                    var textField = model.fn.fields.text ? \"text\" : model.idField;\n                    $(\"<input name='\" + options.field + \"' />\")\n                        .appendTo(container).kendoDropDownList({\n                            dataValueField: model.idField,\n                            dataTextField: textField,\n                            dataSource: this.dataSource.data().toJSON(),\n                            optionLabel: \" \",\n                            valuePrimitive: true\n                        });\n                }\n            }\n\n            function InactiveItem(dataItem) {\n                this.dataItem = dataItem;\n                this.callbacks = [];\n            }\n\n            InactiveItem.fn = InactiveItem.prototype = {\n                onActivate: function(callback) {\n                    var deffered = $.Deferred();\n                    this.callbacks.push({\n                        callback: callback,\n                        deferred: deffered\n                    });\n                    return deffered;\n                },\n\n                activate: function() {\n                    var callbacks = this.callbacks;\n                    var item;\n                    for (var idx = 0; idx < callbacks.length; idx++) {\n                        item = this.callbacks[idx];\n                        item.callback(this.dataItem);\n                        item.deferred.resolve();\n                    }\n                    this.callbacks = [];\n                }\n            };\n\n            function InactiveItemsCollection() {\n                this.items = {};\n            }\n\n            InactiveItemsCollection.fn = InactiveItemsCollection.prototype = {\n                add: function(items) {\n                    for (var idx = 0; idx < items.length; idx++) {\n                        this.items[items[idx].uid] = new InactiveItem(items[idx]);\n                    }\n                },\n\n                forEach: function(callback) {\n                    for (var uid in this.items) {\n                        callback(this.items[uid]);\n                    }\n                },\n\n                getByUid: function(uid) {\n                    return this.items[uid];\n                },\n\n                remove: function(item) {\n                    delete this.items[item.uid];\n                }\n            };\n\n            var QuadRoot = Class.extend({\n                init: function() {\n                    this.shapes = [];\n                },\n\n                _add: function(shape, bounds) {\n                    this.shapes.push({\n                        bounds: bounds,\n                        shape: shape\n                    });\n                    shape._quadNode = this;\n                },\n\n                insert: function(shape, bounds) {\n                    this._add(shape, bounds);\n                },\n\n                remove: function(shape) {\n                    var shapes = this.shapes;\n                    var length = shapes.length;\n\n                    for (var idx = 0; idx < length; idx++) {\n                        if (shapes[idx].shape === shape) {\n                            shapes.splice(idx, 1);\n                            break;\n                        }\n                    }\n                },\n\n                hitTestRect: function(rect, exclude) {\n                    var shapes = this.shapes;\n                    var length = shapes.length;\n\n                    for (var i = 0; i < length; i++) {\n                        if (this._testRect(shapes[i].shape, rect) && !dataviz.inArray(shapes[i].shape, exclude)) {\n                            return true;\n                        }\n                    }\n                },\n\n                _testRect: function(shape, rect) {\n                    var angle = shape.rotate().angle;\n                    var bounds = shape.bounds();\n                    var hit;\n                    if (!angle) {\n                        hit = bounds.overlaps(rect);\n                    } else {\n                        hit = Intersect.rects(rect, bounds, -angle);\n                    }\n                    return hit;\n                }\n            });\n\n            var QuadNode = QuadRoot.extend({\n                init: function(rect) {\n                    QuadRoot.fn.init.call(this);\n                    this.children = [];\n                    this.rect = rect;\n                },\n\n                inBounds: function(rect) {\n                    var nodeRect = this.rect;\n                    var nodeBottomRight = nodeRect.bottomRight();\n                    var bottomRight = rect.bottomRight();\n                    var inBounds = nodeRect.x <= rect.x && nodeRect.y <= rect.y && bottomRight.x <= nodeBottomRight.x &&\n                        bottomRight.y <= nodeBottomRight.y;\n                    return inBounds;\n                },\n\n                overlapsBounds: function(rect) {\n                    return this.rect.overlaps(rect);\n                },\n\n                insert: function(shape, bounds) {\n                    var inserted = false;\n                    var children = this.children;\n                    var length = children.length;\n                    if (this.inBounds(bounds)) {\n                        if (!length && this.shapes.length < 4) {\n                            this._add(shape, bounds);\n                        } else {\n                            if (!length) {\n                                this._initChildren();\n                            }\n\n                            for (var idx = 0; idx < children.length; idx++) {\n                                if (children[idx].insert(shape, bounds)) {\n                                    inserted = true;\n                                    break;\n                                }\n                            }\n\n                            if (!inserted) {\n                                this._add(shape, bounds);\n                            }\n                        }\n                        inserted = true;\n                    }\n\n                    return inserted;\n                },\n\n                _initChildren: function() {\n                    var rect = this.rect,\n                        children = this.children,\n                        shapes = this.shapes,\n                        center = rect.center(),\n                        halfWidth = rect.width / 2,\n                        halfHeight = rect.height / 2,\n                        childIdx, shapeIdx;\n\n                    children.push(\n                        new QuadNode(new Rect(rect.x, rect.y, halfWidth, halfHeight)),\n                        new QuadNode(new Rect(center.x, rect.y, halfWidth, halfHeight)),\n                        new QuadNode(new Rect(rect.x, center.y, halfWidth, halfHeight)),\n                        new QuadNode(new Rect(center.x, center.y, halfWidth, halfHeight))\n                    );\n                    for (shapeIdx = shapes.length - 1; shapeIdx >= 0; shapeIdx--) {\n                        for (childIdx = 0; childIdx < children.length; childIdx++) {\n                            if (children[childIdx].insert(shapes[shapeIdx].shape, shapes[shapeIdx].bounds)) {\n                                shapes.splice(shapeIdx, 1);\n                                break;\n                            }\n                        }\n                    }\n                },\n\n                hitTestRect: function(rect, exclude) {\n                    var idx;\n                    var children = this.children;\n                    var length = children.length;\n                    var hit = false;\n\n                    if (this.overlapsBounds(rect)) {\n                        if (QuadRoot.fn.hitTestRect.call(this, rect, exclude)) {\n                            hit = true;\n                        } else {\n                             for (idx = 0; idx < length; idx++) {\n                                if (children[idx].hitTestRect(rect, exclude)) {\n                                   hit = true;\n                                   break;\n                                }\n                            }\n                        }\n                    }\n\n                    return hit;\n                }\n            });\n\n            var ShapesQuadTree = Class.extend({\n                ROOT_SIZE: 1000,\n\n                init: function(diagram) {\n                    var boundsChangeHandler = this._boundsChange.bind(this);\n                    diagram.bind(ITEMBOUNDSCHANGE, boundsChangeHandler);\n                    diagram.bind(ITEMROTATE, boundsChangeHandler);\n                    this.initRoots();\n                },\n\n                initRoots: function() {\n                    this.rootMap = {};\n                    this.root = new QuadRoot();\n                },\n\n                clear: function() {\n                    this.initRoots();\n                },\n\n                _boundsChange: function(e) {\n                    if (e.item._quadNode) {\n                        e.item._quadNode.remove(e.item);\n                    }\n                    this.insert(e.item);\n                },\n\n                insert: function(shape) {\n                    var bounds = shape.bounds(ROTATED);\n                    var rootSize = this.ROOT_SIZE;\n                    var sectors = this.getSectors(bounds);\n                    var x = sectors[0][0];\n                    var y = sectors[1][0];\n\n                    if (this.inRoot(sectors)) {\n                        this.root.insert(shape, bounds);\n                    } else {\n                        if (!this.rootMap[x]) {\n                            this.rootMap[x] = {};\n                        }\n\n                        if (!this.rootMap[x][y]) {\n                            this.rootMap[x][y] = new QuadNode(\n                                new Rect(x * rootSize, y * rootSize, rootSize, rootSize)\n                            );\n                        }\n\n                        this.rootMap[x][y].insert(shape, bounds);\n                    }\n                },\n\n                remove: function(shape) {\n                    if (shape._quadNode) {\n                        shape._quadNode.remove(shape);\n                    }\n                },\n\n                inRoot: function(sectors) {\n                    return sectors[0].length > 1 || sectors[1].length > 1;\n                },\n\n                getSectors: function(rect) {\n                    var rootSize = this.ROOT_SIZE;\n                    var bottomRight = rect.bottomRight();\n                    var bottomX = math.floor(bottomRight.x / rootSize);\n                    var bottomY = math.floor(bottomRight.y / rootSize);\n                    var sectors = [[],[]];\n                    for (var x = math.floor(rect.x / rootSize); x <= bottomX; x++) {\n                        sectors[0].push(x);\n                    }\n                    for (var y = math.floor(rect.y / rootSize); y <= bottomY; y++) {\n                        sectors[1].push(y);\n                    }\n                    return sectors;\n                },\n\n                hitTestRect: function(rect, exclude) {\n                    var sectors = this.getSectors(rect);\n                    var xIdx, yIdx, x, y;\n                    var root;\n\n                    if (this.root.hitTestRect(rect, exclude)) {\n                        return true;\n                    }\n\n                    for (xIdx = 0; xIdx < sectors[0].length; xIdx++) {\n                        x = sectors[0][xIdx];\n                        for (yIdx = 0; yIdx < sectors[1].length; yIdx++) {\n                            y = sectors[1][yIdx];\n                            root = (this.rootMap[x] || {})[y];\n                            if (root && root.hitTestRect(rect, exclude)) {\n                                return true;\n                            }\n                        }\n                    }\n\n                    return false;\n                }\n            });\n\n            function cloneDataItem(dataItem) {\n                var result = dataItem;\n                if (dataItem instanceof kendo.data.Model) {\n                    result = dataItem.toJSON();\n                    result[dataItem.idField] = dataItem._defaultId;\n                }\n                return result;\n            }\n\n            function splitDiagramElements(elements) {\n                var connections = [];\n                var shapes = [];\n                var element, idx;\n                for (idx = 0; idx < elements.length; idx++) {\n                    element = elements[idx];\n                    if (element instanceof Shape) {\n                        shapes.push(element);\n                    } else {\n                        connections.push(element);\n                    }\n                }\n                return {\n                    shapes: shapes,\n                    connections: connections\n                };\n            }\n\n            function createModel(dataSource, model) {\n                if (dataSource.reader.model) {\n                    return new dataSource.reader.model(model);\n                }\n\n                return new kendo.data.ObservableObject(model);\n            }\n\n            function clearField(field, model) {\n                if (defined(model[field])) {\n                    model.set(field, null);\n                }\n            }\n\n            function copyDefaultOptions(mainOptions, elementOptions, fields) {\n                var field;\n                for (var idx = 0; idx < fields.length; idx++) {\n                    field = fields[idx];\n                    if (elementOptions && !defined(elementOptions[field])) {\n                        elementOptions[field] = mainOptions[field];\n                    }\n                }\n            }\n\n            function translateToOrigin(visual) {\n                var bbox = visual.drawingContainer().clippedBBox(null);\n                if (bbox.origin.x !== 0 || bbox.origin.y !== 0) {\n                    visual.position(-bbox.origin.x, -bbox.origin.y);\n                }\n            }\n\n            function preventDefault(e) {\n                e.preventDefault();\n            }\n\n            dataviz.ui.plugin(Diagram);\n\n            deepExtend(diagram, {\n                Shape: Shape,\n                Connection: Connection,\n                Connector: Connector,\n                DiagramToolBar: DiagramToolBar,\n                QuadNode: QuadNode,\n                QuadRoot: QuadRoot,\n                ShapesQuadTree: ShapesQuadTree,\n                PopupEditor: PopupEditor\n            });\n    })(window.kendo.jQuery);\n\n    var __meta__ = {\n            id: \"dataviz.diagram\",\n            name: \"Diagram\",\n            category: \"dataviz\",\n            description: \"The Kendo DataViz Diagram \",\n            depends: [ \"data\", \"userevents\", \"mobile.scroller\", \"draganddrop\", \"drawing\", \"dataviz.core\", \"dataviz.themes\", \"toolbar\" ],\n            features: [{\n                id: \"dataviz.diagram-pdf-export\",\n                name: \"PDF export\",\n                description: \"Export Diagram as PDF\",\n                depends: [ \"pdf\" ]\n            },{\n                id: \"dataviz.diagram-editing\",\n                name: \"Editing\",\n                description: \"Support for model editing\",\n                depends: [ \"editable\", \"window\", \"dropdownlist\" ]\n            }]\n        };\n\n}));\n"]}